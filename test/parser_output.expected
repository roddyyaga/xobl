Parsetree.Extension {name = "BigRequests"; file_name = "bigreq";
  query_name = "BIG-REQUESTS"; multiword = true; version = (0, 0);
  declarations =
  [Parsetree.Request {name = "Enable"; opcode = 0; combine_adjacent = true;
     fields = [];
     reply =
     (Some { Parsetree.fields =
             [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Parsetree.Field {name = "maximum_request_length";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card32);
                   ft_allowed = None }}
               ];
             doc = None });
     doc = None}
    ]}
Parsetree.Extension {name = "Composite"; file_name = "composite";
  query_name = "Composite"; multiword = false; version = (0, 4);
  declarations =
  [(Parsetree.Import "xproto"); (Parsetree.Import "xfixes");
    Parsetree.Enum {name = "Redirect";
      items =
      [("Automatic", (Parsetree.Item_value 0L));
        ("Manual", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "client_major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "client_minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "RedirectWindow"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "update";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Redirect" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "RedirectSubwindows"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "update";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Redirect" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "UnredirectWindow"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "update";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Redirect" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "UnredirectSubwindows"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "update";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Redirect" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateRegionFromBorderClip"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "region";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "NameWindowPixmap"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "pixmap";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PIXMAP" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetOverlayWindow"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "overlay_win";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "WINDOW" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ReleaseOverlayWindow"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply = None; doc = None}
    ]}
Parsetree.Extension {name = "Damage"; file_name = "damage";
  query_name = "DAMAGE"; multiword = false; version = (1, 1);
  declarations =
  [(Parsetree.Import "xproto"); (Parsetree.Import "xfixes");
    (Parsetree.Xid "DAMAGE");
    Parsetree.Enum {name = "ReportLevel";
      items =
      [("RawRectangles", (Parsetree.Item_value 0L));
        ("DeltaRectangles", (Parsetree.Item_value 1L));
        ("BoundingBox", (Parsetree.Item_value 2L));
        ("NonEmpty", (Parsetree.Item_value 3L))];
      doc = None};
    Parsetree.Error {name = "BadDamage"; number = 0; fields = []};
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "client_major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "client_minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "Create"; opcode = 1; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "damage";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DAMAGE" });
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "level";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ReportLevel" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "Destroy"; opcode = 2; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "damage";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DAMAGE" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "Subtract"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "damage";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DAMAGE" });
           ft_allowed = None }};
        Parsetree.Field {name = "repair";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Region" }))
            }};
        Parsetree.Field {name = "parts";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Region" }))
            }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "Add"; opcode = 4; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "region";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Event {name = "Notify"; number = 0; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "level";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "ReportLevel" }))
           }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "damage";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DAMAGE" });
            ft_allowed = None }};
        Parsetree.Field {name = "timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "area";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "RECTANGLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "geometry";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "RECTANGLE" });
            ft_allowed = None }}
        ];
      doc = None}
    ]}
Parsetree.Extension {name = "DPMS"; file_name = "dpms"; query_name = "DPMS";
  multiword = false; version = (0, 0);
  declarations =
  [Parsetree.Request {name = "GetVersion"; opcode = 0;
     combine_adjacent = true;
     fields =
     [Parsetree.Field {name = "client_major_version";
        type_ =
        { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
          ft_allowed = None }};
       Parsetree.Field {name = "client_minor_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }}
       ];
     reply =
     (Some { Parsetree.fields =
             [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Parsetree.Field {name = "server_major_version";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Parsetree.Field {name = "server_minor_version";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }}
               ];
             doc = None });
     doc = None};
    Parsetree.Request {name = "Capable"; opcode = 1; combine_adjacent = true;
      fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "capable";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetTimeouts"; opcode = 2;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "standby_timeout";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "suspend_timeout";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "off_timeout";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 18);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetTimeouts"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "standby_timeout";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field {name = "suspend_timeout";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "off_timeout";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "Enable"; opcode = 4; combine_adjacent = true;
      fields = []; reply = None; doc = None};
    Parsetree.Request {name = "Disable"; opcode = 5; combine_adjacent = true;
      fields = []; reply = None; doc = None};
    Parsetree.Enum {name = "DPMSMode";
      items =
      [("On", (Parsetree.Item_value 0L));
        ("Standby", (Parsetree.Item_value 1L));
        ("Suspend", (Parsetree.Item_value 2L));
        ("Off", (Parsetree.Item_value 3L))];
      doc = None};
    Parsetree.Request {name = "ForceLevel"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "power_level";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DPMSMode" }))
           }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "Info"; opcode = 7; combine_adjacent = true;
      fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "power_level";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "DPMSMode" }))
                    }};
                Parsetree.Field {name = "state";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 21);
                  serialize = false}
                ];
              doc = None });
      doc = None}
    ]}
Parsetree.Extension {name = "DRI2"; file_name = "dri2"; query_name = "DRI2";
  multiword = false; version = (1, 4);
  declarations =
  [(Parsetree.Import "xproto");
    Parsetree.Enum {name = "Attachment";
      items =
      [("BufferFrontLeft", (Parsetree.Item_value 0L));
        ("BufferBackLeft", (Parsetree.Item_value 1L));
        ("BufferFrontRight", (Parsetree.Item_value 2L));
        ("BufferBackRight", (Parsetree.Item_value 3L));
        ("BufferDepth", (Parsetree.Item_value 4L));
        ("BufferStencil", (Parsetree.Item_value 5L));
        ("BufferAccum", (Parsetree.Item_value 6L));
        ("BufferFakeFrontLeft", (Parsetree.Item_value 7L));
        ("BufferFakeFrontRight", (Parsetree.Item_value 8L));
        ("BufferDepthStencil", (Parsetree.Item_value 9L));
        ("BufferHiz", (Parsetree.Item_value 10L))];
      doc = None};
    Parsetree.Enum {name = "DriverType";
      items =
      [("DRI", (Parsetree.Item_value 0L));
        ("VDPAU", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Enum {name = "EventType";
      items =
      [("ExchangeComplete", (Parsetree.Item_value 1L));
        ("BlitComplete", (Parsetree.Item_value 2L));
        ("FlipComplete", (Parsetree.Item_value 3L))];
      doc = None};
    Parsetree.Struct {name = "DRI2Buffer";
      fields =
      [Parsetree.Field {name = "attachment";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Attachment" }))
           }};
        Parsetree.Field {name = "name";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pitch";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "cpp";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "AttachFormat";
      fields =
      [Parsetree.Field {name = "attachment";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Attachment" }))
           }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "Connect"; opcode = 1; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "driver_type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "DriverType" }))
            }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "driver_name_length";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "device_name_length";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false};
                Parsetree.Field_list {name = "driver_name";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "driver_name_length"))};
                Parsetree.Field_list {name = "alignment_pad";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Void);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Sub,
                           (Parsetree.Binop (Parsetree.Bit_and,
                              (Parsetree.Binop (Parsetree.Add,
                                 (Parsetree.Field_ref "driver_name_length"),
                                 (Parsetree.Expr_value 3L))),
                              (Parsetree.Unop (Parsetree.Bit_not,
                                 (Parsetree.Expr_value 3L)))
                              )),
                           (Parsetree.Field_ref "driver_name_length"))))};
                Parsetree.Field_list {name = "device_name";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "device_name_length"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "Authenticate"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "magic";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "authenticated";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "CreateDrawable"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DestroyDrawable"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetBuffers"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "count";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "attachments";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = None}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "count";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "buffers";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "DRI2Buffer" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "count"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "CopyRegion"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "region";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "dest";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "src";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetBuffersWithFormat"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "count";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "attachments";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "AttachFormat" });
            ft_allowed = None };
          length = None}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "count";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "buffers";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "DRI2Buffer" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "count"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SwapBuffers"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "target_msc_hi";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "target_msc_lo";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "divisor_hi";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "divisor_lo";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "remainder_hi";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "remainder_lo";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "swap_hi";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "swap_lo";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetMSC"; opcode = 9; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "ust_hi";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "ust_lo";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "msc_hi";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "msc_lo";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "sbc_hi";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "sbc_lo";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "WaitMSC"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "target_msc_hi";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "target_msc_lo";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "divisor_hi";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "divisor_lo";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "remainder_hi";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "remainder_lo";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "ust_hi";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "ust_lo";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "msc_hi";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "msc_lo";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "sbc_hi";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "sbc_lo";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "WaitSBC"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "target_sbc_hi";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "target_sbc_lo";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "ust_hi";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "ust_lo";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "msc_hi";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "msc_lo";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "sbc_hi";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "sbc_lo";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SwapInterval"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "interval";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetParam"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "param";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "is_param_recognized";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Bool);
                   ft_allowed = None }};
                Parsetree.Field {name = "value_hi";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "value_lo";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Event {name = "BufferSwapComplete"; number = 0;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "event_type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "EventType" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "ust_hi";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "ust_lo";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "msc_hi";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "msc_lo";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "sbc";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      doc = None};
    Parsetree.Event {name = "InvalidateBuffers"; number = 1;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }}
        ];
      doc = None}
    ]}
Parsetree.Extension {name = "DRI3"; file_name = "dri3"; query_name = "DRI3";
  multiword = false; version = (1, 2);
  declarations =
  [(Parsetree.Import "xproto");
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "Open"; opcode = 1; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "provider";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "nfd";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                (Parsetree.Field_file_descriptor "device_fd");
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "PixmapFromBuffer"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "pixmap";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PIXMAP" });
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "size";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "stride";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "depth";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "bpp";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        (Parsetree.Field_file_descriptor "pixmap_fd")];
      reply = None; doc = None};
    Parsetree.Request {name = "BufferFromPixmap"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "pixmap";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PIXMAP" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "nfd";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "size";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "stride";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "depth";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "bpp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                (Parsetree.Field_file_descriptor "pixmap_fd");
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "FenceFromFD"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "fence";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "initially_triggered";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        (Parsetree.Field_file_descriptor "fence_fd")];
      reply = None; doc = None};
    Parsetree.Request {name = "FDFromFence"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "fence";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "nfd";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                (Parsetree.Field_file_descriptor "fence_fd");
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetSupportedModifiers"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "depth";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "bpp";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_window_modifiers";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_screen_modifiers";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false};
                Parsetree.Field_list {name = "window_modifiers";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card64);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Field_ref "num_window_modifiers"))};
                Parsetree.Field_list {name = "screen_modifiers";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card64);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Field_ref "num_screen_modifiers"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "PixmapFromBuffers"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "pixmap";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PIXMAP" });
           ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "num_buffers";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "stride0";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "offset0";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "stride1";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "offset1";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "stride2";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "offset2";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "stride3";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "offset3";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "depth";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "bpp";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "modifier";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Parsetree.Field_list {name = "buffers";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Fd);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_buffers"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "BuffersFromPixmap"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "pixmap";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PIXMAP" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "nfd";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "modifier";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card64);
                    ft_allowed = None }};
                Parsetree.Field {name = "depth";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "bpp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 6);
                  serialize = false};
                Parsetree.Field_list {name = "strides";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nfd"))};
                Parsetree.Field_list {name = "offsets";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nfd"))};
                Parsetree.Field_list {name = "buffers";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Fd);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nfd"))}
                ];
              doc = None });
      doc = None}
    ]}
Parsetree.Extension {name = "GenericEvent"; file_name = "ge";
  query_name = "Generic Event Extension"; multiword = false;
  version = (1, 0);
  declarations =
  [Parsetree.Request {name = "QueryVersion"; opcode = 0;
     combine_adjacent = true;
     fields =
     [Parsetree.Field {name = "client_major_version";
        type_ =
        { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
          ft_allowed = None }};
       Parsetree.Field {name = "client_minor_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }}
       ];
     reply =
     (Some { Parsetree.fields =
             [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Parsetree.Field {name = "major_version";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Parsetree.Field {name = "minor_version";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                 serialize = false}
               ];
             doc = None });
     doc = None}
    ]}
Parsetree.Extension {name = "Glx"; file_name = "glx"; query_name = "GLX";
  multiword = false; version = (1, 4);
  declarations =
  [(Parsetree.Import "xproto"); (Parsetree.Xid "PIXMAP");
    (Parsetree.Xid "CONTEXT"); (Parsetree.Xid "PBUFFER");
    (Parsetree.Xid "WINDOW"); (Parsetree.Xid "FBCONFIG");
    Parsetree.Xid_union {name = "DRAWABLE";
      types =
      [{ Parsetree.id_module = (Some "xproto"); id_name = "WINDOW" };
        { Parsetree.id_module = None; id_name = "PBUFFER" };
        { Parsetree.id_module = (Some "glx"); id_name = "PIXMAP" };
        { Parsetree.id_module = (Some "glx"); id_name = "WINDOW" }]};
    Parsetree.Typedef {name = "FLOAT32";
      type_ = (Parsetree.Type_primitive Parsetree.Float)};
    Parsetree.Typedef {name = "FLOAT64";
      type_ = (Parsetree.Type_primitive Parsetree.Double)};
    Parsetree.Typedef {name = "BOOL32";
      type_ = (Parsetree.Type_primitive Parsetree.Card32)};
    Parsetree.Typedef {name = "CONTEXT_TAG";
      type_ = (Parsetree.Type_primitive Parsetree.Card32)};
    Parsetree.Error {name = "Generic"; number = -1;
      fields =
      [Parsetree.Field {name = "bad_value";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "minor_opcode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "major_opcode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 21);
          serialize = false}
        ]};
    Parsetree.Error_copy {name = "BadContext";
      error = { Parsetree.id_module = None; id_name = "Generic" };
      er_number = 0};
    Parsetree.Error_copy {name = "BadContextState";
      error = { Parsetree.id_module = None; id_name = "Generic" };
      er_number = 1};
    Parsetree.Error_copy {name = "BadDrawable";
      error = { Parsetree.id_module = None; id_name = "Generic" };
      er_number = 2};
    Parsetree.Error_copy {name = "BadPixmap";
      error = { Parsetree.id_module = None; id_name = "Generic" };
      er_number = 3};
    Parsetree.Error_copy {name = "BadContextTag";
      error = { Parsetree.id_module = None; id_name = "Generic" };
      er_number = 4};
    Parsetree.Error_copy {name = "BadCurrentWindow";
      error = { Parsetree.id_module = None; id_name = "Generic" };
      er_number = 5};
    Parsetree.Error_copy {name = "BadRenderRequest";
      error = { Parsetree.id_module = None; id_name = "Generic" };
      er_number = 6};
    Parsetree.Error_copy {name = "BadLargeRequest";
      error = { Parsetree.id_module = None; id_name = "Generic" };
      er_number = 7};
    Parsetree.Error_copy {name = "UnsupportedPrivateRequest";
      error = { Parsetree.id_module = None; id_name = "Generic" };
      er_number = 8};
    Parsetree.Error_copy {name = "BadFBConfig";
      error = { Parsetree.id_module = None; id_name = "Generic" };
      er_number = 9};
    Parsetree.Error_copy {name = "BadPbuffer";
      error = { Parsetree.id_module = None; id_name = "Generic" };
      er_number = 10};
    Parsetree.Error_copy {name = "BadCurrentDrawable";
      error = { Parsetree.id_module = None; id_name = "Generic" };
      er_number = 11};
    Parsetree.Error_copy {name = "BadWindow";
      error = { Parsetree.id_module = None; id_name = "Generic" };
      er_number = 12};
    Parsetree.Error_copy {name = "GLXBadProfileARB";
      error = { Parsetree.id_module = None; id_name = "Generic" };
      er_number = 13};
    Parsetree.Event {name = "PbufferClobber"; number = 0; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "event_type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "draw_type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "glx"); id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "b_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "aux_buffer";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "count";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4); serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "BufferSwapComplete"; number = 1;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "event_type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "glx"); id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "ust_hi";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "ust_lo";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "msc_hi";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "msc_lo";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "sbc";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      doc = None};
    Parsetree.Enum {name = "PBCET";
      items =
      [("Damaged", (Parsetree.Item_value 32791L));
        ("Saved", (Parsetree.Item_value 32792L))];
      doc = None};
    Parsetree.Enum {name = "PBCDT";
      items =
      [("Window", (Parsetree.Item_value 32793L));
        ("Pbuffer", (Parsetree.Item_value 32794L))];
      doc = None};
    Parsetree.Request {name = "Render"; opcode = 1; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field_list {name = "data";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "RenderLarge"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "request_num";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "request_total";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "data_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "data";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "data_len"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateContext"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "glx"); id_name = "CONTEXT" });
           ft_allowed = None }};
        Parsetree.Field {name = "visual";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "VISUALID" });
            ft_allowed = None }};
        Parsetree.Field {name = "screen";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "share_list";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "glx"); id_name = "CONTEXT" });
            ft_allowed = None }};
        Parsetree.Field {name = "is_direct";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DestroyContext"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "glx"); id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "MakeCurrent"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "glx"); id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "context";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "glx"); id_name = "CONTEXT" });
            ft_allowed = None }};
        Parsetree.Field {name = "old_context_tag";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context_tag";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "CONTEXT_TAG"
                         });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "IsDirect"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "glx"); id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "is_direct";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryVersion"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "WaitGL"; opcode = 8; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "WaitX"; opcode = 9; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CopyContext"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "src";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "glx"); id_name = "CONTEXT" });
           ft_allowed = None }};
        Parsetree.Field {name = "dest";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "glx"); id_name = "CONTEXT" });
            ft_allowed = None }};
        Parsetree.Field {name = "mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "src_context_tag";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Enum {name = "GC";
      items =
      [("GL_CURRENT_BIT", (Parsetree.Item_bit 0));
        ("GL_POINT_BIT", (Parsetree.Item_bit 1));
        ("GL_LINE_BIT", (Parsetree.Item_bit 2));
        ("GL_POLYGON_BIT", (Parsetree.Item_bit 3));
        ("GL_POLYGON_STIPPLE_BIT", (Parsetree.Item_bit 4));
        ("GL_PIXEL_MODE_BIT", (Parsetree.Item_bit 5));
        ("GL_LIGHTING_BIT", (Parsetree.Item_bit 6));
        ("GL_FOG_BIT", (Parsetree.Item_bit 7));
        ("GL_DEPTH_BUFFER_BIT", (Parsetree.Item_bit 8));
        ("GL_ACCUM_BUFFER_BIT", (Parsetree.Item_bit 9));
        ("GL_STENCIL_BUFFER_BIT", (Parsetree.Item_bit 10));
        ("GL_VIEWPORT_BIT", (Parsetree.Item_bit 11));
        ("GL_TRANSFORM_BIT", (Parsetree.Item_bit 12));
        ("GL_ENABLE_BIT", (Parsetree.Item_bit 13));
        ("GL_COLOR_BUFFER_BIT", (Parsetree.Item_bit 14));
        ("GL_HINT_BIT", (Parsetree.Item_bit 15));
        ("GL_EVAL_BIT", (Parsetree.Item_bit 16));
        ("GL_LIST_BIT", (Parsetree.Item_bit 17));
        ("GL_TEXTURE_BIT", (Parsetree.Item_bit 18));
        ("GL_SCISSOR_BIT", (Parsetree.Item_bit 19));
        ("GL_ALL_ATTRIB_BITS", (Parsetree.Item_value 16777215L))];
      doc = None};
    Parsetree.Request {name = "SwapBuffers"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "glx"); id_name = "DRAWABLE" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "UseXFont"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "font";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FONT" });
            ft_allowed = None }};
        Parsetree.Field {name = "first";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "count";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "list_base";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateGLXPixmap"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "visual";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "VISUALID" });
            ft_allowed = None }};
        Parsetree.Field {name = "pixmap";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "xproto"); id_name = "PIXMAP" });
            ft_allowed = None }};
        Parsetree.Field {name = "glx_pixmap";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "glx"); id_name = "PIXMAP" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetVisualConfigs"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_visuals";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_properties";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false};
                Parsetree.Field_list {name = "property_list";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "length"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "DestroyGLXPixmap"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "glx_pixmap";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "glx"); id_name = "PIXMAP" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "VendorPrivate"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "vendor_code";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "context_tag";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
            ft_allowed = None }};
        Parsetree.Field_list {name = "data";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "VendorPrivateWithReply"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "vendor_code";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "context_tag";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
            ft_allowed = None }};
        Parsetree.Field_list {name = "data";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed = None };
          length = None}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "retval";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_list {name = "data1";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length = (Some (Parsetree.Expr_value 24L))};
                Parsetree.Field_list {name = "data2";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "length"),
                           (Parsetree.Expr_value 4L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryExtensionsString"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryServerString"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "name";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "str_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false};
                Parsetree.Field_list {name = "string";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "str_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ClientInfo"; opcode = 20;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "str_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "string";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "str_len"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetFBConfigs"; opcode = 21;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_FB_configs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_properties";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false};
                Parsetree.Field_list {name = "property_list";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "length"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "CreatePixmap"; opcode = 22;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "fbconfig";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FBCONFIG" });
            ft_allowed = None }};
        Parsetree.Field {name = "pixmap";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "xproto"); id_name = "PIXMAP" });
            ft_allowed = None }};
        Parsetree.Field {name = "glx_pixmap";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "glx"); id_name = "PIXMAP" });
            ft_allowed = None }};
        Parsetree.Field {name = "num_attribs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "attribs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Mul,
                   (Parsetree.Field_ref "num_attribs"),
                   (Parsetree.Expr_value 2L))))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DestroyPixmap"; opcode = 23;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "glx_pixmap";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "glx"); id_name = "PIXMAP" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateNewContext"; opcode = 24;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "glx"); id_name = "CONTEXT" });
           ft_allowed = None }};
        Parsetree.Field {name = "fbconfig";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FBCONFIG" });
            ft_allowed = None }};
        Parsetree.Field {name = "screen";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "render_type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "share_list";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "glx"); id_name = "CONTEXT" });
            ft_allowed = None }};
        Parsetree.Field {name = "is_direct";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "QueryContext"; opcode = 25;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "glx"); id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_attribs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "attribs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "num_attribs"),
                           (Parsetree.Expr_value 2L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "MakeContextCurrent"; opcode = 26;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "old_context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "glx"); id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "read_drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "glx"); id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "context";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "glx"); id_name = "CONTEXT" });
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context_tag";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "CONTEXT_TAG"
                         });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "CreatePbuffer"; opcode = 27;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "fbconfig";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FBCONFIG" });
            ft_allowed = None }};
        Parsetree.Field {name = "pbuffer";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PBUFFER" });
            ft_allowed = None }};
        Parsetree.Field {name = "num_attribs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "attribs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Mul,
                   (Parsetree.Field_ref "num_attribs"),
                   (Parsetree.Expr_value 2L))))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DestroyPbuffer"; opcode = 28;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "pbuffer";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PBUFFER" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetDrawableAttributes"; opcode = 29;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "glx"); id_name = "DRAWABLE" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_attribs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "attribs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "num_attribs"),
                           (Parsetree.Expr_value 2L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ChangeDrawableAttributes"; opcode = 30;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "glx"); id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "num_attribs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "attribs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Mul,
                   (Parsetree.Field_ref "num_attribs"),
                   (Parsetree.Expr_value 2L))))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateWindow"; opcode = 31;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "fbconfig";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FBCONFIG" });
            ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "xproto"); id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "glx_window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "glx"); id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "num_attribs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "attribs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Mul,
                   (Parsetree.Field_ref "num_attribs"),
                   (Parsetree.Expr_value 2L))))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DeleteWindow"; opcode = 32;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "glxwindow";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "glx"); id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SetClientInfoARB"; opcode = 33;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "num_versions";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "gl_str_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "glx_str_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "gl_versions";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Mul,
                   (Parsetree.Field_ref "num_versions"),
                   (Parsetree.Expr_value 2L))))};
        Parsetree.Field_list {name = "gl_extension_string";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "gl_str_len"))};
        Parsetree.Field_list {name = "glx_extension_string";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "glx_str_len"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateContextAttribsARB"; opcode = 34;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "glx"); id_name = "CONTEXT" });
           ft_allowed = None }};
        Parsetree.Field {name = "fbconfig";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FBCONFIG" });
            ft_allowed = None }};
        Parsetree.Field {name = "screen";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "share_list";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "glx"); id_name = "CONTEXT" });
            ft_allowed = None }};
        Parsetree.Field {name = "is_direct";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "num_attribs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "attribs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Mul,
                   (Parsetree.Field_ref "num_attribs"),
                   (Parsetree.Expr_value 2L))))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SetClientInfo2ARB"; opcode = 35;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "num_versions";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "gl_str_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "glx_str_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "gl_versions";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Mul,
                   (Parsetree.Field_ref "num_versions"),
                   (Parsetree.Expr_value 3L))))};
        Parsetree.Field_list {name = "gl_extension_string";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "gl_str_len"))};
        Parsetree.Field_list {name = "glx_extension_string";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "glx_str_len"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "NewList"; opcode = 101;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "list";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "EndList"; opcode = 102;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DeleteLists"; opcode = 103;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "list";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "range";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GenLists"; opcode = 104;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "range";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "ret_val";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "FeedbackBuffer"; opcode = 105;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "size";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SelectBuffer"; opcode = 106;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "size";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "RenderMode"; opcode = 107;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "ret_val";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "new_mode";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "RM";
      items =
      [("GL_RENDER", (Parsetree.Item_value 7168L));
        ("GL_FEEDBACK", (Parsetree.Item_value 7169L));
        ("GL_SELECT", (Parsetree.Item_value 7170L))];
      doc = None};
    Parsetree.Request {name = "Finish"; opcode = 108;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "PixelStoref"; opcode = 109;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "datum";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FLOAT32" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PixelStorei"; opcode = 110;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "datum";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "ReadPixels"; opcode = 111;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "swap_bytes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "lsb_first";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "length"),
                           (Parsetree.Expr_value 4L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetBooleanv"; opcode = 112;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 15);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetClipPlane"; opcode = 113;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "plane";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT64" });
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Div,
                           (Parsetree.Field_ref "length"),
                           (Parsetree.Expr_value 2L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetDoublev"; opcode = 114;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT64" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT64" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetError"; opcode = 115;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "error";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetFloatv"; opcode = 116;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetIntegerv"; opcode = 117;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetLightfv"; opcode = 118;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "light";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetLightiv"; opcode = 119;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "light";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetMapdv"; opcode = 120;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "query";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT64" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT64" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetMapfv"; opcode = 121;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "query";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetMapiv"; opcode = 122;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "query";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetMaterialfv"; opcode = 123;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "face";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetMaterialiv"; opcode = 124;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "face";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetPixelMapfv"; opcode = 125;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "map";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetPixelMapuiv"; opcode = 126;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "map";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetPixelMapusv"; opcode = 127;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "map";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetPolygonStipple"; opcode = 128;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "lsb_first";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "length"),
                           (Parsetree.Expr_value 4L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetString"; opcode = 129;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "name";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false};
                Parsetree.Field_list {name = "string";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetTexEnvfv"; opcode = 130;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetTexEnviv"; opcode = 131;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetTexGendv"; opcode = 132;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "coord";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT64" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT64" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetTexGenfv"; opcode = 133;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "coord";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetTexGeniv"; opcode = 134;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "coord";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetTexImage"; opcode = 135;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "level";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "swap_bytes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field {name = "width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field {name = "height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field {name = "depth";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "length"),
                           (Parsetree.Expr_value 4L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetTexParameterfv"; opcode = 136;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetTexParameteriv"; opcode = 137;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetTexLevelParameterfv"; opcode = 138;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "level";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetTexLevelParameteriv"; opcode = 139;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "level";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "IsEnabled"; opcode = 140;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "capability";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "ret_val";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "BOOL32" });
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "IsList"; opcode = 141;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "list";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "ret_val";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "BOOL32" });
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "Flush"; opcode = 142; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "AreTexturesResident"; opcode = 143;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "n";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "textures";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "n"))}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "ret_val";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "BOOL32" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "length"),
                           (Parsetree.Expr_value 4L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "DeleteTextures"; opcode = 144;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "n";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "textures";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "n"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GenTextures"; opcode = 145;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "n";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "length"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "IsTexture"; opcode = 146;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "texture";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "ret_val";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "BOOL32" });
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetColorTable"; opcode = 147;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "swap_bytes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field {name = "width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "length"),
                           (Parsetree.Expr_value 4L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetColorTableParameterfv"; opcode = 148;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetColorTableParameteriv"; opcode = 149;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetConvolutionFilter"; opcode = 150;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "swap_bytes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field {name = "width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field {name = "height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "length"),
                           (Parsetree.Expr_value 4L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetConvolutionParameterfv"; opcode = 151;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetConvolutionParameteriv"; opcode = 152;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetSeparableFilter"; opcode = 153;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "swap_bytes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field {name = "row_w";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field {name = "col_h";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field_list {name = "rows_and_cols";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "length"),
                           (Parsetree.Expr_value 4L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetHistogram"; opcode = 154;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "swap_bytes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "reset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field {name = "width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "length"),
                           (Parsetree.Expr_value 4L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetHistogramParameterfv"; opcode = 155;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetHistogramParameteriv"; opcode = 156;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetMinmax"; opcode = 157;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "swap_bytes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "reset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "length"),
                           (Parsetree.Expr_value 4L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetMinmaxParameterfv"; opcode = 158;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FLOAT32" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetMinmaxParameteriv"; opcode = 159;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetCompressedTexImageARB"; opcode = 160;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "level";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field {name = "size";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "length"),
                           (Parsetree.Expr_value 4L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "DeleteQueriesARB"; opcode = 161;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "n";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "ids";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "n"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GenQueriesARB"; opcode = 162;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "n";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "length"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "IsQueryARB"; opcode = 163;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "ret_val";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "BOOL32" });
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetQueryivARB"; opcode = 164;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetQueryObjectivARB"; opcode = 165;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetQueryObjectuivARB"; opcode = 166;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_tag";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Parsetree.Field {name = "id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pname";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "n";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "datum";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "n"))}
                ];
              doc = None });
      doc = None}
    ]}
Parsetree.Extension {name = "Present"; file_name = "present";
  query_name = "Present"; multiword = false; version = (1, 2);
  declarations =
  [(Parsetree.Import "xproto"); (Parsetree.Import "randr");
    (Parsetree.Import "xfixes"); (Parsetree.Import "sync");
    Parsetree.Enum {name = "Event";
      items =
      [("ConfigureNotify", (Parsetree.Item_value 0L));
        ("CompleteNotify", (Parsetree.Item_value 1L));
        ("IdleNotify", (Parsetree.Item_value 2L));
        ("RedirectNotify", (Parsetree.Item_value 3L))];
      doc = None};
    Parsetree.Enum {name = "EventMask";
      items =
      [("NoEvent", (Parsetree.Item_value 0L));
        ("ConfigureNotify", (Parsetree.Item_bit 0));
        ("CompleteNotify", (Parsetree.Item_bit 1));
        ("IdleNotify", (Parsetree.Item_bit 2));
        ("RedirectNotify", (Parsetree.Item_bit 3))];
      doc = None};
    Parsetree.Enum {name = "Option";
      items =
      [("None", (Parsetree.Item_value 0L));
        ("Async", (Parsetree.Item_bit 0)); ("Copy", (Parsetree.Item_bit 1));
        ("UST", (Parsetree.Item_bit 2));
        ("Suboptimal", (Parsetree.Item_bit 3))];
      doc = None};
    Parsetree.Enum {name = "Capability";
      items =
      [("None", (Parsetree.Item_value 0L));
        ("Async", (Parsetree.Item_bit 0)); ("Fence", (Parsetree.Item_bit 1));
        ("UST", (Parsetree.Item_bit 2))];
      doc = None};
    Parsetree.Enum {name = "CompleteKind";
      items =
      [("Pixmap", (Parsetree.Item_value 0L));
        ("NotifyMSC", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Enum {name = "CompleteMode";
      items =
      [("Copy", (Parsetree.Item_value 0L));
        ("Flip", (Parsetree.Item_value 1L));
        ("Skip", (Parsetree.Item_value 2L));
        ("SuboptimalCopy", (Parsetree.Item_value 3L))];
      doc = None};
    Parsetree.Struct {name = "Notify";
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "serial";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "Pixmap"; opcode = 1; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "pixmap";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PIXMAP" });
            ft_allowed = None }};
        Parsetree.Field {name = "serial";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "valid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed = None }};
        Parsetree.Field {name = "update";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed = None }};
        Parsetree.Field {name = "x_off";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y_off";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "target_crtc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CRTC" });
            ft_allowed = None }};
        Parsetree.Field {name = "wait_fence";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FENCE" });
            ft_allowed = None }};
        Parsetree.Field {name = "idle_fence";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FENCE" });
            ft_allowed = None }};
        Parsetree.Field {name = "options";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4); serialize = false};
        Parsetree.Field {name = "target_msc";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Parsetree.Field {name = "divisor";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Parsetree.Field {name = "remainder";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Parsetree.Field_list {name = "notifies";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Notify" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "NotifyMSC"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "serial";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4); serialize = false};
        Parsetree.Field {name = "target_msc";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Parsetree.Field {name = "divisor";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Parsetree.Field {name = "remainder";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    (Parsetree.Xid "EVENT");
    Parsetree.Request {name = "SelectInput"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "eid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "EVENT" });
           ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "event_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "EventMask" }))
            }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "QueryCapabilities"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "target";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "capabilities";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Event {name = "Generic"; number = 0; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "extension";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "length";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "evtype";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "event";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "EVENT" });
            ft_allowed = None }}
        ];
      doc = None};
    Parsetree.Event {name = "ConfigureNotify"; number = 0; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "event";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "EVENT" });
            ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "off_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "off_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "pixmap_width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "pixmap_height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "pixmap_flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      doc = None};
    Parsetree.Event {name = "CompleteNotify"; number = 1; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "kind";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "CompleteKind" }))
           }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "CompleteMode" }))
            }};
        Parsetree.Field {name = "event";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "EVENT" });
            ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "serial";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "ust";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Parsetree.Field {name = "msc";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }}
        ];
      doc = None};
    Parsetree.Event {name = "IdleNotify"; number = 2; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "event";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "EVENT" });
            ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "serial";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pixmap";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PIXMAP" });
            ft_allowed = None }};
        Parsetree.Field {name = "idle_fence";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FENCE" });
            ft_allowed = None }}
        ];
      doc = None};
    Parsetree.Event {name = "RedirectNotify"; number = 3; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "update_window";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "event";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "EVENT" });
            ft_allowed = None }};
        Parsetree.Field {name = "event_window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "pixmap";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PIXMAP" });
            ft_allowed = None }};
        Parsetree.Field {name = "serial";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "valid_region";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed = None }};
        Parsetree.Field {name = "update_region";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed = None }};
        Parsetree.Field {name = "valid_rect";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "RECTANGLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "update_rect";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "RECTANGLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "x_off";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y_off";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "target_crtc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CRTC" });
            ft_allowed = None }};
        Parsetree.Field {name = "wait_fence";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FENCE" });
            ft_allowed = None }};
        Parsetree.Field {name = "idle_fence";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FENCE" });
            ft_allowed = None }};
        Parsetree.Field {name = "options";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4); serialize = false};
        Parsetree.Field {name = "target_msc";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Parsetree.Field {name = "divisor";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Parsetree.Field {name = "remainder";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Parsetree.Field_list {name = "notifies";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Notify" });
            ft_allowed = None };
          length = None}
        ];
      doc = None}
    ]}
Parsetree.Extension {name = "RandR"; file_name = "randr";
  query_name = "RANDR"; multiword = false; version = (1, 6);
  declarations =
  [(Parsetree.Import "xproto"); (Parsetree.Import "render");
    (Parsetree.Xid "MODE"); (Parsetree.Xid "CRTC"); (Parsetree.Xid "OUTPUT");
    (Parsetree.Xid "PROVIDER"); (Parsetree.Xid "LEASE");
    Parsetree.Error {name = "BadOutput"; number = 0; fields = []};
    Parsetree.Error {name = "BadCrtc"; number = 1; fields = []};
    Parsetree.Error {name = "BadMode"; number = 2; fields = []};
    Parsetree.Error {name = "BadProvider"; number = 3; fields = []};
    Parsetree.Enum {name = "Rotation";
      items =
      [("Rotate_0", (Parsetree.Item_bit 0));
        ("Rotate_90", (Parsetree.Item_bit 1));
        ("Rotate_180", (Parsetree.Item_bit 2));
        ("Rotate_270", (Parsetree.Item_bit 3));
        ("Reflect_X", (Parsetree.Item_bit 4));
        ("Reflect_Y", (Parsetree.Item_bit 5))];
      doc = None};
    Parsetree.Struct {name = "ScreenSize";
      fields =
      [Parsetree.Field {name = "width";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "mwidth";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "mheight";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "RefreshRates";
      fields =
      [Parsetree.Field {name = "nRates";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field_list {name = "rates";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nRates"))}
        ]};
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "SetConfig";
      items =
      [("Success", (Parsetree.Item_value 0L));
        ("InvalidConfigTime", (Parsetree.Item_value 1L));
        ("InvalidTime", (Parsetree.Item_value 2L));
        ("Failed", (Parsetree.Item_value 3L))];
      doc = None};
    Parsetree.Request {name = "SetScreenConfig"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "config_timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "sizeID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "rotation";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "Rotation" }))
            }};
        Parsetree.Field {name = "rate";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "status";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed =
                   (Some (Parsetree.Allowed_enum
                            { Parsetree.id_module = None;
                              id_name = "SetConfig" }))
                   }};
                Parsetree.Field {name = "new_timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field {name = "config_timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field {name = "root";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "WINDOW" });
                    ft_allowed = None }};
                Parsetree.Field {name = "subpixel_order";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "SubPixel" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 10);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "NotifyMask";
      items =
      [("ScreenChange", (Parsetree.Item_bit 0));
        ("CrtcChange", (Parsetree.Item_bit 1));
        ("OutputChange", (Parsetree.Item_bit 2));
        ("OutputProperty", (Parsetree.Item_bit 3));
        ("ProviderChange", (Parsetree.Item_bit 4));
        ("ProviderProperty", (Parsetree.Item_bit 5));
        ("ResourceChange", (Parsetree.Item_bit 6));
        ("Lease", (Parsetree.Item_bit 7))];
      doc = None};
    Parsetree.Request {name = "SelectInput"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "enable";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "NotifyMask" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetScreenInfo"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "rotations";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed =
                   (Some (Parsetree.Allowed_mask
                            { Parsetree.id_module = None;
                              id_name = "Rotation" }))
                   }};
                Parsetree.Field {name = "root";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "WINDOW" });
                    ft_allowed = None }};
                Parsetree.Field {name = "timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field {name = "config_timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field {name = "nSizes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "sizeID";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "rotation";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "Rotation" }))
                    }};
                Parsetree.Field {name = "rate";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "nInfo";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                  serialize = false};
                Parsetree.Field_list {name = "sizes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ScreenSize" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nSizes"))};
                Parsetree.Field_list {name = "rates";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "RefreshRates"
                         });
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Sub,
                           (Parsetree.Field_ref "nInfo"),
                           (Parsetree.Field_ref "nSizes"))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetScreenSizeRange"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "min_width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "min_height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "max_width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "max_height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetScreenSize"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "mm_width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "mm_height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Enum {name = "ModeFlag";
      items =
      [("HsyncPositive", (Parsetree.Item_bit 0));
        ("HsyncNegative", (Parsetree.Item_bit 1));
        ("VsyncPositive", (Parsetree.Item_bit 2));
        ("VsyncNegative", (Parsetree.Item_bit 3));
        ("Interlace", (Parsetree.Item_bit 4));
        ("DoubleScan", (Parsetree.Item_bit 5));
        ("Csync", (Parsetree.Item_bit 6));
        ("CsyncPositive", (Parsetree.Item_bit 7));
        ("CsyncNegative", (Parsetree.Item_bit 8));
        ("HskewPresent", (Parsetree.Item_bit 9));
        ("Bcast", (Parsetree.Item_bit 10));
        ("PixelMultiplex", (Parsetree.Item_bit 11));
        ("DoubleClock", (Parsetree.Item_bit 12));
        ("HalveClock", (Parsetree.Item_bit 13))];
      doc = None};
    Parsetree.Struct {name = "ModeInfo";
      fields =
      [Parsetree.Field {name = "id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "dot_clock";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "hsync_start";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hsync_end";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "htotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hskew";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vsync_start";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vsync_end";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vtotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "name_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "mode_flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModeFlag" }))
            }}
        ]};
    Parsetree.Request {name = "GetScreenResources"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field {name = "config_timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field {name = "num_crtcs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_outputs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_modes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "names_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field_list {name = "crtcs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "CRTC" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_crtcs"))};
                Parsetree.Field_list {name = "outputs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "OUTPUT" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_outputs"))};
                Parsetree.Field_list {name = "modes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ModeInfo" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_modes"))};
                Parsetree.Field_list {name = "names";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "names_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "Connection";
      items =
      [("Connected", (Parsetree.Item_value 0L));
        ("Disconnected", (Parsetree.Item_value 1L));
        ("Unknown", (Parsetree.Item_value 2L))];
      doc = None};
    Parsetree.Request {name = "GetOutputInfo"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "output";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "OUTPUT" });
           ft_allowed = None }};
        Parsetree.Field {name = "config_timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "status";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed =
                   (Some (Parsetree.Allowed_enum
                            { Parsetree.id_module = None;
                              id_name = "SetConfig" }))
                   }};
                Parsetree.Field {name = "timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field {name = "crtc";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "CRTC" });
                    ft_allowed = None }};
                Parsetree.Field {name = "mm_width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "mm_height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "connection";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "Connection" }))
                    }};
                Parsetree.Field {name = "subpixel_order";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "SubPixel" }))
                    }};
                Parsetree.Field {name = "num_crtcs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_modes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_preferred";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_clones";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "name_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_list {name = "crtcs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "CRTC" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_crtcs"))};
                Parsetree.Field_list {name = "modes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "MODE" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_modes"))};
                Parsetree.Field_list {name = "clones";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "OUTPUT" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_clones"))};
                Parsetree.Field_list {name = "name";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "name_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ListOutputProperties"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "output";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "OUTPUT" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_atoms";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false};
                Parsetree.Field_list {name = "atoms";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ATOM" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_atoms"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryOutputProperty"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "output";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "OUTPUT" });
           ft_allowed = None }};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "pending";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field {name = "range";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field {name = "immutable";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 21);
                  serialize = false};
                Parsetree.Field_list {name = "validValues";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "length"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ConfigureOutputProperty"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "output";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "OUTPUT" });
           ft_allowed = None }};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "pending";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "range";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "values";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "ChangeOutputProperty"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "output";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "OUTPUT" });
           ft_allowed = None }};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "PropMode" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "num_units";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "data";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Void);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Div,
                   (Parsetree.Binop (Parsetree.Mul,
                      (Parsetree.Field_ref "num_units"),
                      (Parsetree.Field_ref "format"))),
                   (Parsetree.Expr_value 8L))))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DeleteOutputProperty"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "output";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "OUTPUT" });
           ft_allowed = None }};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetOutputProperty"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "output";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "OUTPUT" });
           ft_allowed = None }};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None;
                       id_name = "GetPropertyType" }))
            }};
        Parsetree.Field {name = "long_offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "long_length";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "delete";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "pending";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "format";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "type";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ATOM" });
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None; id_name = "Atom" }))
                    }};
                Parsetree.Field {name = "bytes_after";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_items";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "num_items"),
                           (Parsetree.Binop (Parsetree.Div,
                              (Parsetree.Field_ref "format"),
                              (Parsetree.Expr_value 8L)))
                           )))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "CreateMode"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "mode_info";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ModeInfo" });
            ft_allowed = None }};
        Parsetree.Field_list {name = "name";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = None}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "mode";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "MODE" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "DestroyMode"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "mode";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "MODE" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "AddOutputMode"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "output";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "OUTPUT" });
           ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "MODE" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DeleteOutputMode"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "output";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "OUTPUT" });
           ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "MODE" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetCrtcInfo"; opcode = 20;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "crtc";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CRTC" });
           ft_allowed = None }};
        Parsetree.Field {name = "config_timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "status";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed =
                   (Some (Parsetree.Allowed_enum
                            { Parsetree.id_module = None;
                              id_name = "SetConfig" }))
                   }};
                Parsetree.Field {name = "timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field {name = "x";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "y";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "mode";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "MODE" });
                    ft_allowed = None }};
                Parsetree.Field {name = "rotation";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "Rotation" }))
                    }};
                Parsetree.Field {name = "rotations";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "Rotation" }))
                    }};
                Parsetree.Field {name = "num_outputs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_possible_outputs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_list {name = "outputs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "OUTPUT" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_outputs"))};
                Parsetree.Field_list {name = "possible";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "OUTPUT" });
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Field_ref "num_possible_outputs"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetCrtcConfig"; opcode = 21;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "crtc";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CRTC" });
           ft_allowed = None }};
        Parsetree.Field {name = "timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "config_timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "MODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "rotation";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "Rotation" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "outputs";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "OUTPUT" });
            ft_allowed = None };
          length = None}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "status";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed =
                   (Some (Parsetree.Allowed_enum
                            { Parsetree.id_module = None;
                              id_name = "SetConfig" }))
                   }};
                Parsetree.Field {name = "timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetCrtcGammaSize"; opcode = 22;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "crtc";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CRTC" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "size";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetCrtcGamma"; opcode = 23;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "crtc";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CRTC" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "size";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false};
                Parsetree.Field_list {name = "red";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "size"))};
                Parsetree.Field_list {name = "green";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "size"))};
                Parsetree.Field_list {name = "blue";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "size"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetCrtcGamma"; opcode = 24;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "crtc";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CRTC" });
           ft_allowed = None }};
        Parsetree.Field {name = "size";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "red";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "size"))};
        Parsetree.Field_list {name = "green";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "size"))};
        Parsetree.Field_list {name = "blue";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "size"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetScreenResourcesCurrent"; opcode = 25;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field {name = "config_timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field {name = "num_crtcs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_outputs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_modes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "names_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field_list {name = "crtcs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "CRTC" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_crtcs"))};
                Parsetree.Field_list {name = "outputs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "OUTPUT" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_outputs"))};
                Parsetree.Field_list {name = "modes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ModeInfo" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_modes"))};
                Parsetree.Field_list {name = "names";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "names_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "Transform";
      items =
      [("Unit", (Parsetree.Item_bit 0)); ("ScaleUp", (Parsetree.Item_bit 1));
        ("ScaleDown", (Parsetree.Item_bit 2));
        ("Projective", (Parsetree.Item_bit 3))];
      doc = None};
    Parsetree.Request {name = "SetCrtcTransform"; opcode = 26;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "crtc";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CRTC" });
           ft_allowed = None }};
        Parsetree.Field {name = "transform";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TRANSFORM" });
            ft_allowed = None }};
        Parsetree.Field {name = "filter_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "filter_name";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "filter_len"))};
        Parsetree.Field_pad {pad = (Parsetree.Pad_align 4); serialize = false};
        Parsetree.Field_list {name = "filter_params";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetCrtcTransform"; opcode = 27;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "crtc";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CRTC" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "pending_transform";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TRANSFORM" });
                    ft_allowed = None }};
                Parsetree.Field {name = "has_transforms";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
                  serialize = false};
                Parsetree.Field {name = "current_transform";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TRANSFORM" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field {name = "pending_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "pending_nparams";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "current_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "current_nparams";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_list {name = "pending_filter_name";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "pending_len"))};
                Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                  serialize = false};
                Parsetree.Field_list {name = "pending_params";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FIXED" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "pending_nparams"))};
                Parsetree.Field_list {name = "current_filter_name";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "current_len"))};
                Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                  serialize = false};
                Parsetree.Field_list {name = "current_params";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FIXED" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "current_nparams"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetPanning"; opcode = 28;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "crtc";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CRTC" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "status";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed =
                   (Some (Parsetree.Allowed_enum
                            { Parsetree.id_module = None;
                              id_name = "SetConfig" }))
                   }};
                Parsetree.Field {name = "timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field {name = "left";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "top";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "track_left";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "track_top";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "track_width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "track_height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "border_left";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "border_top";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "border_right";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "border_bottom";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetPanning"; opcode = 29;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "crtc";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CRTC" });
           ft_allowed = None }};
        Parsetree.Field {name = "timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "left";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "top";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "track_left";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "track_top";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "track_width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "track_height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "border_left";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "border_top";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "border_right";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "border_bottom";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "status";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed =
                   (Some (Parsetree.Allowed_enum
                            { Parsetree.id_module = None;
                              id_name = "SetConfig" }))
                   }};
                Parsetree.Field {name = "timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetOutputPrimary"; opcode = 30;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "output";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "OUTPUT" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetOutputPrimary"; opcode = 31;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "output";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "OUTPUT" });
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetProviders"; opcode = 32;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field {name = "num_providers";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 18);
                  serialize = false};
                Parsetree.Field_list {name = "providers";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "PROVIDER" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_providers"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "ProviderCapability";
      items =
      [("SourceOutput", (Parsetree.Item_bit 0));
        ("SinkOutput", (Parsetree.Item_bit 1));
        ("SourceOffload", (Parsetree.Item_bit 2));
        ("SinkOffload", (Parsetree.Item_bit 3))];
      doc = None};
    Parsetree.Request {name = "GetProviderInfo"; opcode = 33;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "provider";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PROVIDER" });
           ft_allowed = None }};
        Parsetree.Field {name = "config_timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "status";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field {name = "capabilities";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ProviderCapability" }))
                    }};
                Parsetree.Field {name = "num_crtcs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_outputs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_associated_providers";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "name_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field_list {name = "crtcs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "CRTC" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_crtcs"))};
                Parsetree.Field_list {name = "outputs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "OUTPUT" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_outputs"))};
                Parsetree.Field_list {name = "associated_providers";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "PROVIDER" });
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Field_ref "num_associated_providers"))};
                Parsetree.Field_list {name = "associated_capability";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Field_ref "num_associated_providers"))};
                Parsetree.Field_list {name = "name";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "name_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetProviderOffloadSink"; opcode = 34;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "provider";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PROVIDER" });
           ft_allowed = None }};
        Parsetree.Field {name = "sink_provider";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PROVIDER" });
            ft_allowed = None }};
        Parsetree.Field {name = "config_timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SetProviderOutputSource"; opcode = 35;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "provider";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PROVIDER" });
           ft_allowed = None }};
        Parsetree.Field {name = "source_provider";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PROVIDER" });
            ft_allowed = None }};
        Parsetree.Field {name = "config_timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "ListProviderProperties"; opcode = 36;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "provider";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PROVIDER" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_atoms";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false};
                Parsetree.Field_list {name = "atoms";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ATOM" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_atoms"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryProviderProperty"; opcode = 37;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "provider";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PROVIDER" });
           ft_allowed = None }};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "pending";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field {name = "range";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field {name = "immutable";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 21);
                  serialize = false};
                Parsetree.Field_list {name = "valid_values";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "length"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ConfigureProviderProperty"; opcode = 38;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "provider";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PROVIDER" });
           ft_allowed = None }};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "pending";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "range";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "values";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "ChangeProviderProperty"; opcode = 39;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "provider";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PROVIDER" });
           ft_allowed = None }};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "num_items";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "data";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Void);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Mul,
                   (Parsetree.Field_ref "num_items"),
                   (Parsetree.Binop (Parsetree.Div,
                      (Parsetree.Field_ref "format"),
                      (Parsetree.Expr_value 8L)))
                   )))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DeleteProviderProperty"; opcode = 40;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "provider";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PROVIDER" });
           ft_allowed = None }};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetProviderProperty"; opcode = 41;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "provider";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PROVIDER" });
           ft_allowed = None }};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "long_offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "long_length";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "delete";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "pending";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "format";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "type";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ATOM" });
                    ft_allowed = None }};
                Parsetree.Field {name = "bytes_after";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_items";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Void);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "num_items"),
                           (Parsetree.Binop (Parsetree.Div,
                              (Parsetree.Field_ref "format"),
                              (Parsetree.Expr_value 8L)))
                           )))}
                ];
              doc = None });
      doc = None};
    Parsetree.Event {name = "ScreenChangeNotify"; number = 0;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "rotation";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_mask
                    { Parsetree.id_module = None; id_name = "Rotation" }))
           }};
        Parsetree.Field {name = "timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "config_timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "root";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "request_window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "sizeID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "subpixel_order";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SubPixel" }))
            }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "mwidth";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "mheight";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      doc = None};
    Parsetree.Enum {name = "Notify";
      items =
      [("CrtcChange", (Parsetree.Item_value 0L));
        ("OutputChange", (Parsetree.Item_value 1L));
        ("OutputProperty", (Parsetree.Item_value 2L));
        ("ProviderChange", (Parsetree.Item_value 3L));
        ("ProviderProperty", (Parsetree.Item_value 4L));
        ("ResourceChange", (Parsetree.Item_value 5L));
        ("Lease", (Parsetree.Item_value 6L))];
      doc = None};
    Parsetree.Struct {name = "CrtcChange";
      fields =
      [Parsetree.Field {name = "timestamp";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "TIMESTAMP" });
           ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "crtc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CRTC" });
            ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "MODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "rotation";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "Rotation" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "OutputChange";
      fields =
      [Parsetree.Field {name = "timestamp";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "TIMESTAMP" });
           ft_allowed = None }};
        Parsetree.Field {name = "config_timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "output";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "OUTPUT" });
            ft_allowed = None }};
        Parsetree.Field {name = "crtc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CRTC" });
            ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "MODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "rotation";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "Rotation" }))
            }};
        Parsetree.Field {name = "connection";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Connection" }))
            }};
        Parsetree.Field {name = "subpixel_order";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SubPixel" }))
            }}
        ]};
    Parsetree.Struct {name = "OutputProperty";
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "output";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "OUTPUT" });
            ft_allowed = None }};
        Parsetree.Field {name = "atom";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "status";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Property" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 11);
          serialize = false}
        ]};
    Parsetree.Struct {name = "ProviderChange";
      fields =
      [Parsetree.Field {name = "timestamp";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "TIMESTAMP" });
           ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "provider";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PROVIDER" });
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
          serialize = false}
        ]};
    Parsetree.Struct {name = "ProviderProperty";
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "provider";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PROVIDER" });
            ft_allowed = None }};
        Parsetree.Field {name = "atom";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "state";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 11);
          serialize = false}
        ]};
    Parsetree.Struct {name = "ResourceChange";
      fields =
      [Parsetree.Field {name = "timestamp";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "TIMESTAMP" });
           ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
          serialize = false}
        ]};
    Parsetree.Struct {name = "MonitorInfo";
      fields =
      [Parsetree.Field {name = "name";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ATOM" });
           ft_allowed = None }};
        Parsetree.Field {name = "primary";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "automatic";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "nOutput";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "width_in_millimeters";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "height_in_millimeters";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "outputs";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "OUTPUT" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nOutput"))}
        ]};
    Parsetree.Request {name = "GetMonitors"; opcode = 42;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "get_active";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "timestamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field {name = "nMonitors";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "nOutputs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "monitors";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "MonitorInfo"
                         });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nMonitors"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetMonitor"; opcode = 43;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "monitorinfo";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "MonitorInfo" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DeleteMonitor"; opcode = 44;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "name";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateLease"; opcode = 45;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "lid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "LEASE" });
            ft_allowed = None }};
        Parsetree.Field {name = "num_crtcs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "num_outputs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "crtcs";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CRTC" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_crtcs"))};
        Parsetree.Field_list {name = "outputs";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "OUTPUT" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_outputs"))}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "nfd";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                (Parsetree.Field_file_descriptor "master_fd");
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "FreeLease"; opcode = 46;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "lid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "LEASE" });
           ft_allowed = None }};
        Parsetree.Field {name = "terminate";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Struct {name = "LeaseNotify";
      fields =
      [Parsetree.Field {name = "timestamp";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "TIMESTAMP" });
           ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "lease";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "LEASE" });
            ft_allowed = None }};
        Parsetree.Field {name = "created";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 15);
          serialize = false}
        ]};
    Parsetree.Union {name = "NotifyData";
      members =
      [Parsetree.Field {name = "cc";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CrtcChange" });
           ft_allowed = None }};
        Parsetree.Field {name = "oc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "OutputChange" });
            ft_allowed = None }};
        Parsetree.Field {name = "op";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "OutputProperty" });
            ft_allowed = None }};
        Parsetree.Field {name = "pc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ProviderChange" });
            ft_allowed = None }};
        Parsetree.Field {name = "pp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ProviderProperty" });
            ft_allowed = None }};
        Parsetree.Field {name = "rc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ResourceChange" });
            ft_allowed = None }};
        Parsetree.Field {name = "lc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "LeaseNotify" });
            ft_allowed = None }}
        ]};
    Parsetree.Event {name = "Notify"; number = 1; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "subCode";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Notify" }))
           }};
        Parsetree.Field {name = "u";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "NotifyData" });
            ft_allowed = None }}
        ];
      doc = None}
    ]}
Parsetree.Extension {name = "Record"; file_name = "record";
  query_name = "RECORD"; multiword = false; version = (1, 13);
  declarations =
  [(Parsetree.Xid "CONTEXT");
    Parsetree.Struct {name = "Range8";
      fields =
      [Parsetree.Field {name = "first";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "last";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "Range16";
      fields =
      [Parsetree.Field {name = "first";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field {name = "last";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "ExtRange";
      fields =
      [Parsetree.Field {name = "major";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "Range8" });
           ft_allowed = None }};
        Parsetree.Field {name = "minor";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Range16" });
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "Range";
      fields =
      [Parsetree.Field {name = "core_requests";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "Range8" });
           ft_allowed = None }};
        Parsetree.Field {name = "core_replies";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Range8" });
            ft_allowed = None }};
        Parsetree.Field {name = "ext_requests";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ExtRange" });
            ft_allowed = None }};
        Parsetree.Field {name = "ext_replies";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ExtRange" });
            ft_allowed = None }};
        Parsetree.Field {name = "delivered_events";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Range8" });
            ft_allowed = None }};
        Parsetree.Field {name = "device_events";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Range8" });
            ft_allowed = None }};
        Parsetree.Field {name = "errors";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Range8" });
            ft_allowed = None }};
        Parsetree.Field {name = "client_started";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "client_died";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }}
        ]};
    Parsetree.Typedef {name = "ElementHeader";
      type_ = (Parsetree.Type_primitive Parsetree.Card8)};
    Parsetree.Enum {name = "HType";
      items =
      [("FromServerTime", (Parsetree.Item_bit 0));
        ("FromClientTime", (Parsetree.Item_bit 1));
        ("FromClientSequence", (Parsetree.Item_bit 2))];
      doc = None};
    Parsetree.Typedef {name = "ClientSpec";
      type_ = (Parsetree.Type_primitive Parsetree.Card32)};
    Parsetree.Enum {name = "CS";
      items =
      [("CurrentClients", (Parsetree.Item_value 1L));
        ("FutureClients", (Parsetree.Item_value 2L));
        ("AllClients", (Parsetree.Item_value 3L))];
      doc = None};
    Parsetree.Struct {name = "ClientInfo";
      fields =
      [Parsetree.Field {name = "client_resource";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ClientSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "num_ranges";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "ranges";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Range" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_ranges"))}
        ]};
    Parsetree.Error {name = "BadContext"; number = 0;
      fields =
      [Parsetree.Field {name = "invalid_record";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ]};
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field {name = "minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "CreateContext"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "record"); id_name = "CONTEXT" });
           ft_allowed = None }};
        Parsetree.Field {name = "element_header";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ElementHeader" });
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "num_client_specs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "num_ranges";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "client_specs";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ClientSpec" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_client_specs"))};
        Parsetree.Field_list {name = "ranges";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Range" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_ranges"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "RegisterClients"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "record"); id_name = "CONTEXT" });
           ft_allowed = None }};
        Parsetree.Field {name = "element_header";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ElementHeader" });
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "num_client_specs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "num_ranges";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "client_specs";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ClientSpec" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_client_specs"))};
        Parsetree.Field_list {name = "ranges";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Range" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_ranges"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "UnregisterClients"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "record"); id_name = "CONTEXT" });
           ft_allowed = None }};
        Parsetree.Field {name = "num_client_specs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "client_specs";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ClientSpec" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_client_specs"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetContext"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "record"); id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "enabled";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Bool);
                   ft_allowed = None }};
                Parsetree.Field {name = "element_header";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None;
                         id_name = "ElementHeader" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
                  serialize = false};
                Parsetree.Field {name = "num_intercepted_clients";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false};
                Parsetree.Field_list {name = "intercepted_clients";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ClientInfo" });
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Field_ref "num_intercepted_clients"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "EnableContext"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "record"); id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "category";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "element_header";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None;
                         id_name = "ElementHeader" });
                    ft_allowed = None }};
                Parsetree.Field {name = "client_swapped";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                  serialize = false};
                Parsetree.Field {name = "xid_base";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "server_time";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "rec_sequence_num";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "length"),
                           (Parsetree.Expr_value 4L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "DisableContext"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "record"); id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "FreeContext"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = (Some "record"); id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply = None; doc = None}
    ]}
Parsetree.Extension {name = "Render"; file_name = "render";
  query_name = "RENDER"; multiword = false; version = (0, 11);
  declarations =
  [(Parsetree.Import "xproto");
    Parsetree.Enum {name = "PictType";
      items =
      [("Indexed", (Parsetree.Item_value 0L));
        ("Direct", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Enum {name = "Picture";
      items = [("None", (Parsetree.Item_value 0L))]; doc = None};
    Parsetree.Enum {name = "PictOp";
      items =
      [("Clear", (Parsetree.Item_value 0L));
        ("Src", (Parsetree.Item_value 1L));
        ("Dst", (Parsetree.Item_value 2L));
        ("Over", (Parsetree.Item_value 3L));
        ("OverReverse", (Parsetree.Item_value 4L));
        ("In", (Parsetree.Item_value 5L));
        ("InReverse", (Parsetree.Item_value 6L));
        ("Out", (Parsetree.Item_value 7L));
        ("OutReverse", (Parsetree.Item_value 8L));
        ("Atop", (Parsetree.Item_value 9L));
        ("AtopReverse", (Parsetree.Item_value 10L));
        ("Xor", (Parsetree.Item_value 11L));
        ("Add", (Parsetree.Item_value 12L));
        ("Saturate", (Parsetree.Item_value 13L));
        ("DisjointClear", (Parsetree.Item_value 16L));
        ("DisjointSrc", (Parsetree.Item_value 17L));
        ("DisjointDst", (Parsetree.Item_value 18L));
        ("DisjointOver", (Parsetree.Item_value 19L));
        ("DisjointOverReverse", (Parsetree.Item_value 20L));
        ("DisjointIn", (Parsetree.Item_value 21L));
        ("DisjointInReverse", (Parsetree.Item_value 22L));
        ("DisjointOut", (Parsetree.Item_value 23L));
        ("DisjointOutReverse", (Parsetree.Item_value 24L));
        ("DisjointAtop", (Parsetree.Item_value 25L));
        ("DisjointAtopReverse", (Parsetree.Item_value 26L));
        ("DisjointXor", (Parsetree.Item_value 27L));
        ("ConjointClear", (Parsetree.Item_value 32L));
        ("ConjointSrc", (Parsetree.Item_value 33L));
        ("ConjointDst", (Parsetree.Item_value 34L));
        ("ConjointOver", (Parsetree.Item_value 35L));
        ("ConjointOverReverse", (Parsetree.Item_value 36L));
        ("ConjointIn", (Parsetree.Item_value 37L));
        ("ConjointInReverse", (Parsetree.Item_value 38L));
        ("ConjointOut", (Parsetree.Item_value 39L));
        ("ConjointOutReverse", (Parsetree.Item_value 40L));
        ("ConjointAtop", (Parsetree.Item_value 41L));
        ("ConjointAtopReverse", (Parsetree.Item_value 42L));
        ("ConjointXor", (Parsetree.Item_value 43L));
        ("Multiply", (Parsetree.Item_value 48L));
        ("Screen", (Parsetree.Item_value 49L));
        ("Overlay", (Parsetree.Item_value 50L));
        ("Darken", (Parsetree.Item_value 51L));
        ("Lighten", (Parsetree.Item_value 52L));
        ("ColorDodge", (Parsetree.Item_value 53L));
        ("ColorBurn", (Parsetree.Item_value 54L));
        ("HardLight", (Parsetree.Item_value 55L));
        ("SoftLight", (Parsetree.Item_value 56L));
        ("Difference", (Parsetree.Item_value 57L));
        ("Exclusion", (Parsetree.Item_value 58L));
        ("HSLHue", (Parsetree.Item_value 59L));
        ("HSLSaturation", (Parsetree.Item_value 60L));
        ("HSLColor", (Parsetree.Item_value 61L));
        ("HSLLuminosity", (Parsetree.Item_value 62L))];
      doc = None};
    Parsetree.Enum {name = "PolyEdge";
      items =
      [("Sharp", (Parsetree.Item_value 0L));
        ("Smooth", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Enum {name = "PolyMode";
      items =
      [("Precise", (Parsetree.Item_value 0L));
        ("Imprecise", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Enum {name = "CP";
      items =
      [("Repeat", (Parsetree.Item_bit 0));
        ("AlphaMap", (Parsetree.Item_bit 1));
        ("AlphaXOrigin", (Parsetree.Item_bit 2));
        ("AlphaYOrigin", (Parsetree.Item_bit 3));
        ("ClipXOrigin", (Parsetree.Item_bit 4));
        ("ClipYOrigin", (Parsetree.Item_bit 5));
        ("ClipMask", (Parsetree.Item_bit 6));
        ("GraphicsExposure", (Parsetree.Item_bit 7));
        ("SubwindowMode", (Parsetree.Item_bit 8));
        ("PolyEdge", (Parsetree.Item_bit 9));
        ("PolyMode", (Parsetree.Item_bit 10));
        ("Dither", (Parsetree.Item_bit 11));
        ("ComponentAlpha", (Parsetree.Item_bit 12))];
      doc = None};
    Parsetree.Enum {name = "SubPixel";
      items =
      [("Unknown", (Parsetree.Item_value 0L));
        ("HorizontalRGB", (Parsetree.Item_value 1L));
        ("HorizontalBGR", (Parsetree.Item_value 2L));
        ("VerticalRGB", (Parsetree.Item_value 3L));
        ("VerticalBGR", (Parsetree.Item_value 4L));
        ("None", (Parsetree.Item_value 5L))];
      doc = None};
    Parsetree.Enum {name = "Repeat";
      items =
      [("None", (Parsetree.Item_value 0L));
        ("Normal", (Parsetree.Item_value 1L));
        ("Pad", (Parsetree.Item_value 2L));
        ("Reflect", (Parsetree.Item_value 3L))];
      doc = None};
    Parsetree.Typedef {name = "GLYPH";
      type_ = (Parsetree.Type_primitive Parsetree.Card32)};
    (Parsetree.Xid "GLYPHSET"); (Parsetree.Xid "PICTURE");
    (Parsetree.Xid "PICTFORMAT");
    Parsetree.Typedef {name = "FIXED";
      type_ = (Parsetree.Type_primitive Parsetree.Int32)};
    Parsetree.Error {name = "PictFormat"; number = 0; fields = []};
    Parsetree.Error {name = "Picture"; number = 1; fields = []};
    Parsetree.Error {name = "PictOp"; number = 2; fields = []};
    Parsetree.Error {name = "GlyphSet"; number = 3; fields = []};
    Parsetree.Error {name = "Glyph"; number = 4; fields = []};
    Parsetree.Struct {name = "DIRECTFORMAT";
      fields =
      [Parsetree.Field {name = "red_shift";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field {name = "red_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "green_shift";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "green_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "blue_shift";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "blue_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "alpha_shift";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "alpha_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "PICTFORMINFO";
      fields =
      [Parsetree.Field {name = "id";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PICTFORMAT" });
           ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "PictType" }))
            }};
        Parsetree.Field {name = "depth";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "direct";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DIRECTFORMAT" });
            ft_allowed = None }};
        Parsetree.Field {name = "colormap";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "COLORMAP" });
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "PICTVISUAL";
      fields =
      [Parsetree.Field {name = "visual";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "VISUALID" });
           ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTFORMAT" });
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "PICTDEPTH";
      fields =
      [Parsetree.Field {name = "depth";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "num_visuals";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4); serialize = false};
        Parsetree.Field_list {name = "visuals";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTVISUAL" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_visuals"))}
        ]};
    Parsetree.Struct {name = "PICTSCREEN";
      fields =
      [Parsetree.Field {name = "num_depths";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "fallback";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Parsetree.Field_list {name = "depths";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTDEPTH" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_depths"))}
        ]};
    Parsetree.Struct {name = "INDEXVALUE";
      fields =
      [Parsetree.Field {name = "pixel";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "red";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "green";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "blue";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "alpha";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "COLOR";
      fields =
      [Parsetree.Field {name = "red";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field {name = "green";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "blue";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "alpha";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "POINTFIX";
      fields =
      [Parsetree.Field {name = "x";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "FIXED" });
           ft_allowed = None }};
        Parsetree.Field {name = "y";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "LINEFIX";
      fields =
      [Parsetree.Field {name = "p1";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "POINTFIX" });
           ft_allowed = None }};
        Parsetree.Field {name = "p2";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "POINTFIX" });
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "TRIANGLE";
      fields =
      [Parsetree.Field {name = "p1";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "POINTFIX" });
           ft_allowed = None }};
        Parsetree.Field {name = "p2";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "POINTFIX" });
            ft_allowed = None }};
        Parsetree.Field {name = "p3";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "POINTFIX" });
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "TRAPEZOID";
      fields =
      [Parsetree.Field {name = "top";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "FIXED" });
           ft_allowed = None }};
        Parsetree.Field {name = "bottom";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None }};
        Parsetree.Field {name = "left";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "LINEFIX" });
            ft_allowed = None }};
        Parsetree.Field {name = "right";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "LINEFIX" });
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "GLYPHINFO";
      fields =
      [Parsetree.Field {name = "width";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "x_off";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y_off";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }}
        ]};
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "client_major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "client_minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryPictFormats"; opcode = 1;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_formats";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_screens";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_depths";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_visuals";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_subpixel";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                Parsetree.Field_list {name = "formats";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "PICTFORMINFO"
                         });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_formats"))};
                Parsetree.Field_list {name = "screens";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "PICTSCREEN" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_screens"))};
                Parsetree.Field_list {name = "subpixels";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "SubPixel" }))
                    };
                  length = (Some (Parsetree.Field_ref "num_subpixel"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryPictIndexValues"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "format";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PICTFORMAT" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_values";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "values";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "INDEXVALUE" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_values"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "CreatePicture"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "pid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PICTURE" });
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Parsetree.Field {name = "value_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "CP" }))
            }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "value_list";
             sw_cond =
             (Parsetree.Cond_bit_and (Parsetree.Field_ref "value_mask"));
             sw_cases =
             [{ Parsetree.cs_name = None;
                cs_cond =
                [Parsetree.Enum_ref {
                   enum = { Parsetree.id_module = None; id_name = "CP" };
                   item = "Repeat"}
                  ];
                cs_fields =
                [Parsetree.Field {name = "repeat";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "Repeat" }))
                     }}
                  ]
                };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "AlphaMap"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "alphamap";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "PICTURE" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "AlphaXOrigin"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "alphaxorigin";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int32);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "AlphaYOrigin"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "alphayorigin";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int32);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "ClipXOrigin"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "clipxorigin";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int32);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "ClipYOrigin"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "clipyorigin";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int32);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "ClipMask"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "clipmask";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "PIXMAP" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "GraphicsExposure"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "graphicsexposure";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "SubwindowMode"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "subwindowmode";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "SubwindowMode" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "PolyEdge"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "polyedge";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "PolyEdge" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "PolyMode"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "polymode";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "PolyMode" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "Dither"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "dither";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "ATOM" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "ComponentAlpha"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "componentalpha";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }}
                   ]
                 }
               ]
             })
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "ChangePicture"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "picture";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PICTURE" });
           ft_allowed = None }};
        Parsetree.Field {name = "value_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "CP" }))
            }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "value_list";
             sw_cond =
             (Parsetree.Cond_bit_and (Parsetree.Field_ref "value_mask"));
             sw_cases =
             [{ Parsetree.cs_name = None;
                cs_cond =
                [Parsetree.Enum_ref {
                   enum = { Parsetree.id_module = None; id_name = "CP" };
                   item = "Repeat"}
                  ];
                cs_fields =
                [Parsetree.Field {name = "repeat";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "Repeat" }))
                     }}
                  ]
                };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "AlphaMap"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "alphamap";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "PICTURE" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "AlphaXOrigin"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "alphaxorigin";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int32);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "AlphaYOrigin"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "alphayorigin";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int32);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "ClipXOrigin"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "clipxorigin";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int32);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "ClipYOrigin"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "clipyorigin";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int32);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "ClipMask"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "clipmask";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "PIXMAP" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "GraphicsExposure"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "graphicsexposure";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "SubwindowMode"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "subwindowmode";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "SubwindowMode" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "PolyEdge"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "polyedge";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "PolyEdge" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "PolyMode"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "polymode";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "PolyMode" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "Dither"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "dither";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "ATOM" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CP" };
                    item = "ComponentAlpha"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "componentalpha";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }}
                   ]
                 }
               ]
             })
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SetPictureClipRectangles"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "picture";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PICTURE" });
           ft_allowed = None }};
        Parsetree.Field {name = "clip_x_origin";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "clip_y_origin";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "rectangles";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "RECTANGLE" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "FreePicture"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "picture";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PICTURE" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "Composite"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "op";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "PictOp" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "src";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "mask";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Picture" }))
            }};
        Parsetree.Field {name = "dst";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "src_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "mask_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "mask_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "dst_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "dst_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "Trapezoids"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "op";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "PictOp" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "src";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "dst";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "mask_format";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Parsetree.Field {name = "src_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "traps";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TRAPEZOID" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "Triangles"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "op";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "PictOp" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "src";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "dst";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "mask_format";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Parsetree.Field {name = "src_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "triangles";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TRIANGLE" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "TriStrip"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "op";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "PictOp" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "src";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "dst";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "mask_format";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Parsetree.Field {name = "src_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "points";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "POINTFIX" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "TriFan"; opcode = 13; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "op";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "PictOp" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "src";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "dst";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "mask_format";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Parsetree.Field {name = "src_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "points";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "POINTFIX" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateGlyphSet"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "gsid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "GLYPHSET" });
           ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTFORMAT" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "ReferenceGlyphSet"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "gsid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "GLYPHSET" });
           ft_allowed = None }};
        Parsetree.Field {name = "existing";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GLYPHSET" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "FreeGlyphSet"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "glyphset";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "GLYPHSET" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "AddGlyphs"; opcode = 20;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "glyphset";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "GLYPHSET" });
           ft_allowed = None }};
        Parsetree.Field {name = "glyphs_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "glyphids";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "glyphs_len"))};
        Parsetree.Field_list {name = "glyphs";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GLYPHINFO" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "glyphs_len"))};
        Parsetree.Field_list {name = "data";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "FreeGlyphs"; opcode = 22;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "glyphset";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "GLYPHSET" });
           ft_allowed = None }};
        Parsetree.Field_list {name = "glyphs";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GLYPH" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CompositeGlyphs8"; opcode = 23;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "op";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "PictOp" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "src";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "dst";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "mask_format";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Parsetree.Field {name = "glyphset";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GLYPHSET" });
            ft_allowed = None }};
        Parsetree.Field {name = "src_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "glyphcmds";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CompositeGlyphs16"; opcode = 24;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "op";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "PictOp" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "src";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "dst";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "mask_format";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Parsetree.Field {name = "glyphset";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GLYPHSET" });
            ft_allowed = None }};
        Parsetree.Field {name = "src_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "glyphcmds";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CompositeGlyphs32"; opcode = 25;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "op";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "PictOp" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "src";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "dst";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "mask_format";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Parsetree.Field {name = "glyphset";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GLYPHSET" });
            ft_allowed = None }};
        Parsetree.Field {name = "src_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "glyphcmds";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "FillRectangles"; opcode = 26;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "op";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "PictOp" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "dst";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "color";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "COLOR" });
            ft_allowed = None }};
        Parsetree.Field_list {name = "rects";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "RECTANGLE" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateCursor"; opcode = 27;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "cid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CURSOR" });
           ft_allowed = None }};
        Parsetree.Field {name = "source";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }};
        Parsetree.Field {name = "x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Struct {name = "TRANSFORM";
      fields =
      [Parsetree.Field {name = "matrix11";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "FIXED" });
           ft_allowed = None }};
        Parsetree.Field {name = "matrix12";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None }};
        Parsetree.Field {name = "matrix13";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None }};
        Parsetree.Field {name = "matrix21";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None }};
        Parsetree.Field {name = "matrix22";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None }};
        Parsetree.Field {name = "matrix23";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None }};
        Parsetree.Field {name = "matrix31";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None }};
        Parsetree.Field {name = "matrix32";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None }};
        Parsetree.Field {name = "matrix33";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None }}
        ]};
    Parsetree.Request {name = "SetPictureTransform"; opcode = 28;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "picture";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PICTURE" });
           ft_allowed = None }};
        Parsetree.Field {name = "transform";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TRANSFORM" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "QueryFilters"; opcode = 29;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_aliases";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_filters";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false};
                Parsetree.Field_list {name = "aliases";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_aliases"))};
                Parsetree.Field_list {name = "filters";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "STR" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_filters"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetPictureFilter"; opcode = 30;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "picture";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PICTURE" });
           ft_allowed = None }};
        Parsetree.Field {name = "filter_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "filter";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "filter_len"))};
        Parsetree.Field_pad {pad = (Parsetree.Pad_align 4); serialize = false};
        Parsetree.Field_list {name = "values";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Struct {name = "ANIMCURSORELT";
      fields =
      [Parsetree.Field {name = "cursor";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CURSOR" });
           ft_allowed = None }};
        Parsetree.Field {name = "delay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Request {name = "CreateAnimCursor"; opcode = 31;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "cid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CURSOR" });
           ft_allowed = None }};
        Parsetree.Field_list {name = "cursors";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ANIMCURSORELT" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Struct {name = "SPANFIX";
      fields =
      [Parsetree.Field {name = "l";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "FIXED" });
           ft_allowed = None }};
        Parsetree.Field {name = "r";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None }};
        Parsetree.Field {name = "y";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "TRAP";
      fields =
      [Parsetree.Field {name = "top";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "SPANFIX" });
           ft_allowed = None }};
        Parsetree.Field {name = "bot";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SPANFIX" });
            ft_allowed = None }}
        ]};
    Parsetree.Request {name = "AddTraps"; opcode = 32;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "picture";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PICTURE" });
           ft_allowed = None }};
        Parsetree.Field {name = "x_off";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y_off";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "traps";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TRAP" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateSolidFill"; opcode = 33;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "picture";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PICTURE" });
           ft_allowed = None }};
        Parsetree.Field {name = "color";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "COLOR" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateLinearGradient"; opcode = 34;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "picture";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PICTURE" });
           ft_allowed = None }};
        Parsetree.Field {name = "p1";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "POINTFIX" });
            ft_allowed = None }};
        Parsetree.Field {name = "p2";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "POINTFIX" });
            ft_allowed = None }};
        Parsetree.Field {name = "num_stops";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "stops";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_stops"))};
        Parsetree.Field_list {name = "colors";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "COLOR" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_stops"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateRadialGradient"; opcode = 35;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "picture";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PICTURE" });
           ft_allowed = None }};
        Parsetree.Field {name = "inner";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "POINTFIX" });
            ft_allowed = None }};
        Parsetree.Field {name = "outer";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "POINTFIX" });
            ft_allowed = None }};
        Parsetree.Field {name = "inner_radius";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None }};
        Parsetree.Field {name = "outer_radius";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None }};
        Parsetree.Field {name = "num_stops";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "stops";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_stops"))};
        Parsetree.Field_list {name = "colors";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "COLOR" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_stops"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateConicalGradient"; opcode = 36;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "picture";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PICTURE" });
           ft_allowed = None }};
        Parsetree.Field {name = "center";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "POINTFIX" });
            ft_allowed = None }};
        Parsetree.Field {name = "angle";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None }};
        Parsetree.Field {name = "num_stops";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "stops";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FIXED" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_stops"))};
        Parsetree.Field_list {name = "colors";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "COLOR" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_stops"))}
        ];
      reply = None; doc = None}
    ]}
Parsetree.Extension {name = "Res"; file_name = "res";
  query_name = "X-Resource"; multiword = false; version = (1, 2);
  declarations =
  [(Parsetree.Import "xproto");
    Parsetree.Struct {name = "Client";
      fields =
      [Parsetree.Field {name = "resource_base";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "resource_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "Type";
      fields =
      [Parsetree.Field {name = "resource_type";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ATOM" });
           ft_allowed = None }};
        Parsetree.Field {name = "count";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Enum {name = "ClientIdMask";
      items =
      [("ClientXID", (Parsetree.Item_bit 0));
        ("LocalClientPID", (Parsetree.Item_bit 1))];
      doc = None};
    Parsetree.Struct {name = "ClientIdSpec";
      fields =
      [Parsetree.Field {name = "client";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ClientIdMask" }))
            }}
        ]};
    Parsetree.Struct {name = "ClientIdValue";
      fields =
      [Parsetree.Field {name = "spec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ClientIdSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "length";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "value";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Div,
                   (Parsetree.Field_ref "length"), (Parsetree.Expr_value 4L)
                   )))}
        ]};
    Parsetree.Struct {name = "ResourceIdSpec";
      fields =
      [Parsetree.Field {name = "resource";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "ResourceSizeSpec";
      fields =
      [Parsetree.Field {name = "spec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ResourceIdSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "bytes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "ref_count";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "use_count";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "ResourceSizeValue";
      fields =
      [Parsetree.Field {name = "size";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ResourceSizeSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "num_cross_references";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "cross_references";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ResourceSizeSpec" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_cross_references"))}
        ]};
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "client_major";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "client_minor";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "server_major";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "server_minor";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryClients"; opcode = 1;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_clients";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "clients";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "Client" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_clients"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryClientResources"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "xid";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_types";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "types";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "Type" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_types"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryClientPixmapBytes"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "xid";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "bytes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "bytes_overflow";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryClientIds"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "num_specs";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field_list {name = "specs";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ClientIdSpec" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_specs"))}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_ids";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "ids";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None;
                         id_name = "ClientIdValue" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_ids"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryResourceBytes"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "client";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "num_specs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "specs";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ResourceIdSpec" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_specs"))}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_sizes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "sizes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None;
                         id_name = "ResourceSizeValue" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_sizes"))}
                ];
              doc = None });
      doc = None}
    ]}
Parsetree.Extension {name = "ScreenSaver"; file_name = "screensaver";
  query_name = "MIT-SCREEN-SAVER"; multiword = false; version = (1, 1);
  declarations =
  [(Parsetree.Import "xproto");
    Parsetree.Enum {name = "Kind";
      items =
      [("Blanked", (Parsetree.Item_value 0L));
        ("Internal", (Parsetree.Item_value 1L));
        ("External", (Parsetree.Item_value 2L))];
      doc = None};
    Parsetree.Enum {name = "Event";
      items =
      [("NotifyMask", (Parsetree.Item_bit 0));
        ("CycleMask", (Parsetree.Item_bit 1))];
      doc = None};
    Parsetree.Enum {name = "State";
      items =
      [("Off", (Parsetree.Item_value 0L)); ("On", (Parsetree.Item_value 1L));
        ("Cycle", (Parsetree.Item_value 2L));
        ("Disabled", (Parsetree.Item_value 3L))];
      doc = None};
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "client_major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "client_minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "server_major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "server_minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryInfo"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "state";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "saver_window";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "WINDOW" });
                    ft_allowed = None }};
                Parsetree.Field {name = "ms_until_server";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "ms_since_user_input";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "event_mask";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "kind";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None; id_name = "Kind" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 7);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SelectInput"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "event_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "Event" }))
            }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SetAttributes"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "border_width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "class";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "WindowClass" }))
            }};
        Parsetree.Field {name = "depth";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "visual";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "VISUALID" });
            ft_allowed = None }};
        Parsetree.Field {name = "value_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "CW" }))
            }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "value_list";
             sw_cond =
             (Parsetree.Cond_bit_and (Parsetree.Field_ref "value_mask"));
             sw_cases =
             [{ Parsetree.cs_name = None;
                cs_cond =
                [Parsetree.Enum_ref {
                   enum = { Parsetree.id_module = None; id_name = "CW" };
                   item = "BackPixmap"}
                  ];
                cs_fields =
                [Parsetree.Field {name = "background_pixmap";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "PIXMAP" });
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "BackPixmap" }))
                     }}
                  ]
                };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "BackPixel"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "background_pixel";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "BorderPixmap"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "border_pixmap";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "PIXMAP" });
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "Pixmap" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "BorderPixel"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "border_pixel";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "BitGravity"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "bit_gravity";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "Gravity" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "WinGravity"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "win_gravity";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "Gravity" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "BackingStore"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "backing_store";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "BackingStore" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "BackingPlanes"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "backing_planes";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "BackingPixel"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "backing_pixel";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "OverrideRedirect"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "override_redirect";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "BOOL32" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "SaveUnder"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "save_under";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "BOOL32" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "EventMask"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "event_mask";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_mask
                               { Parsetree.id_module = None;
                                 id_name = "EventMask" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "DontPropagate"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "do_not_propogate_mask";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_mask
                               { Parsetree.id_module = None;
                                 id_name = "EventMask" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "Colormap"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "colormap";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "COLORMAP" });
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "Colormap" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "Cursor"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "cursor";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "CURSOR" });
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "Cursor" }))
                      }}
                   ]
                 }
               ]
             })
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "UnsetAttributes"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "Suspend"; opcode = 5; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "suspend";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Event {name = "Notify"; number = 0; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "state";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "State" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "root";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "kind";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Kind" }))
            }};
        Parsetree.Field {name = "forced";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 14);
          serialize = false}
        ];
      doc = None}
    ]}
Parsetree.Extension {name = "Shape"; file_name = "shape";
  query_name = "SHAPE"; multiword = false; version = (1, 1);
  declarations =
  [(Parsetree.Import "xproto");
    Parsetree.Typedef {name = "OP";
      type_ = (Parsetree.Type_primitive Parsetree.Card8)};
    Parsetree.Typedef {name = "KIND";
      type_ = (Parsetree.Type_primitive Parsetree.Card8)};
    Parsetree.Enum {name = "SO";
      items =
      [("Set", (Parsetree.Item_value 0L));
        ("Union", (Parsetree.Item_value 1L));
        ("Intersect", (Parsetree.Item_value 2L));
        ("Subtract", (Parsetree.Item_value 3L));
        ("Invert", (Parsetree.Item_value 4L))];
      doc = None};
    Parsetree.Enum {name = "SK";
      items =
      [("Bounding", (Parsetree.Item_value 0L));
        ("Clip", (Parsetree.Item_value 1L));
        ("Input", (Parsetree.Item_value 2L))];
      doc = None};
    Parsetree.Event {name = "Notify"; number = 0; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "shape_kind";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "KIND" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SK" }))
           }};
        Parsetree.Field {name = "affected_window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "extents_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "extents_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "extents_width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "extents_height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "server_time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "shaped";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 11);
          serialize = false}
        ];
      doc = None};
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "Rectangles"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "operation";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref { Parsetree.id_module = None; id_name = "OP" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SO" }))
           }};
        Parsetree.Field {name = "destination_kind";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KIND" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SK" }))
            }};
        Parsetree.Field {name = "ordering";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ClipOrdering" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "destination_window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "x_offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y_offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "rectangles";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "RECTANGLE" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "Mask"; opcode = 2; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "operation";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref { Parsetree.id_module = None; id_name = "OP" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SO" }))
           }};
        Parsetree.Field {name = "destination_kind";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KIND" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SK" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "destination_window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "x_offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y_offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "source_bitmap";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PIXMAP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Pixmap" }))
            }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "Combine"; opcode = 3; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "operation";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref { Parsetree.id_module = None; id_name = "OP" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SO" }))
           }};
        Parsetree.Field {name = "destination_kind";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KIND" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SK" }))
            }};
        Parsetree.Field {name = "source_kind";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KIND" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SK" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "destination_window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "x_offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y_offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "source_window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "Offset"; opcode = 4; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "destination_kind";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "KIND" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SK" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "destination_window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "x_offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y_offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "QueryExtents"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "destination_window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "bounding_shaped";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field {name = "clip_shaped";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                  serialize = false};
                Parsetree.Field {name = "bounding_shape_extents_x";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "bounding_shape_extents_y";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "bounding_shape_extents_width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "bounding_shape_extents_height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "clip_shape_extents_x";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "clip_shape_extents_y";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "clip_shape_extents_width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "clip_shape_extents_height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SelectInput"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "destination_window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "enable";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "InputSelected"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "destination_window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "enabled";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Bool);
                   ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetRectangles"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "source_kind";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KIND" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SK" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "ordering";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Byte);
                   ft_allowed =
                   (Some (Parsetree.Allowed_enum
                            { Parsetree.id_module = None;
                              id_name = "ClipOrdering" }))
                   }};
                Parsetree.Field {name = "rectangles_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "rectangles";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "RECTANGLE" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "rectangles_len"))}
                ];
              doc = None });
      doc = None}
    ]}
Parsetree.Extension {name = "Shm"; file_name = "shm"; query_name = "MIT-SHM";
  multiword = false; version = (1, 2);
  declarations =
  [(Parsetree.Import "xproto"); (Parsetree.Xid "SEG");
    Parsetree.Event {name = "Completion"; number = 0; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "minor_event";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "major_event";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "shmseg";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SEG" });
            ft_allowed = None }};
        Parsetree.Field {name = "offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      doc = None};
    Parsetree.Error_copy {name = "BadSeg";
      error = { Parsetree.id_module = None; id_name = "Value" };
      er_number = 0};
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "shared_pixmaps";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Bool);
                   ft_allowed = None }};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "uid";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "gid";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "pixmap_format";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 15);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "Attach"; opcode = 1; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "shmseg";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "SEG" });
           ft_allowed = None }};
        Parsetree.Field {name = "shmid";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "read_only";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "Detach"; opcode = 2; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "shmseg";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "SEG" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PutImage"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "gc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GCONTEXT" });
            ft_allowed = None }};
        Parsetree.Field {name = "total_width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "total_height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "dst_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "dst_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "depth";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "send_event";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "shmseg";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SEG" });
            ft_allowed = None }};
        Parsetree.Field {name = "offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetImage"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "plane_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "shmseg";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SEG" });
            ft_allowed = None }};
        Parsetree.Field {name = "offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "depth";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "visual";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "VISUALID" });
                    ft_allowed = None }};
                Parsetree.Field {name = "size";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "CreatePixmap"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "pid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PIXMAP" });
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "depth";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "shmseg";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SEG" });
            ft_allowed = None }};
        Parsetree.Field {name = "offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "AttachFd"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "shmseg";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "SEG" });
           ft_allowed = None }};
        (Parsetree.Field_file_descriptor "shm_fd");
        Parsetree.Field {name = "read_only";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateSegment"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "shmseg";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "SEG" });
           ft_allowed = None }};
        Parsetree.Field {name = "size";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "read_only";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "nfd";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                (Parsetree.Field_file_descriptor "shm_fd");
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                  serialize = false}
                ];
              doc = None });
      doc = None}
    ]}
Parsetree.Extension {name = "Sync"; file_name = "sync"; query_name = "SYNC";
  multiword = false; version = (3, 1);
  declarations =
  [(Parsetree.Import "xproto"); (Parsetree.Xid "ALARM");
    Parsetree.Enum {name = "ALARMSTATE";
      items =
      [("Active", (Parsetree.Item_value 0L));
        ("Inactive", (Parsetree.Item_value 1L));
        ("Destroyed", (Parsetree.Item_value 2L))];
      doc = None};
    (Parsetree.Xid "COUNTER"); (Parsetree.Xid "FENCE");
    Parsetree.Enum {name = "TESTTYPE";
      items =
      [("PositiveTransition", (Parsetree.Item_value 0L));
        ("NegativeTransition", (Parsetree.Item_value 1L));
        ("PositiveComparison", (Parsetree.Item_value 2L));
        ("NegativeComparison", (Parsetree.Item_value 3L))];
      doc = None};
    Parsetree.Enum {name = "VALUETYPE";
      items =
      [("Absolute", (Parsetree.Item_value 0L));
        ("Relative", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Enum {name = "CA";
      items =
      [("Counter", (Parsetree.Item_bit 0));
        ("ValueType", (Parsetree.Item_bit 1));
        ("Value", (Parsetree.Item_bit 2));
        ("TestType", (Parsetree.Item_bit 3));
        ("Delta", (Parsetree.Item_bit 4)); ("Events", (Parsetree.Item_bit 5))
        ];
      doc = None};
    Parsetree.Struct {name = "INT64";
      fields =
      [Parsetree.Field {name = "hi";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
           ft_allowed = None }};
        Parsetree.Field {name = "lo";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "SYSTEMCOUNTER";
      fields =
      [Parsetree.Field {name = "counter";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "COUNTER" });
           ft_allowed = None }};
        Parsetree.Field {name = "resolution";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "sync"); id_name = "INT64" });
            ft_allowed = None }};
        Parsetree.Field {name = "name_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "name";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "name_len"))};
        Parsetree.Field_pad {pad = (Parsetree.Pad_align 4); serialize = false}
        ]};
    Parsetree.Struct {name = "TRIGGER";
      fields =
      [Parsetree.Field {name = "counter";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "COUNTER" });
           ft_allowed = None }};
        Parsetree.Field {name = "wait_type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "VALUETYPE" }))
            }};
        Parsetree.Field {name = "wait_value";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "sync"); id_name = "INT64" });
            ft_allowed = None }};
        Parsetree.Field {name = "test_type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "TESTTYPE" }))
            }}
        ]};
    Parsetree.Struct {name = "WAITCONDITION";
      fields =
      [Parsetree.Field {name = "trigger";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "TRIGGER" });
           ft_allowed = None }};
        Parsetree.Field {name = "event_threshold";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "sync"); id_name = "INT64" });
            ft_allowed = None }}
        ]};
    Parsetree.Error {name = "Counter"; number = 0;
      fields =
      [Parsetree.Field {name = "bad_counter";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "minor_opcode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "major_opcode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ]};
    Parsetree.Error {name = "Alarm"; number = 1;
      fields =
      [Parsetree.Field {name = "bad_alarm";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "minor_opcode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "major_opcode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ]};
    Parsetree.Request {name = "Initialize"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "desired_major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "desired_minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ListSystemCounters"; opcode = 1;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "counters_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "counters";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None;
                         id_name = "SYSTEMCOUNTER" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "counters_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "CreateCounter"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "id";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "COUNTER" });
           ft_allowed = None }};
        Parsetree.Field {name = "initial_value";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "sync"); id_name = "INT64" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DestroyCounter"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "counter";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "COUNTER" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "QueryCounter"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "counter";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "COUNTER" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "counter_value";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = (Some "sync");
                         id_name = "INT64" });
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "Await"; opcode = 7; combine_adjacent = true;
      fields =
      [Parsetree.Field_list {name = "wait_list";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WAITCONDITION" });
           ft_allowed = None };
         length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "ChangeCounter"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "counter";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "COUNTER" });
           ft_allowed = None }};
        Parsetree.Field {name = "amount";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "sync"); id_name = "INT64" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SetCounter"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "counter";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "COUNTER" });
           ft_allowed = None }};
        Parsetree.Field {name = "value";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "sync"); id_name = "INT64" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateAlarm"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "id";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ALARM" });
           ft_allowed = None }};
        Parsetree.Field {name = "value_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "CA" }))
            }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "value_list";
             sw_cond =
             (Parsetree.Cond_bit_and (Parsetree.Field_ref "value_mask"));
             sw_cases =
             [{ Parsetree.cs_name = None;
                cs_cond =
                [Parsetree.Enum_ref {
                   enum = { Parsetree.id_module = None; id_name = "CA" };
                   item = "Counter"}
                  ];
                cs_fields =
                [Parsetree.Field {name = "counter";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "COUNTER" });
                     ft_allowed = None }}
                  ]
                };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CA" };
                    item = "ValueType"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "valueType";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "VALUETYPE" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CA" };
                    item = "Value"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "value";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = (Some "sync");
                           id_name = "INT64" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CA" };
                    item = "TestType"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "testType";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "TESTTYPE" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CA" };
                    item = "Delta"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "delta";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = (Some "sync");
                           id_name = "INT64" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CA" };
                    item = "Events"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "events";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }}
                   ]
                 }
               ]
             })
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "ChangeAlarm"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "id";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ALARM" });
           ft_allowed = None }};
        Parsetree.Field {name = "value_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "CA" }))
            }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "value_list";
             sw_cond =
             (Parsetree.Cond_bit_and (Parsetree.Field_ref "value_mask"));
             sw_cases =
             [{ Parsetree.cs_name = None;
                cs_cond =
                [Parsetree.Enum_ref {
                   enum = { Parsetree.id_module = None; id_name = "CA" };
                   item = "Counter"}
                  ];
                cs_fields =
                [Parsetree.Field {name = "counter";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "COUNTER" });
                     ft_allowed = None }}
                  ]
                };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CA" };
                    item = "ValueType"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "valueType";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "VALUETYPE" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CA" };
                    item = "Value"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "value";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = (Some "sync");
                           id_name = "INT64" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CA" };
                    item = "TestType"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "testType";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "TESTTYPE" }))
                      }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CA" };
                    item = "Delta"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "delta";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = (Some "sync");
                           id_name = "INT64" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CA" };
                    item = "Events"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "events";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }}
                   ]
                 }
               ]
             })
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DestroyAlarm"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "alarm";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ALARM" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "QueryAlarm"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "alarm";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ALARM" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "trigger";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TRIGGER" });
                    ft_allowed = None }};
                Parsetree.Field {name = "delta";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = (Some "sync");
                         id_name = "INT64" });
                    ft_allowed = None }};
                Parsetree.Field {name = "events";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field {name = "state";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "ALARMSTATE" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetPriority"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "priority";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetPriority"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "priority";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "CreateFence"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "fence";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FENCE" });
            ft_allowed = None }};
        Parsetree.Field {name = "initially_triggered";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "TriggerFence"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "fence";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "FENCE" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "ResetFence"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "fence";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "FENCE" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DestroyFence"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "fence";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "FENCE" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "QueryFence"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "fence";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "FENCE" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "triggered";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "AwaitFence"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Parsetree.Field_list {name = "fence_list";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "FENCE" });
           ft_allowed = None };
         length = None}
        ];
      reply = None; doc = None};
    Parsetree.Event {name = "CounterNotify"; number = 0; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "kind";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "counter";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "COUNTER" });
            ft_allowed = None }};
        Parsetree.Field {name = "wait_value";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "sync"); id_name = "INT64" });
            ft_allowed = None }};
        Parsetree.Field {name = "counter_value";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "sync"); id_name = "INT64" });
            ft_allowed = None }};
        Parsetree.Field {name = "timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "count";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "destroyed";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "AlarmNotify"; number = 1; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "kind";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "alarm";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ALARM" });
            ft_allowed = None }};
        Parsetree.Field {name = "counter_value";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "sync"); id_name = "INT64" });
            ft_allowed = None }};
        Parsetree.Field {name = "alarm_value";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "sync"); id_name = "INT64" });
            ft_allowed = None }};
        Parsetree.Field {name = "timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "state";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ALARMSTATE" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      doc = None}
    ]}
Parsetree.Extension {name = "XCMisc"; file_name = "xc_misc";
  query_name = "XC-MISC"; multiword = true; version = (1, 1);
  declarations =
  [Parsetree.Request {name = "GetVersion"; opcode = 0;
     combine_adjacent = true;
     fields =
     [Parsetree.Field {name = "client_major_version";
        type_ =
        { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
          ft_allowed = None }};
       Parsetree.Field {name = "client_minor_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }}
       ];
     reply =
     (Some { Parsetree.fields =
             [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Parsetree.Field {name = "server_major_version";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Parsetree.Field {name = "server_minor_version";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }}
               ];
             doc = None });
     doc = None};
    Parsetree.Request {name = "GetXIDRange"; opcode = 1;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "start_id";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "count";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetXIDList"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "count";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "ids_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "ids";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "ids_len"))}
                ];
              doc = None });
      doc = None}
    ]}
Parsetree.Extension {name = "Xevie"; file_name = "xevie";
  query_name = "XEVIE"; multiword = false; version = (1, 0);
  declarations =
  [Parsetree.Request {name = "QueryVersion"; opcode = 0;
     combine_adjacent = true;
     fields =
     [Parsetree.Field {name = "client_major_version";
        type_ =
        { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
          ft_allowed = None }};
       Parsetree.Field {name = "client_minor_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }}
       ];
     reply =
     (Some { Parsetree.fields =
             [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Parsetree.Field {name = "server_major_version";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Parsetree.Field {name = "server_minor_version";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                 serialize = false}
               ];
             doc = None });
     doc = None};
    Parsetree.Request {name = "Start"; opcode = 1; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "End"; opcode = 2; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "cmap";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "Datatype";
      items =
      [("Unmodified", (Parsetree.Item_value 0L));
        ("Modified", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Struct {name = "Event";
      fields =
      [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 32); serialize = false}
        ]};
    Parsetree.Request {name = "Send"; opcode = 3; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "event";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "Event" });
           ft_allowed = None }};
        Parsetree.Field {name = "data_type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 64);
          serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SelectInput"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "event_mask";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                  serialize = false}
                ];
              doc = None });
      doc = None}
    ]}
Parsetree.Extension {name = "XF86Dri"; file_name = "xf86dri";
  query_name = "XFree86-DRI"; multiword = false; version = (4, 1);
  declarations =
  [Parsetree.Struct {name = "DrmClipRect";
     fields =
     [Parsetree.Field {name = "x1";
        type_ =
        { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
          ft_allowed = None }};
       Parsetree.Field {name = "y1";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
           ft_allowed = None }};
       Parsetree.Field {name = "x2";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
           ft_allowed = None }};
       Parsetree.Field {name = "x3";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
           ft_allowed = None }}
       ]};
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "dri_major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "dri_minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "dri_minor_patch";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryDirectRenderingCapable"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "is_capable";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "OpenConnection"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "sarea_handle_low";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "sarea_handle_high";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "bus_id_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "bus_id";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "bus_id_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "CloseConnection"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetClientDriverName"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "client_driver_major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "client_driver_minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "client_driver_patch_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "client_driver_name_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field_list {name = "client_driver_name";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Field_ref "client_driver_name_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "CreateContext"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "visual";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "context";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "hw_context";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "DestroyContext"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "context";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateDrawable"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "hw_drawable_handle";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "DestroyDrawable"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetDrawableInfo"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "drawable_table_index";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "drawable_table_stamp";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "drawable_origin_X";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "drawable_origin_Y";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "drawable_size_W";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "drawable_size_H";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_clip_rects";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "back_x";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "back_y";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_back_clip_rects";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_list {name = "clip_rects";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "DrmClipRect"
                         });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_clip_rects"))};
                Parsetree.Field_list {name = "back_clip_rects";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "DrmClipRect"
                         });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_back_clip_rects"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetDeviceInfo"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "framebuffer_handle_low";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "framebuffer_handle_high";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "framebuffer_origin_offset";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "framebuffer_size";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "framebuffer_stride";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "device_private_size";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_list {name = "device_private";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "device_private_size"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "AuthConnection"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "magic";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "authenticated";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None}
    ]}
Parsetree.Extension {name = "XF86VidMode"; file_name = "xf86vidmode";
  query_name = "XFree86-VidModeExtension"; multiword = false;
  version = (2, 2);
  declarations =
  [Parsetree.Typedef {name = "SYNCRANGE";
     type_ = (Parsetree.Type_primitive Parsetree.Card32)};
    Parsetree.Typedef {name = "DOTCLOCK";
      type_ = (Parsetree.Type_primitive Parsetree.Card32)};
    Parsetree.Enum {name = "ModeFlag";
      items =
      [("Positive_HSync", (Parsetree.Item_bit 0));
        ("Negative_HSync", (Parsetree.Item_bit 1));
        ("Positive_VSync", (Parsetree.Item_bit 2));
        ("Negative_VSync", (Parsetree.Item_bit 3));
        ("Interlace", (Parsetree.Item_bit 4));
        ("Composite_Sync", (Parsetree.Item_bit 5));
        ("Positive_CSync", (Parsetree.Item_bit 6));
        ("Negative_CSync", (Parsetree.Item_bit 7));
        ("HSkew", (Parsetree.Item_bit 8));
        ("Broadcast", (Parsetree.Item_bit 9));
        ("Pixmux", (Parsetree.Item_bit 10));
        ("Double_Clock", (Parsetree.Item_bit 11));
        ("Half_Clock", (Parsetree.Item_bit 12))];
      doc = None};
    Parsetree.Enum {name = "ClockFlag";
      items = [("Programable", (Parsetree.Item_bit 0))]; doc = None};
    Parsetree.Enum {name = "Permission";
      items =
      [("Read", (Parsetree.Item_bit 0)); ("Write", (Parsetree.Item_bit 1))];
      doc = None};
    Parsetree.Struct {name = "ModeInfo";
      fields =
      [Parsetree.Field {name = "dotclock";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DOTCLOCK" });
           ft_allowed = None }};
        Parsetree.Field {name = "hdisplay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hsyncstart";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hsyncend";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "htotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hskew";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "vdisplay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vsyncstart";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vsyncend";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vtotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4); serialize = false};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModeFlag" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false};
        Parsetree.Field {name = "privsize";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetModeLine"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "dotclock";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "DOTCLOCK" });
                    ft_allowed = None }};
                Parsetree.Field {name = "hdisplay";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "hsyncstart";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "hsyncend";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "htotal";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "hskew";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "vdisplay";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "vsyncstart";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "vsyncend";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "vtotal";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                  serialize = false};
                Parsetree.Field {name = "flags";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModeFlag" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field {name = "privsize";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_list {name = "private";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "privsize"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ModModeLine"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "hdisplay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hsyncstart";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hsyncend";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "htotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hskew";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vdisplay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vsyncstart";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vsyncend";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vtotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModeFlag" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false};
        Parsetree.Field {name = "privsize";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "private";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "privsize"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SwitchMode"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field {name = "zoom";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetMonitor"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "vendor_length";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "model_length";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_hsync";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_vsync";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "hsync";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "SYNCRANGE" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_hsync"))};
                Parsetree.Field_list {name = "vsync";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "SYNCRANGE" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_vsync"))};
                Parsetree.Field_list {name = "vendor";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "vendor_length"))};
                Parsetree.Field_list {name = "alignment_pad";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Void);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Sub,
                           (Parsetree.Binop (Parsetree.Bit_and,
                              (Parsetree.Binop (Parsetree.Add,
                                 (Parsetree.Field_ref "vendor_length"),
                                 (Parsetree.Expr_value 3L))),
                              (Parsetree.Unop (Parsetree.Bit_not,
                                 (Parsetree.Expr_value 3L)))
                              )),
                           (Parsetree.Field_ref "vendor_length"))))};
                Parsetree.Field_list {name = "model";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "model_length"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "LockModeSwitch"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field {name = "lock";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetAllModeLines"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "modecount";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "modeinfo";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ModeInfo" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "modecount"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "AddModeLine"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "dotclock";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DOTCLOCK" });
            ft_allowed = None }};
        Parsetree.Field {name = "hdisplay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hsyncstart";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hsyncend";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "htotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hskew";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vdisplay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vsyncstart";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vsyncend";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vtotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModeFlag" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false};
        Parsetree.Field {name = "privsize";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "after_dotclock";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DOTCLOCK" });
            ft_allowed = None }};
        Parsetree.Field {name = "after_hdisplay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "after_hsyncstart";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "after_hsyncend";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "after_htotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "after_hskew";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "after_vdisplay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "after_vsyncstart";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "after_vsyncend";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "after_vtotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "after_flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModeFlag" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false};
        Parsetree.Field_list {name = "private";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "privsize"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DeleteModeLine"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "dotclock";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DOTCLOCK" });
            ft_allowed = None }};
        Parsetree.Field {name = "hdisplay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hsyncstart";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hsyncend";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "htotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hskew";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vdisplay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vsyncstart";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vsyncend";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vtotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModeFlag" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false};
        Parsetree.Field {name = "privsize";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "private";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "privsize"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "ValidateModeLine"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "dotclock";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DOTCLOCK" });
            ft_allowed = None }};
        Parsetree.Field {name = "hdisplay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hsyncstart";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hsyncend";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "htotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hskew";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vdisplay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vsyncstart";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vsyncend";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vtotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModeFlag" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false};
        Parsetree.Field {name = "privsize";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "private";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "privsize"))}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "status";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SwitchToMode"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "dotclock";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DOTCLOCK" });
            ft_allowed = None }};
        Parsetree.Field {name = "hdisplay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hsyncstart";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hsyncend";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "htotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "hskew";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vdisplay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vsyncstart";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vsyncend";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vtotal";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModeFlag" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false};
        Parsetree.Field {name = "privsize";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "private";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "privsize"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetViewPort"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "x";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "y";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetViewPort"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetDotClocks"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "flags";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ClockFlag" }))
                    }};
                Parsetree.Field {name = "clocks";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "maxclocks";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "clock";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Binop (Parsetree.Sub,
                              (Parsetree.Expr_value 1L),
                              (Parsetree.Binop (Parsetree.Bit_and,
                                 (Parsetree.Field_ref "flags"),
                                 (Parsetree.Expr_value 1L)))
                              )),
                           (Parsetree.Field_ref "clocks"))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetClientVersion"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "major";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field {name = "minor";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SetGamma"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "red";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "green";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "blue";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetGamma"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 26);
          serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "red";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "green";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "blue";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetGammaRamp"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field {name = "size";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "size";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false};
                Parsetree.Field_list {name = "red";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Bit_and,
                           (Parsetree.Binop (Parsetree.Add,
                              (Parsetree.Field_ref "size"),
                              (Parsetree.Expr_value 1L))),
                           (Parsetree.Unop (Parsetree.Bit_not,
                              (Parsetree.Expr_value 1L)))
                           )))};
                Parsetree.Field_list {name = "green";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Bit_and,
                           (Parsetree.Binop (Parsetree.Add,
                              (Parsetree.Field_ref "size"),
                              (Parsetree.Expr_value 1L))),
                           (Parsetree.Unop (Parsetree.Bit_not,
                              (Parsetree.Expr_value 1L)))
                           )))};
                Parsetree.Field_list {name = "blue";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Bit_and,
                           (Parsetree.Binop (Parsetree.Add,
                              (Parsetree.Field_ref "size"),
                              (Parsetree.Expr_value 1L))),
                           (Parsetree.Unop (Parsetree.Bit_not,
                              (Parsetree.Expr_value 1L)))
                           )))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetGammaRamp"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field {name = "size";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "red";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Bit_and,
                   (Parsetree.Binop (Parsetree.Add,
                      (Parsetree.Field_ref "size"), (Parsetree.Expr_value 1L)
                      )),
                   (Parsetree.Unop (Parsetree.Bit_not,
                      (Parsetree.Expr_value 1L)))
                   )))};
        Parsetree.Field_list {name = "green";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Bit_and,
                   (Parsetree.Binop (Parsetree.Add,
                      (Parsetree.Field_ref "size"), (Parsetree.Expr_value 1L)
                      )),
                   (Parsetree.Unop (Parsetree.Bit_not,
                      (Parsetree.Expr_value 1L)))
                   )))};
        Parsetree.Field_list {name = "blue";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Bit_and,
                   (Parsetree.Binop (Parsetree.Add,
                      (Parsetree.Field_ref "size"), (Parsetree.Expr_value 1L)
                      )),
                   (Parsetree.Unop (Parsetree.Bit_not,
                      (Parsetree.Expr_value 1L)))
                   )))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetGammaRampSize"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "size";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetPermissions"; opcode = 20;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "screen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "permissions";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "Permission" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Error {name = "BadClock"; number = 0; fields = []};
    Parsetree.Error {name = "BadHTimings"; number = 1; fields = []};
    Parsetree.Error {name = "BadVTimings"; number = 2; fields = []};
    Parsetree.Error {name = "ModeUnsuitable"; number = 3; fields = []};
    Parsetree.Error {name = "ExtensionDisabled"; number = 4; fields = []};
    Parsetree.Error {name = "ClientNotLocal"; number = 5; fields = []};
    Parsetree.Error {name = "ZoomLocked"; number = 6; fields = []}]}
Parsetree.Extension {name = "XFixes"; file_name = "xfixes";
  query_name = "XFIXES"; multiword = false; version = (5, 0);
  declarations =
  [(Parsetree.Import "xproto"); (Parsetree.Import "render");
    (Parsetree.Import "shape");
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "client_major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "client_minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "SaveSetMode";
      items =
      [("Insert", (Parsetree.Item_value 0L));
        ("Delete", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Enum {name = "SaveSetTarget";
      items =
      [("Nearest", (Parsetree.Item_value 0L));
        ("Root", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Enum {name = "SaveSetMapping";
      items =
      [("Map", (Parsetree.Item_value 0L));
        ("Unmap", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Request {name = "ChangeSaveSet"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "mode";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SaveSetMode" }))
           }};
        Parsetree.Field {name = "target";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SaveSetTarget"
                       }))
            }};
        Parsetree.Field {name = "map";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SaveSetMapping"
                       }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Enum {name = "SelectionEvent";
      items =
      [("SetSelectionOwner", (Parsetree.Item_value 0L));
        ("SelectionWindowDestroy", (Parsetree.Item_value 1L));
        ("SelectionClientClose", (Parsetree.Item_value 2L))];
      doc = None};
    Parsetree.Enum {name = "SelectionEventMask";
      items =
      [("SetSelectionOwner", (Parsetree.Item_bit 0));
        ("SelectionWindowDestroy", (Parsetree.Item_bit 1));
        ("SelectionClientClose", (Parsetree.Item_bit 2))];
      doc = None};
    Parsetree.Event {name = "SelectionNotify"; number = 0;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "subtype";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SelectionEvent"
                      }))
           }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "owner";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "selection";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "selection_timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8); serialize = false}
        ];
      doc = None};
    Parsetree.Request {name = "SelectSelectionInput"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "selection";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "event_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None;
                       id_name = "SelectionEventMask" }))
            }}
        ];
      reply = None; doc = None};
    Parsetree.Enum {name = "CursorNotify";
      items = [("DisplayCursor", (Parsetree.Item_value 0L))]; doc = None};
    Parsetree.Enum {name = "CursorNotifyMask";
      items = [("DisplayCursor", (Parsetree.Item_bit 0))]; doc = None};
    Parsetree.Event {name = "CursorNotify"; number = 1; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "subtype";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "CursorNotify" }))
           }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "cursor_serial";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "timestamp";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "name";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Atom" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false}
        ];
      doc = None};
    Parsetree.Request {name = "SelectCursorInput"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "event_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None;
                       id_name = "CursorNotifyMask" }))
            }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetCursorImage"; opcode = 4;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "x";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "y";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "xhot";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "yhot";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "cursor_serial";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false};
                Parsetree.Field_list {name = "cursor_image";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "width"),
                           (Parsetree.Field_ref "height"))))}
                ];
              doc = None });
      doc = None};
    (Parsetree.Xid "REGION");
    Parsetree.Error {name = "BadRegion"; number = 0; fields = []};
    Parsetree.Enum {name = "Region";
      items = [("None", (Parsetree.Item_value 0L))]; doc = None};
    Parsetree.Request {name = "CreateRegion"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "region";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }};
        Parsetree.Field_list {name = "rectangles";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "RECTANGLE" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateRegionFromBitmap"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "region";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }};
        Parsetree.Field {name = "bitmap";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PIXMAP" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateRegionFromWindow"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "region";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "kind";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "shape"); id_name = "KIND" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SK" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateRegionFromGC"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "region";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }};
        Parsetree.Field {name = "gc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GCONTEXT" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateRegionFromPicture"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "region";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }};
        Parsetree.Field {name = "picture";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PICTURE" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DestroyRegion"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "region";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SetRegion"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "region";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }};
        Parsetree.Field_list {name = "rectangles";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "RECTANGLE" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CopyRegion"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "source";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }};
        Parsetree.Field {name = "destination";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "UnionRegion"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "source1";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }};
        Parsetree.Field {name = "source2";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed = None }};
        Parsetree.Field {name = "destination";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "IntersectRegion"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "source1";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }};
        Parsetree.Field {name = "source2";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed = None }};
        Parsetree.Field {name = "destination";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SubtractRegion"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "source1";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }};
        Parsetree.Field {name = "source2";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed = None }};
        Parsetree.Field {name = "destination";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "InvertRegion"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "source";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }};
        Parsetree.Field {name = "bounds";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "RECTANGLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "destination";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "TranslateRegion"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "region";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }};
        Parsetree.Field {name = "dx";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "dy";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "RegionExtents"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "source";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }};
        Parsetree.Field {name = "destination";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "FetchRegion"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "region";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "extents";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "RECTANGLE" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false};
                Parsetree.Field_list {name = "rectangles";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "RECTANGLE" });
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Div,
                           (Parsetree.Field_ref "length"),
                           (Parsetree.Expr_value 2L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetGCClipRegion"; opcode = 20;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "gc";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "GCONTEXT" });
           ft_allowed = None }};
        Parsetree.Field {name = "region";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Region" }))
            }};
        Parsetree.Field {name = "x_origin";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y_origin";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SetWindowShapeRegion"; opcode = 21;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "dest";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "dest_kind";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = (Some "shape"); id_name = "KIND" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SK" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "x_offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y_offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "region";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Region" }))
            }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SetPictureClipRegion"; opcode = 22;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "picture";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PICTURE" });
           ft_allowed = None }};
        Parsetree.Field {name = "region";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Region" }))
            }};
        Parsetree.Field {name = "x_origin";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "y_origin";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SetCursorName"; opcode = 23;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "cursor";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CURSOR" });
           ft_allowed = None }};
        Parsetree.Field {name = "nbytes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "name";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nbytes"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetCursorName"; opcode = 24;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "cursor";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CURSOR" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "atom";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ATOM" });
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None; id_name = "Atom" }))
                    }};
                Parsetree.Field {name = "nbytes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 18);
                  serialize = false};
                Parsetree.Field_list {name = "name";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nbytes"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetCursorImageAndName"; opcode = 25;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "x";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "y";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "xhot";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "yhot";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "cursor_serial";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "cursor_atom";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ATOM" });
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None; id_name = "Atom" }))
                    }};
                Parsetree.Field {name = "nbytes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                  serialize = false};
                Parsetree.Field_list {name = "cursor_image";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "width"),
                           (Parsetree.Field_ref "height"))))};
                Parsetree.Field_list {name = "name";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nbytes"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ChangeCursor"; opcode = 26;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "source";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CURSOR" });
           ft_allowed = None }};
        Parsetree.Field {name = "destination";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CURSOR" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "ChangeCursorByName"; opcode = 27;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "src";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CURSOR" });
           ft_allowed = None }};
        Parsetree.Field {name = "nbytes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "name";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nbytes"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "ExpandRegion"; opcode = 28;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "source";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "REGION" });
           ft_allowed = None }};
        Parsetree.Field {name = "destination";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "REGION" });
            ft_allowed = None }};
        Parsetree.Field {name = "left";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "right";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "top";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "bottom";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "HideCursor"; opcode = 29;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "ShowCursor"; opcode = 30;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    (Parsetree.Xid "BARRIER");
    Parsetree.Enum {name = "BarrierDirections";
      items =
      [("PositiveX", (Parsetree.Item_bit 0));
        ("PositiveY", (Parsetree.Item_bit 1));
        ("NegativeX", (Parsetree.Item_bit 2));
        ("NegativeY", (Parsetree.Item_bit 3))];
      doc = None};
    Parsetree.Request {name = "CreatePointerBarrier"; opcode = 31;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "barrier";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "BARRIER" });
           ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "x1";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "y1";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "x2";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "y2";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "directions";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None;
                       id_name = "BarrierDirections" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "num_devices";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "devices";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_devices"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DeletePointerBarrier"; opcode = 32;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "barrier";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "BARRIER" });
           ft_allowed = None }}
        ];
      reply = None; doc = None}
    ]}
Parsetree.Extension {name = "Xinerama"; file_name = "xinerama";
  query_name = "XINERAMA"; multiword = false; version = (1, 1);
  declarations =
  [(Parsetree.Import "xproto");
    Parsetree.Struct {name = "ScreenInfo";
      fields =
      [Parsetree.Field {name = "x_org";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
           ft_allowed = None }};
        Parsetree.Field {name = "y_org";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "major";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "minor";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetState"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "state";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Byte);
                   ft_allowed = None }};
                Parsetree.Field {name = "window";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "WINDOW" });
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetScreenCount"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "screen_count";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Byte);
                   ft_allowed = None }};
                Parsetree.Field {name = "window";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "WINDOW" });
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetScreenSize"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "screen";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "window";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "WINDOW" });
                    ft_allowed = None }};
                Parsetree.Field {name = "screen";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "IsActive"; opcode = 4;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "state";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryScreens"; opcode = 5;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "number";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "screen_info";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ScreenInfo" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "number"))}
                ];
              doc = None });
      doc = None}
    ]}
Parsetree.Extension {name = "Input"; file_name = "xinput";
  query_name = "XInputExtension"; multiword = false; version = (2, 3);
  declarations =
  [(Parsetree.Import "xfixes"); (Parsetree.Import "xproto");
    Parsetree.Typedef {name = "EventClass";
      type_ = (Parsetree.Type_primitive Parsetree.Card32)};
    Parsetree.Typedef {name = "KeyCode";
      type_ = (Parsetree.Type_primitive Parsetree.Card8)};
    Parsetree.Typedef {name = "DeviceId";
      type_ = (Parsetree.Type_primitive Parsetree.Card16)};
    Parsetree.Typedef {name = "FP1616";
      type_ = (Parsetree.Type_primitive Parsetree.Int32)};
    Parsetree.Struct {name = "FP3232";
      fields =
      [Parsetree.Field {name = "integral";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
           ft_allowed = None }};
        Parsetree.Field {name = "frac";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Request {name = "GetExtensionVersion"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "name_len";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "name";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "name_len"))}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "server_major";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "server_minor";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "present";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 19);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "DeviceUse";
      items =
      [("IsXPointer", (Parsetree.Item_value 0L));
        ("IsXKeyboard", (Parsetree.Item_value 1L));
        ("IsXExtensionDevice", (Parsetree.Item_value 2L));
        ("IsXExtensionKeyboard", (Parsetree.Item_value 3L));
        ("IsXExtensionPointer", (Parsetree.Item_value 4L))];
      doc = None};
    Parsetree.Enum {name = "InputClass";
      items =
      [("Key", (Parsetree.Item_value 0L));
        ("Button", (Parsetree.Item_value 1L));
        ("Valuator", (Parsetree.Item_value 2L));
        ("Feedback", (Parsetree.Item_value 3L));
        ("Proximity", (Parsetree.Item_value 4L));
        ("Focus", (Parsetree.Item_value 5L));
        ("Other", (Parsetree.Item_value 6L))];
      doc = None};
    Parsetree.Enum {name = "ValuatorMode";
      items =
      [("Relative", (Parsetree.Item_value 0L));
        ("Absolute", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Struct {name = "DeviceInfo";
      fields =
      [Parsetree.Field {name = "device_type";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ATOM" });
           ft_allowed = None }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "num_class_info";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "device_use";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "DeviceUse" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false}
        ]};
    Parsetree.Struct {name = "KeyInfo";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "InputClass" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "min_keycode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KeyCode" });
            ft_allowed = None }};
        Parsetree.Field {name = "max_keycode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KeyCode" });
            ft_allowed = None }};
        Parsetree.Field {name = "num_keys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ]};
    Parsetree.Struct {name = "ButtonInfo";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "InputClass" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "num_buttons";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "AxisInfo";
      fields =
      [Parsetree.Field {name = "resolution";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "minimum";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "maximum";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "ValuatorInfo";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "InputClass" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "axes_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ValuatorMode" }))
            }};
        Parsetree.Field {name = "motion_size";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "axes";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "AxisInfo" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "axes_len"))}
        ]};
    Parsetree.Struct {name = "InputInfo";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "InputClass" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "info";
             sw_cond = (Parsetree.Cond_eq (Parsetree.Field_ref "class_id"));
             sw_cases =
             [{ Parsetree.cs_name = (Some "key");
                cs_cond =
                [Parsetree.Enum_ref {
                   enum =
                   { Parsetree.id_module = None; id_name = "InputClass" };
                   item = "Key"}
                  ];
                cs_fields =
                [Parsetree.Field {name = "min_keycode";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "KeyCode" });
                     ft_allowed = None }};
                  Parsetree.Field {name = "max_keycode";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "KeyCode" });
                      ft_allowed = None }};
                  Parsetree.Field {name = "num_keys";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card16);
                      ft_allowed = None }};
                  Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                    serialize = false}
                  ]
                };
               { Parsetree.cs_name = (Some "button");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "InputClass" };
                    item = "Button"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "num_buttons";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card16);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = (Some "valuator");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "InputClass" };
                    item = "Valuator"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "axes_len";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None }};
                   Parsetree.Field {name = "mode";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card8);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "ValuatorMode" }))
                       }};
                   Parsetree.Field {name = "motion_size";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }};
                   Parsetree.Field_list {name = "axes";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "AxisInfo"
                            });
                       ft_allowed = None };
                     length = (Some (Parsetree.Field_ref "axes_len"))}
                   ]
                 }
               ]
             })
        ]};
    Parsetree.Struct {name = "DeviceName";
      fields =
      [Parsetree.Field {name = "len";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field_list {name = "string";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "len"))}
        ]};
    Parsetree.Request {name = "ListInputDevices"; opcode = 2;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "devices_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false};
                Parsetree.Field_list {name = "devices";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "DeviceInfo" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "devices_len"))};
                Parsetree.Field_list {name = "infos";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "InputInfo" });
                    ft_allowed = None };
                  length =
                  (Some Parsetree.Sum_of {field = "devices";
                          by_expr =
                          (Some (Parsetree.Field_ref "num_class_info"))})};
                Parsetree.Field_list {name = "names";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "STR" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "devices_len"))};
                Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Typedef {name = "EventTypeBase";
      type_ = (Parsetree.Type_primitive Parsetree.Card8)};
    Parsetree.Struct {name = "InputClassInfo";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "InputClass" }))
           }};
        Parsetree.Field {name = "event_type_base";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "EventTypeBase" });
            ft_allowed = None }}
        ]};
    Parsetree.Request {name = "OpenDevice"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "num_classes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false};
                Parsetree.Field_list {name = "class_info";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None;
                         id_name = "InputClassInfo" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_classes"))};
                Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "CloseDevice"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SetDeviceMode"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ValuatorMode" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "status";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "GrabStatus" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SelectExtensionEvent"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "num_classes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "classes";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "EventClass" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_classes"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetSelectedExtensionEvents"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "num_this_classes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_all_classes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "this_classes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "EventClass" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_this_classes"))};
                Parsetree.Field_list {name = "all_classes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "EventClass" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_all_classes"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "PropagateMode";
      items =
      [("AddToList", (Parsetree.Item_value 0L));
        ("DeleteFromList", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Request {name = "ChangeDeviceDontPropagateList"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "num_classes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "PropagateMode"
                       }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field_list {name = "classes";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "EventClass" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_classes"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetDeviceDontPropagateList"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "num_classes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false};
                Parsetree.Field_list {name = "classes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "EventClass" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_classes"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Struct {name = "DeviceTimeCoord";
      fields =
      [Parsetree.Field {name = "time";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "TIMESTAMP" });
           ft_allowed = None }};
        Parsetree.Field_list {name = "axisvalues";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None };
          length =
          (Some Parsetree.Param_ref {param = "num_axes";
                  type_ = (Parsetree.Type_primitive Parsetree.Card8)})}
        ]};
    Parsetree.Request {name = "GetDeviceMotionEvents"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "start";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "TIMESTAMP" });
           ft_allowed = None }};
        Parsetree.Field {name = "stop";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "num_events";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_axes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "device_mode";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "ValuatorMode" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 18);
                  serialize = false};
                Parsetree.Field_list {name = "events";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None;
                         id_name = "DeviceTimeCoord" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_events"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ChangeKeyboardDevice"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "status";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "GrabStatus" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ChangePointerDevice"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "x_axis";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "y_axis";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "status";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "GrabStatus" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GrabDevice"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "grab_window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "num_classes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "this_device_mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "GrabMode" }))
            }};
        Parsetree.Field {name = "other_device_mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "GrabMode" }))
            }};
        Parsetree.Field {name = "owner_events";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "classes";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "EventClass" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_classes"))}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "status";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "GrabStatus" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "UngrabDevice"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "time";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "TIMESTAMP" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Time" }))
           }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Enum {name = "ModifierDevice";
      items = [("UseXKeyboard", (Parsetree.Item_value 255L))]; doc = None};
    Parsetree.Request {name = "GrabDeviceKey"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "grab_window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "num_classes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "modifiers";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "modifier_device";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ModifierDevice"
                       }))
            }};
        Parsetree.Field {name = "grabbed_device";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "key";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Grab" }))
            }};
        Parsetree.Field {name = "this_device_mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "GrabMode" }))
            }};
        Parsetree.Field {name = "other_device_mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "GrabMode" }))
            }};
        Parsetree.Field {name = "owner_events";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "classes";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "EventClass" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_classes"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "UngrabDeviceKey"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "grabWindow";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "modifiers";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "modifier_device";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ModifierDevice"
                       }))
            }};
        Parsetree.Field {name = "key";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Grab" }))
            }};
        Parsetree.Field {name = "grabbed_device";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GrabDeviceButton"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "grab_window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "grabbed_device";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "modifier_device";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ModifierDevice"
                       }))
            }};
        Parsetree.Field {name = "num_classes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "modifiers";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "this_device_mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "GrabMode" }))
            }};
        Parsetree.Field {name = "other_device_mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "GrabMode" }))
            }};
        Parsetree.Field {name = "button";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Grab" }))
            }};
        Parsetree.Field {name = "owner_events";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "classes";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "EventClass" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_classes"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "UngrabDeviceButton"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "grab_window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "modifiers";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "modifier_device";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ModifierDevice"
                       }))
            }};
        Parsetree.Field {name = "button";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Grab" }))
            }};
        Parsetree.Field {name = "grabbed_device";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Enum {name = "DeviceInputMode";
      items =
      [("AsyncThisDevice", (Parsetree.Item_value 0L));
        ("SyncThisDevice", (Parsetree.Item_value 1L));
        ("ReplayThisDevice", (Parsetree.Item_value 2L));
        ("AsyncOtherDevices", (Parsetree.Item_value 3L));
        ("AsyncAll", (Parsetree.Item_value 4L));
        ("SyncAll", (Parsetree.Item_value 5L))];
      doc = None};
    Parsetree.Request {name = "AllowDeviceEvents"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "time";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "TIMESTAMP" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Time" }))
           }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None;
                       id_name = "DeviceInputMode" }))
            }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetDeviceFocus"; opcode = 20;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "focus";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "WINDOW" });
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "InputFocus" }))
                    }};
                Parsetree.Field {name = "time";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "TIMESTAMP" });
                    ft_allowed = None }};
                Parsetree.Field {name = "revert_to";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "InputFocus" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 15);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetDeviceFocus"; opcode = 21;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "focus";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "InputFocus" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "revert_to";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "InputFocus" }))
            }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Enum {name = "FeedbackClass";
      items =
      [("Keyboard", (Parsetree.Item_value 0L));
        ("Pointer", (Parsetree.Item_value 1L));
        ("String", (Parsetree.Item_value 2L));
        ("Integer", (Parsetree.Item_value 3L));
        ("Led", (Parsetree.Item_value 4L));
        ("Bell", (Parsetree.Item_value 5L))];
      doc = None};
    Parsetree.Struct {name = "KbdFeedbackState";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "FeedbackClass" }))
           }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "pitch";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "duration";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "led_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "led_values";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "global_auto_repeat";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "click";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "percent";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field_list {name = "auto_repeats";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 32L))}
        ]};
    Parsetree.Struct {name = "PtrFeedbackState";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "FeedbackClass" }))
           }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "accel_num";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "accel_denom";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "threshold";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "IntegerFeedbackState";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "FeedbackClass" }))
           }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "resolution";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "min_value";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "max_value";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "StringFeedbackState";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "FeedbackClass" }))
           }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "max_symbols";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "num_keysyms";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "keysyms";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYSYM" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_keysyms"))}
        ]};
    Parsetree.Struct {name = "BellFeedbackState";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "FeedbackClass" }))
           }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "percent";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "pitch";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "duration";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "LedFeedbackState";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "FeedbackClass" }))
           }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "led_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "led_values";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "FeedbackState";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "FeedbackClass" }))
           }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "data";
             sw_cond = (Parsetree.Cond_eq (Parsetree.Field_ref "class_id"));
             sw_cases =
             [{ Parsetree.cs_name = (Some "keyboard");
                cs_cond =
                [Parsetree.Enum_ref {
                   enum =
                   { Parsetree.id_module = None; id_name = "FeedbackClass" };
                   item = "Keyboard"}
                  ];
                cs_fields =
                [Parsetree.Field {name = "pitch";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                  Parsetree.Field {name = "duration";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card16);
                      ft_allowed = None }};
                  Parsetree.Field {name = "led_mask";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }};
                  Parsetree.Field {name = "led_values";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }};
                  Parsetree.Field {name = "global_auto_repeat";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Bool);
                      ft_allowed = None }};
                  Parsetree.Field {name = "click";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None }};
                  Parsetree.Field {name = "percent";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None }};
                  Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                    serialize = false};
                  Parsetree.Field_list {name = "auto_repeats";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None };
                    length = (Some (Parsetree.Expr_value 32L))}
                  ]
                };
               { Parsetree.cs_name = (Some "pointer");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "FeedbackClass" };
                    item = "Pointer"}
                   ];
                 cs_fields =
                 [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                    serialize = false};
                   Parsetree.Field {name = "accel_num";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card16);
                       ft_allowed = None }};
                   Parsetree.Field {name = "accel_denom";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card16);
                       ft_allowed = None }};
                   Parsetree.Field {name = "threshold";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card16);
                       ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = (Some "string");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "FeedbackClass" };
                    item = "String"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "max_symbols";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card16);
                      ft_allowed = None }};
                   Parsetree.Field {name = "num_keysyms";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card16);
                       ft_allowed = None }};
                   Parsetree.Field_list {name = "keysyms";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "KEYSYM" });
                       ft_allowed = None };
                     length = (Some (Parsetree.Field_ref "num_keysyms"))}
                   ]
                 };
               { Parsetree.cs_name = (Some "integer");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "FeedbackClass" };
                    item = "Integer"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "resolution";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }};
                   Parsetree.Field {name = "min_value";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "max_value";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = (Some "led");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "FeedbackClass" };
                    item = "Led"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "led_mask";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }};
                   Parsetree.Field {name = "led_values";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = (Some "bell");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "FeedbackClass" };
                    item = "Bell"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "percent";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None }};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
                     serialize = false};
                   Parsetree.Field {name = "pitch";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card16);
                       ft_allowed = None }};
                   Parsetree.Field {name = "duration";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card16);
                       ft_allowed = None }}
                   ]
                 }
               ]
             })
        ]};
    Parsetree.Request {name = "GetFeedbackControl"; opcode = 22;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "num_feedbacks";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false};
                Parsetree.Field_list {name = "feedbacks";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None;
                         id_name = "FeedbackState" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_feedbacks"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Struct {name = "KbdFeedbackCtl";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "FeedbackClass" }))
           }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "key";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KeyCode" });
            ft_allowed = None }};
        Parsetree.Field {name = "auto_repeat_mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "key_click_percent";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int8);
            ft_allowed = None }};
        Parsetree.Field {name = "bell_percent";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int8);
            ft_allowed = None }};
        Parsetree.Field {name = "bell_pitch";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "bell_duration";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "led_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "led_values";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "PtrFeedbackCtl";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "FeedbackClass" }))
           }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "num";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "denom";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "threshold";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "IntegerFeedbackCtl";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "FeedbackClass" }))
           }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "int_to_display";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "StringFeedbackCtl";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "FeedbackClass" }))
           }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "num_keysyms";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "keysyms";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYSYM" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_keysyms"))}
        ]};
    Parsetree.Struct {name = "BellFeedbackCtl";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "FeedbackClass" }))
           }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "percent";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "pitch";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "duration";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "LedFeedbackCtl";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "FeedbackClass" }))
           }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "led_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "led_values";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "FeedbackCtl";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "FeedbackClass" }))
           }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "data";
             sw_cond = (Parsetree.Cond_eq (Parsetree.Field_ref "class_id"));
             sw_cases =
             [{ Parsetree.cs_name = (Some "keyboard");
                cs_cond =
                [Parsetree.Enum_ref {
                   enum =
                   { Parsetree.id_module = None; id_name = "FeedbackClass" };
                   item = "Keyboard"}
                  ];
                cs_fields =
                [Parsetree.Field {name = "key";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "KeyCode" });
                     ft_allowed = None }};
                  Parsetree.Field {name = "auto_repeat_mode";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None }};
                  Parsetree.Field {name = "key_click_percent";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int8);
                      ft_allowed = None }};
                  Parsetree.Field {name = "bell_percent";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int8);
                      ft_allowed = None }};
                  Parsetree.Field {name = "bell_pitch";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int16);
                      ft_allowed = None }};
                  Parsetree.Field {name = "bell_duration";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int16);
                      ft_allowed = None }};
                  Parsetree.Field {name = "led_mask";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }};
                  Parsetree.Field {name = "led_values";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }}
                  ]
                };
               { Parsetree.cs_name = (Some "pointer");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "FeedbackClass" };
                    item = "Pointer"}
                   ];
                 cs_fields =
                 [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                    serialize = false};
                   Parsetree.Field {name = "num";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int16);
                       ft_allowed = None }};
                   Parsetree.Field {name = "denom";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int16);
                       ft_allowed = None }};
                   Parsetree.Field {name = "threshold";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int16);
                       ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = (Some "string");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "FeedbackClass" };
                    item = "String"}
                   ];
                 cs_fields =
                 [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                    serialize = false};
                   Parsetree.Field {name = "num_keysyms";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card16);
                       ft_allowed = None }};
                   Parsetree.Field_list {name = "keysyms";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "KEYSYM" });
                       ft_allowed = None };
                     length = (Some (Parsetree.Field_ref "num_keysyms"))}
                   ]
                 };
               { Parsetree.cs_name = (Some "integer");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "FeedbackClass" };
                    item = "Integer"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "int_to_display";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int32);
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = (Some "led");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "FeedbackClass" };
                    item = "Led"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "led_mask";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }};
                   Parsetree.Field {name = "led_values";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = (Some "bell");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "FeedbackClass" };
                    item = "Bell"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "percent";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int8);
                      ft_allowed = None }};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
                     serialize = false};
                   Parsetree.Field {name = "pitch";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int16);
                       ft_allowed = None }};
                   Parsetree.Field {name = "duration";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int16);
                       ft_allowed = None }}
                   ]
                 }
               ]
             })
        ]};
    Parsetree.Enum {name = "ChangeFeedbackControlMask";
      items =
      [("KeyClickPercent", (Parsetree.Item_bit 0));
        ("Percent", (Parsetree.Item_bit 1));
        ("Pitch", (Parsetree.Item_bit 2));
        ("Duration", (Parsetree.Item_bit 3));
        ("Led", (Parsetree.Item_bit 4)); ("LedMode", (Parsetree.Item_bit 5));
        ("Key", (Parsetree.Item_bit 6));
        ("AutoRepeatMode", (Parsetree.Item_bit 7));
        ("String", (Parsetree.Item_bit 0));
        ("Integer", (Parsetree.Item_bit 0));
        ("AccelNum", (Parsetree.Item_bit 0));
        ("AccelDenom", (Parsetree.Item_bit 1));
        ("Threshold", (Parsetree.Item_bit 2))];
      doc = None};
    Parsetree.Request {name = "ChangeFeedbackControl"; opcode = 23;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "mask";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed =
           (Some (Parsetree.Allowed_mask
                    { Parsetree.id_module = None;
                      id_name = "ChangeFeedbackControlMask" }))
           }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "feedback";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FeedbackCtl" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetDeviceKeyMapping"; opcode = 24;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "first_keycode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KeyCode" });
            ft_allowed = None }};
        Parsetree.Field {name = "count";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "keysyms_per_keycode";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false};
                Parsetree.Field_list {name = "keysyms";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "KEYSYM" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "length"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ChangeDeviceKeyMapping"; opcode = 25;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "first_keycode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KeyCode" });
            ft_allowed = None }};
        Parsetree.Field {name = "keysyms_per_keycode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "keycode_count";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_list {name = "keysyms";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYSYM" });
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Mul,
                   (Parsetree.Field_ref "keycode_count"),
                   (Parsetree.Field_ref "keysyms_per_keycode"))))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetDeviceModifierMapping"; opcode = 26;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "keycodes_per_modifier";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false};
                Parsetree.Field_list {name = "keymaps";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Binop (Parsetree.Mul,
                           (Parsetree.Field_ref "keycodes_per_modifier"),
                           (Parsetree.Expr_value 8L))))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetDeviceModifierMapping"; opcode = 27;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "keycodes_per_modifier";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "keymaps";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Mul,
                   (Parsetree.Field_ref "keycodes_per_modifier"),
                   (Parsetree.Expr_value 8L))))}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "status";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "MappingStatus" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetDeviceButtonMapping"; opcode = 28;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "map_size";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false};
                Parsetree.Field_list {name = "map";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "map_size"))};
                Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetDeviceButtonMapping"; opcode = 29;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "map_size";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "map";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "map_size"))}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "status";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "MappingStatus" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Struct {name = "KeyState";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "InputClass" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "num_keys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field_list {name = "keys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 32L))}
        ]};
    Parsetree.Struct {name = "ButtonState";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "InputClass" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "num_buttons";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field_list {name = "buttons";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 32L))}
        ]};
    Parsetree.Enum {name = "ValuatorStateModeMask";
      items =
      [("DeviceModeAbsolute", (Parsetree.Item_bit 0));
        ("OutOfProximity", (Parsetree.Item_bit 1))];
      doc = None};
    Parsetree.Struct {name = "ValuatorState";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "InputClass" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "num_valuators";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None;
                       id_name = "ValuatorStateModeMask" }))
            }};
        Parsetree.Field_list {name = "valuators";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_valuators"))}
        ]};
    Parsetree.Struct {name = "InputState";
      fields =
      [Parsetree.Field {name = "class_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "InputClass" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "data";
             sw_cond = (Parsetree.Cond_eq (Parsetree.Field_ref "class_id"));
             sw_cases =
             [{ Parsetree.cs_name = (Some "key");
                cs_cond =
                [Parsetree.Enum_ref {
                   enum =
                   { Parsetree.id_module = None; id_name = "InputClass" };
                   item = "Key"}
                  ];
                cs_fields =
                [Parsetree.Field {name = "num_keys";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None }};
                  Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                    serialize = false};
                  Parsetree.Field_list {name = "keys";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None };
                    length = (Some (Parsetree.Expr_value 32L))}
                  ]
                };
               { Parsetree.cs_name = (Some "button");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "InputClass" };
                    item = "Button"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "num_buttons";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None }};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                     serialize = false};
                   Parsetree.Field_list {name = "buttons";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card8);
                       ft_allowed = None };
                     length = (Some (Parsetree.Expr_value 32L))}
                   ]
                 };
               { Parsetree.cs_name = (Some "valuator");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "InputClass" };
                    item = "Valuator"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "num_valuators";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None }};
                   Parsetree.Field {name = "mode";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card8);
                       ft_allowed =
                       (Some (Parsetree.Allowed_mask
                                { Parsetree.id_module = None;
                                  id_name = "ValuatorStateModeMask" }))
                       }};
                   Parsetree.Field_list {name = "valuators";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None };
                     length = (Some (Parsetree.Field_ref "num_valuators"))}
                   ]
                 }
               ]
             })
        ]};
    Parsetree.Request {name = "QueryDeviceState"; opcode = 30;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "num_classes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false};
                Parsetree.Field_list {name = "classes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "InputState" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_classes"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "DeviceBell"; opcode = 32;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "feedback_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "feedback_class";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "percent";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int8);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SetDeviceValuators"; opcode = 33;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "first_valuator";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "num_valuators";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field_list {name = "valuators";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_valuators"))}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "status";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "GrabStatus" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "DeviceControl";
      items =
      [("resolution", (Parsetree.Item_value 1L));
        ("abs_calib", (Parsetree.Item_value 2L));
        ("core", (Parsetree.Item_value 3L));
        ("enable", (Parsetree.Item_value 4L));
        ("abs_area", (Parsetree.Item_value 5L))];
      doc = None};
    Parsetree.Struct {name = "DeviceResolutionState";
      fields =
      [Parsetree.Field {name = "control_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceControl" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "num_valuators";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "resolution_values";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_valuators"))};
        Parsetree.Field_list {name = "resolution_min";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_valuators"))};
        Parsetree.Field_list {name = "resolution_max";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_valuators"))}
        ]};
    Parsetree.Struct {name = "DeviceAbsCalibState";
      fields =
      [Parsetree.Field {name = "control_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceControl" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "min_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "max_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "min_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "max_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "flip_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "flip_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "rotation";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "button_threshold";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "DeviceAbsAreaState";
      fields =
      [Parsetree.Field {name = "control_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceControl" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "offset_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "offset_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "screen";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "following";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "DeviceCoreState";
      fields =
      [Parsetree.Field {name = "control_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceControl" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "status";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "iscore";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ]};
    Parsetree.Struct {name = "DeviceEnableState";
      fields =
      [Parsetree.Field {name = "control_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceControl" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "enable";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ]};
    Parsetree.Struct {name = "DeviceState";
      fields =
      [Parsetree.Field {name = "control_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceControl" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "data";
             sw_cond = (Parsetree.Cond_eq (Parsetree.Field_ref "control_id"));
             sw_cases =
             [{ Parsetree.cs_name = (Some "resolution");
                cs_cond =
                [Parsetree.Enum_ref {
                   enum =
                   { Parsetree.id_module = None; id_name = "DeviceControl" };
                   item = "resolution"}
                  ];
                cs_fields =
                [Parsetree.Field {name = "num_valuators";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None }};
                  Parsetree.Field_list {name = "resolution_values";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "num_valuators"))};
                  Parsetree.Field_list {name = "resolution_min";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "num_valuators"))};
                  Parsetree.Field_list {name = "resolution_max";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "num_valuators"))}
                  ]
                };
               { Parsetree.cs_name = (Some "abs_calib");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "DeviceControl" };
                    item = "abs_calib"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "min_x";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int32);
                      ft_allowed = None }};
                   Parsetree.Field {name = "max_x";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "min_y";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "max_y";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "flip_x";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "flip_y";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "rotation";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "button_threshold";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = (Some "core");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "DeviceControl" };
                    item = "core"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "status";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None }};
                   Parsetree.Field {name = "iscore";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card8);
                       ft_allowed = None }};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                     serialize = false}
                   ]
                 };
               { Parsetree.cs_name = (Some "enable");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "DeviceControl" };
                    item = "enable"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "enable";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None }};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
                     serialize = false}
                   ]
                 };
               { Parsetree.cs_name = (Some "abs_area");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "DeviceControl" };
                    item = "abs_area"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "offset_x";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }};
                   Parsetree.Field {name = "offset_y";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "width";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "height";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "screen";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "following";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                   ]
                 }
               ]
             })
        ]};
    Parsetree.Request {name = "GetDeviceControl"; opcode = 34;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "control_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceControl" }))
           }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "status";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "GrabStatus" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false};
                Parsetree.Field {name = "control";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "DeviceState"
                         });
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Struct {name = "DeviceResolutionCtl";
      fields =
      [Parsetree.Field {name = "control_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceControl" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "first_valuator";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "num_valuators";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "resolution_values";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_valuators"))}
        ]};
    Parsetree.Struct {name = "DeviceAbsCalibCtl";
      fields =
      [Parsetree.Field {name = "control_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceControl" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "min_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "max_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "min_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "max_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "flip_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "flip_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "rotation";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "button_threshold";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "DeviceAbsAreaCtrl";
      fields =
      [Parsetree.Field {name = "control_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceControl" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "offset_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "offset_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "screen";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "following";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "DeviceCoreCtrl";
      fields =
      [Parsetree.Field {name = "control_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceControl" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "status";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ]};
    Parsetree.Struct {name = "DeviceEnableCtrl";
      fields =
      [Parsetree.Field {name = "control_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceControl" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "enable";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ]};
    Parsetree.Struct {name = "DeviceCtl";
      fields =
      [Parsetree.Field {name = "control_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceControl" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "data";
             sw_cond = (Parsetree.Cond_eq (Parsetree.Field_ref "control_id"));
             sw_cases =
             [{ Parsetree.cs_name = (Some "resolution");
                cs_cond =
                [Parsetree.Enum_ref {
                   enum =
                   { Parsetree.id_module = None; id_name = "DeviceControl" };
                   item = "resolution"}
                  ];
                cs_fields =
                [Parsetree.Field {name = "first_valuator";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None }};
                  Parsetree.Field {name = "num_valuators";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None }};
                  Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                    serialize = false};
                  Parsetree.Field_list {name = "resolution_values";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "num_valuators"))}
                  ]
                };
               { Parsetree.cs_name = (Some "abs_calib");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "DeviceControl" };
                    item = "abs_calib"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "min_x";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int32);
                      ft_allowed = None }};
                   Parsetree.Field {name = "max_x";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "min_y";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "max_y";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "flip_x";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "flip_y";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "rotation";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "button_threshold";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = (Some "core");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "DeviceControl" };
                    item = "core"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "status";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None }};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
                     serialize = false}
                   ]
                 };
               { Parsetree.cs_name = (Some "enable");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "DeviceControl" };
                    item = "enable"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "enable";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None }};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
                     serialize = false}
                   ]
                 };
               { Parsetree.cs_name = (Some "abs_area");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "DeviceControl" };
                    item = "abs_area"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "offset_x";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }};
                   Parsetree.Field {name = "offset_y";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "width";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "height";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "screen";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "following";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                   ]
                 }
               ]
             })
        ]};
    Parsetree.Request {name = "ChangeDeviceControl"; opcode = 35;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "control_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceControl" }))
           }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "control";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceCtl" });
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "status";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "GrabStatus" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ListDeviceProperties"; opcode = 36;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "num_atoms";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false};
                Parsetree.Field_list {name = "atoms";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ATOM" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_atoms"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "PropertyFormat";
      items =
      [("8Bits", (Parsetree.Item_value 8L));
        ("16Bits", (Parsetree.Item_value 16L));
        ("32Bits", (Parsetree.Item_value 32L))];
      doc = None};
    Parsetree.Request {name = "ChangeDeviceProperty"; opcode = 37;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "property";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ATOM" });
           ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "PropertyFormat"
                       }))
            }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "PropMode" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "num_items";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "items";
             sw_cond = (Parsetree.Cond_eq (Parsetree.Field_ref "format"));
             sw_cases =
             [{ Parsetree.cs_name = None;
                cs_cond =
                [Parsetree.Enum_ref {
                   enum =
                   { Parsetree.id_module = None; id_name = "PropertyFormat" };
                   item = "8Bits"}
                  ];
                cs_fields =
                [Parsetree.Field_list {name = "data8";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "num_items"))};
                  Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                    serialize = false}
                  ]
                };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "PropertyFormat"
                      };
                    item = "16Bits"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "data16";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card16);
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "num_items"))};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                     serialize = false}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "PropertyFormat"
                      };
                    item = "32Bits"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "data32";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "num_items"))}
                   ]
                 }
               ]
             })
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "DeleteDeviceProperty"; opcode = 38;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "property";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ATOM" });
           ft_allowed = None }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetDeviceProperty"; opcode = 39;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "property";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ATOM" });
           ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "delete";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "xi_reply_type";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "type";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ATOM" });
                    ft_allowed = None }};
                Parsetree.Field {name = "bytes_after";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_items";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "format";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "PropertyFormat" }))
                    }};
                Parsetree.Field {name = "device_id";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 10);
                  serialize = false};
                (Parsetree.Field_switch
                   { Parsetree.sw_name = "items";
                     sw_cond =
                     (Parsetree.Cond_eq (Parsetree.Field_ref "format"));
                     sw_cases =
                     [{ Parsetree.cs_name = None;
                        cs_cond =
                        [Parsetree.Enum_ref {
                           enum =
                           { Parsetree.id_module = None;
                             id_name = "PropertyFormat" };
                           item = "8Bits"}
                          ];
                        cs_fields =
                        [Parsetree.Field_list {name = "data8";
                           type_ =
                           { Parsetree.ft_type =
                             (Parsetree.Type_primitive Parsetree.Card8);
                             ft_allowed = None };
                           length = (Some (Parsetree.Field_ref "num_items"))};
                          Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                            serialize = false}
                          ]
                        };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "PropertyFormat" };
                            item = "16Bits"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "data16";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card16);
                              ft_allowed = None };
                            length = (Some (Parsetree.Field_ref "num_items"))};
                           Parsetree.Field_pad {
                             pad = (Parsetree.Pad_align 4); serialize = false}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "PropertyFormat" };
                            item = "32Bits"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "data32";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card32);
                              ft_allowed = None };
                            length = (Some (Parsetree.Field_ref "num_items"))}
                           ]
                         }
                       ]
                     })
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "Device";
      items =
      [("All", (Parsetree.Item_value 0L));
        ("AllMaster", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Struct {name = "GroupInfo";
      fields =
      [Parsetree.Field {name = "base";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "latched";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "locked";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "effective";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "ModifierInfo";
      fields =
      [Parsetree.Field {name = "base";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "latched";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "locked";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "effective";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Request {name = "XIQueryPointer"; opcode = 40;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "deviceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "root";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "WINDOW" });
                    ft_allowed = None }};
                Parsetree.Field {name = "child";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "WINDOW" });
                    ft_allowed = None }};
                Parsetree.Field {name = "root_x";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FP1616" });
                    ft_allowed = None }};
                Parsetree.Field {name = "root_y";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FP1616" });
                    ft_allowed = None }};
                Parsetree.Field {name = "win_x";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FP1616" });
                    ft_allowed = None }};
                Parsetree.Field {name = "win_y";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "FP1616" });
                    ft_allowed = None }};
                Parsetree.Field {name = "same_screen";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                Parsetree.Field {name = "buttons_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "mods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ModifierInfo"
                         });
                    ft_allowed = None }};
                Parsetree.Field {name = "group";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "GroupInfo" });
                    ft_allowed = None }};
                Parsetree.Field_list {name = "buttons";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "buttons_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "XIWarpPointer"; opcode = 41;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "src_win";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "dst_win";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "src_x";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "src_y";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "src_width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "dst_x";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "dst_y";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "deviceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "XIChangeCursor"; opcode = 42;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "cursor";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CURSOR" });
            ft_allowed = None }};
        Parsetree.Field {name = "deviceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Enum {name = "HierarchyChangeType";
      items =
      [("AddMaster", (Parsetree.Item_value 1L));
        ("RemoveMaster", (Parsetree.Item_value 2L));
        ("AttachSlave", (Parsetree.Item_value 3L));
        ("DetachSlave", (Parsetree.Item_value 4L))];
      doc = None};
    Parsetree.Enum {name = "ChangeMode";
      items =
      [("Attach", (Parsetree.Item_value 1L));
        ("Float", (Parsetree.Item_value 2L))];
      doc = None};
    Parsetree.Struct {name = "AddMaster";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None;
                      id_name = "HierarchyChangeType" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "name_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "send_core";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "enable";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_list {name = "name";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "name_len"))};
        Parsetree.Field_pad {pad = (Parsetree.Pad_align 4); serialize = false}
        ]};
    Parsetree.Struct {name = "RemoveMaster";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None;
                      id_name = "HierarchyChangeType" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "deviceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field {name = "return_mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ChangeMode" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "return_pointer";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field {name = "return_keyboard";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }}
        ]};
    Parsetree.Struct {name = "AttachSlave";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None;
                      id_name = "HierarchyChangeType" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "deviceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field {name = "master";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }}
        ]};
    Parsetree.Struct {name = "DetachSlave";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None;
                      id_name = "HierarchyChangeType" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "deviceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ]};
    Parsetree.Struct {name = "HierarchyChange";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None;
                      id_name = "HierarchyChangeType" }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "data";
             sw_cond = (Parsetree.Cond_eq (Parsetree.Field_ref "type"));
             sw_cases =
             [{ Parsetree.cs_name = (Some "add_master");
                cs_cond =
                [Parsetree.Enum_ref {
                   enum =
                   { Parsetree.id_module = None;
                     id_name = "HierarchyChangeType" };
                   item = "AddMaster"}
                  ];
                cs_fields =
                [Parsetree.Field {name = "name_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                  Parsetree.Field {name = "send_core";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Bool);
                      ft_allowed = None }};
                  Parsetree.Field {name = "enable";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Bool);
                      ft_allowed = None }};
                  Parsetree.Field_list {name = "name";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Char);
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "name_len"))};
                  Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                    serialize = false}
                  ]
                };
               { Parsetree.cs_name = (Some "remove_master");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None;
                      id_name = "HierarchyChangeType" };
                    item = "RemoveMaster"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "deviceid";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "DeviceId" });
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "Device" }))
                      }};
                   Parsetree.Field {name = "return_mode";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card8);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "ChangeMode" }))
                       }};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                     serialize = false};
                   Parsetree.Field {name = "return_pointer";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "DeviceId"
                            });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Device" }))
                       }};
                   Parsetree.Field {name = "return_keyboard";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "DeviceId"
                            });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Device" }))
                       }}
                   ]
                 };
               { Parsetree.cs_name = (Some "attach_slave");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None;
                      id_name = "HierarchyChangeType" };
                    item = "AttachSlave"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "deviceid";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "DeviceId" });
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "Device" }))
                      }};
                   Parsetree.Field {name = "master";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "DeviceId"
                            });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Device" }))
                       }}
                   ]
                 };
               { Parsetree.cs_name = (Some "detach_slave");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None;
                      id_name = "HierarchyChangeType" };
                    item = "DetachSlave"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "deviceid";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "DeviceId" });
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "Device" }))
                      }};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                     serialize = false}
                   ]
                 }
               ]
             })
        ]};
    Parsetree.Request {name = "XIChangeHierarchy"; opcode = 43;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "num_changes";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field_list {name = "changes";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "HierarchyChange" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_changes"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "XISetClientPointer"; opcode = 44;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "deviceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "XIGetClientPointer"; opcode = 45;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "set";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                Parsetree.Field {name = "deviceid";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "DeviceId" });
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None; id_name = "Device"
                               }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "XIEventMask";
      items =
      [("DeviceChanged", (Parsetree.Item_bit 1));
        ("KeyPress", (Parsetree.Item_bit 2));
        ("KeyRelease", (Parsetree.Item_bit 3));
        ("ButtonPress", (Parsetree.Item_bit 4));
        ("ButtonRelease", (Parsetree.Item_bit 5));
        ("Motion", (Parsetree.Item_bit 6));
        ("Enter", (Parsetree.Item_bit 7)); ("Leave", (Parsetree.Item_bit 8));
        ("FocusIn", (Parsetree.Item_bit 9));
        ("FocusOut", (Parsetree.Item_bit 10));
        ("Hierarchy", (Parsetree.Item_bit 11));
        ("Property", (Parsetree.Item_bit 12));
        ("RawKeyPress", (Parsetree.Item_bit 13));
        ("RawKeyRelease", (Parsetree.Item_bit 14));
        ("RawButtonPress", (Parsetree.Item_bit 15));
        ("RawButtonRelease", (Parsetree.Item_bit 16));
        ("RawMotion", (Parsetree.Item_bit 17));
        ("TouchBegin", (Parsetree.Item_bit 18));
        ("TouchUpdate", (Parsetree.Item_bit 19));
        ("TouchEnd", (Parsetree.Item_bit 20));
        ("TouchOwnership", (Parsetree.Item_bit 21));
        ("RawTouchBegin", (Parsetree.Item_bit 22));
        ("RawTouchUpdate", (Parsetree.Item_bit 23));
        ("RawTouchEnd", (Parsetree.Item_bit 24));
        ("BarrierHit", (Parsetree.Item_bit 25));
        ("BarrierLeave", (Parsetree.Item_bit 26))];
      doc = None};
    Parsetree.Struct {name = "EventMask";
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "mask_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "XIEventMask" }))
            };
          length = (Some (Parsetree.Field_ref "mask_len"))}
        ]};
    Parsetree.Request {name = "XISelectEvents"; opcode = 46;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "num_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "masks";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "EventMask" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_mask"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "XIQueryVersion"; opcode = 47;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field {name = "minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "DeviceClassType";
      items =
      [("Key", (Parsetree.Item_value 0L));
        ("Button", (Parsetree.Item_value 1L));
        ("Valuator", (Parsetree.Item_value 2L));
        ("Scroll", (Parsetree.Item_value 3L));
        ("Touch", (Parsetree.Item_value 8L))];
      doc = None};
    Parsetree.Enum {name = "DeviceType";
      items =
      [("MasterPointer", (Parsetree.Item_value 1L));
        ("MasterKeyboard", (Parsetree.Item_value 2L));
        ("SlavePointer", (Parsetree.Item_value 3L));
        ("SlaveKeyboard", (Parsetree.Item_value 4L));
        ("FloatingSlave", (Parsetree.Item_value 5L))];
      doc = None};
    Parsetree.Enum {name = "ScrollFlags";
      items =
      [("NoEmulation", (Parsetree.Item_bit 0));
        ("Preferred", (Parsetree.Item_bit 1))];
      doc = None};
    Parsetree.Enum {name = "ScrollType";
      items =
      [("Vertical", (Parsetree.Item_value 1L));
        ("Horizontal", (Parsetree.Item_value 2L))];
      doc = None};
    Parsetree.Enum {name = "TouchMode";
      items =
      [("Direct", (Parsetree.Item_value 1L));
        ("Dependent", (Parsetree.Item_value 2L))];
      doc = None};
    Parsetree.Struct {name = "ButtonClass";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceClassType"
                      }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed = None }};
        Parsetree.Field {name = "num_buttons";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "state";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Div,
                   (Parsetree.Binop (Parsetree.Add,
                      (Parsetree.Field_ref "num_buttons"),
                      (Parsetree.Expr_value 31L))),
                   (Parsetree.Expr_value 32L))))};
        Parsetree.Field_list {name = "labels";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_buttons"))}
        ]};
    Parsetree.Struct {name = "KeyClass";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceClassType"
                      }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed = None }};
        Parsetree.Field {name = "num_keys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "keys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_keys"))}
        ]};
    Parsetree.Struct {name = "ScrollClass";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceClassType"
                      }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed = None }};
        Parsetree.Field {name = "number";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "scroll_type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ScrollType" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ScrollFlags" }))
            }};
        Parsetree.Field {name = "increment";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP3232" });
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "TouchClass";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceClassType"
                      }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "TouchMode" }))
            }};
        Parsetree.Field {name = "num_touches";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "ValuatorClass";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceClassType"
                      }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed = None }};
        Parsetree.Field {name = "number";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "label";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "min";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP3232" });
            ft_allowed = None }};
        Parsetree.Field {name = "max";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP3232" });
            ft_allowed = None }};
        Parsetree.Field {name = "value";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP3232" });
            ft_allowed = None }};
        Parsetree.Field {name = "resolution";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ValuatorMode" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ]};
    Parsetree.Struct {name = "DeviceClass";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "DeviceClassType"
                      }))
           }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed = None }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "data";
             sw_cond = (Parsetree.Cond_eq (Parsetree.Field_ref "type"));
             sw_cases =
             [{ Parsetree.cs_name = (Some "key");
                cs_cond =
                [Parsetree.Enum_ref {
                   enum =
                   { Parsetree.id_module = None; id_name = "DeviceClassType"
                     };
                   item = "Key"}
                  ];
                cs_fields =
                [Parsetree.Field {name = "num_keys";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                  Parsetree.Field_list {name = "keys";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "num_keys"))}
                  ]
                };
               { Parsetree.cs_name = (Some "button");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "DeviceClassType"
                      };
                    item = "Button"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "num_buttons";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card16);
                      ft_allowed = None }};
                   Parsetree.Field_list {name = "state";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None };
                     length =
                     (Some (Parsetree.Binop (Parsetree.Div,
                              (Parsetree.Binop (Parsetree.Add,
                                 (Parsetree.Field_ref "num_buttons"),
                                 (Parsetree.Expr_value 31L))),
                              (Parsetree.Expr_value 32L))))};
                   Parsetree.Field_list {name = "labels";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "ATOM" });
                       ft_allowed = None };
                     length = (Some (Parsetree.Field_ref "num_buttons"))}
                   ]
                 };
               { Parsetree.cs_name = (Some "valuator");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "DeviceClassType"
                      };
                    item = "Valuator"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "number";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card16);
                      ft_allowed = None }};
                   Parsetree.Field {name = "label";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "ATOM" });
                       ft_allowed = None }};
                   Parsetree.Field {name = "min";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "FP3232" });
                       ft_allowed = None }};
                   Parsetree.Field {name = "max";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "FP3232" });
                       ft_allowed = None }};
                   Parsetree.Field {name = "value";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "FP3232" });
                       ft_allowed = None }};
                   Parsetree.Field {name = "resolution";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }};
                   Parsetree.Field {name = "mode";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card8);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "ValuatorMode" }))
                       }};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
                     serialize = false}
                   ]
                 };
               { Parsetree.cs_name = (Some "scroll");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "DeviceClassType"
                      };
                    item = "Scroll"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "number";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card16);
                      ft_allowed = None }};
                   Parsetree.Field {name = "scroll_type";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card16);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "ScrollType" }))
                       }};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                     serialize = false};
                   Parsetree.Field {name = "flags";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_mask
                                { Parsetree.id_module = None;
                                  id_name = "ScrollFlags" }))
                       }};
                   Parsetree.Field {name = "increment";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "FP3232" });
                       ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = (Some "touch");
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "DeviceClassType"
                      };
                    item = "Touch"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "mode";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "TouchMode" }))
                      }};
                   Parsetree.Field {name = "num_touches";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card8);
                       ft_allowed = None }}
                   ]
                 }
               ]
             })
        ]};
    Parsetree.Struct {name = "XIDeviceInfo";
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "DeviceType" }))
            }};
        Parsetree.Field {name = "attachment";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field {name = "num_classes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "name_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "enabled";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field_list {name = "name";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "name_len"))};
        Parsetree.Field_pad {pad = (Parsetree.Pad_align 4); serialize = false};
        Parsetree.Field_list {name = "classes";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceClass" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_classes"))}
        ]};
    Parsetree.Request {name = "XIQueryDevice"; opcode = 48;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_infos";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false};
                Parsetree.Field_list {name = "infos";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "XIDeviceInfo"
                         });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_infos"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "XISetFocus"; opcode = 49;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "deviceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "XIGetFocus"; opcode = 50;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "focus";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "WINDOW" });
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "GrabOwner";
      items =
      [("NoOwner", (Parsetree.Item_value 0L));
        ("Owner", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Request {name = "XIGrabDevice"; opcode = 51;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "cursor";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CURSOR" });
            ft_allowed = None }};
        Parsetree.Field {name = "deviceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "GrabMode" }))
            }};
        Parsetree.Field {name = "paired_device_mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "GrabMode" }))
            }};
        Parsetree.Field {name = "owner_events";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "GrabOwner" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "mask_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "mask_len"))}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "status";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "GrabStatus" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "XIUngrabDevice"; opcode = 52;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "time";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "TIMESTAMP" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Time" }))
           }};
        Parsetree.Field {name = "deviceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Enum {name = "EventMode";
      items =
      [("AsyncDevice", (Parsetree.Item_value 0L));
        ("SyncDevice", (Parsetree.Item_value 1L));
        ("ReplayDevice", (Parsetree.Item_value 2L));
        ("AsyncPairedDevice", (Parsetree.Item_value 3L));
        ("AsyncPair", (Parsetree.Item_value 4L));
        ("SyncPair", (Parsetree.Item_value 5L));
        ("AcceptTouch", (Parsetree.Item_value 6L));
        ("RejectTouch", (Parsetree.Item_value 7L))];
      doc = None};
    Parsetree.Request {name = "XIAllowEvents"; opcode = 53;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "time";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "TIMESTAMP" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Time" }))
           }};
        Parsetree.Field {name = "deviceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field {name = "event_mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "EventMode" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "touchid";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "grab_window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Enum {name = "GrabMode22";
      items =
      [("Sync", (Parsetree.Item_value 0L));
        ("Async", (Parsetree.Item_value 1L));
        ("Touch", (Parsetree.Item_value 2L))];
      doc = None};
    Parsetree.Enum {name = "GrabType";
      items =
      [("Button", (Parsetree.Item_value 0L));
        ("Keycode", (Parsetree.Item_value 1L));
        ("Enter", (Parsetree.Item_value 2L));
        ("FocusIn", (Parsetree.Item_value 3L));
        ("TouchBegin", (Parsetree.Item_value 4L))];
      doc = None};
    Parsetree.Enum {name = "ModifierMask";
      items = [("Any", (Parsetree.Item_bit 31))]; doc = None};
    Parsetree.Struct {name = "GrabModifierInfo";
      fields =
      [Parsetree.Field {name = "modifiers";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "ModifierMask" }))
           }};
        Parsetree.Field {name = "status";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "GrabStatus" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ]};
    Parsetree.Request {name = "XIPassiveGrabDevice"; opcode = 54;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "time";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "TIMESTAMP" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Time" }))
           }};
        Parsetree.Field {name = "grab_window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "cursor";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CURSOR" });
            ft_allowed = None }};
        Parsetree.Field {name = "detail";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "deviceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field {name = "num_modifiers";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "mask_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "grab_type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "GrabType" }))
            }};
        Parsetree.Field {name = "grab_mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "GrabMode22" }))
            }};
        Parsetree.Field {name = "paired_device_mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "GrabMode" }))
            }};
        Parsetree.Field {name = "owner_events";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "GrabOwner" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "mask_len"))};
        Parsetree.Field_list {name = "modifiers";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_modifiers"))}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_modifiers";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false};
                Parsetree.Field_list {name = "modifiers";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None;
                         id_name = "GrabModifierInfo" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_modifiers"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "XIPassiveUngrabDevice"; opcode = 55;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "grab_window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "detail";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "deviceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field {name = "num_modifiers";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "grab_type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "GrabType" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field_list {name = "modifiers";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_modifiers"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "XIListProperties"; opcode = 56;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_properties";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false};
                Parsetree.Field_list {name = "properties";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ATOM" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_properties"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "XIChangeProperty"; opcode = 57;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "PropMode" }))
            }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "PropertyFormat"
                       }))
            }};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "num_items";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "items";
             sw_cond = (Parsetree.Cond_eq (Parsetree.Field_ref "format"));
             sw_cases =
             [{ Parsetree.cs_name = None;
                cs_cond =
                [Parsetree.Enum_ref {
                   enum =
                   { Parsetree.id_module = None; id_name = "PropertyFormat" };
                   item = "8Bits"}
                  ];
                cs_fields =
                [Parsetree.Field_list {name = "data8";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "num_items"))};
                  Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                    serialize = false}
                  ]
                };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "PropertyFormat"
                      };
                    item = "16Bits"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "data16";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card16);
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "num_items"))};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                     serialize = false}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "PropertyFormat"
                      };
                    item = "32Bits"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "data32";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "num_items"))}
                   ]
                 }
               ]
             })
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "XIDeleteProperty"; opcode = 58;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "XIGetProperty"; opcode = 59;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "delete";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "type";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ATOM" });
                    ft_allowed = None }};
                Parsetree.Field {name = "bytes_after";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_items";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "format";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "PropertyFormat" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 11);
                  serialize = false};
                (Parsetree.Field_switch
                   { Parsetree.sw_name = "items";
                     sw_cond =
                     (Parsetree.Cond_eq (Parsetree.Field_ref "format"));
                     sw_cases =
                     [{ Parsetree.cs_name = None;
                        cs_cond =
                        [Parsetree.Enum_ref {
                           enum =
                           { Parsetree.id_module = None;
                             id_name = "PropertyFormat" };
                           item = "8Bits"}
                          ];
                        cs_fields =
                        [Parsetree.Field_list {name = "data8";
                           type_ =
                           { Parsetree.ft_type =
                             (Parsetree.Type_primitive Parsetree.Card8);
                             ft_allowed = None };
                           length = (Some (Parsetree.Field_ref "num_items"))};
                          Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                            serialize = false}
                          ]
                        };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "PropertyFormat" };
                            item = "16Bits"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "data16";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card16);
                              ft_allowed = None };
                            length = (Some (Parsetree.Field_ref "num_items"))};
                           Parsetree.Field_pad {
                             pad = (Parsetree.Pad_align 4); serialize = false}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "PropertyFormat" };
                            item = "32Bits"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "data32";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card32);
                              ft_allowed = None };
                            length = (Some (Parsetree.Field_ref "num_items"))}
                           ]
                         }
                       ]
                     })
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "XIGetSelectedEvents"; opcode = 60;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_masks";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false};
                Parsetree.Field_list {name = "masks";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "EventMask" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_masks"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Struct {name = "BarrierReleasePointerInfo";
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "barrier";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "BARRIER" });
            ft_allowed = None }};
        Parsetree.Field {name = "eventid";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Request {name = "XIBarrierReleasePointer"; opcode = 61;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "num_barriers";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field_list {name = "barriers";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None;
                 id_name = "BarrierReleasePointerInfo" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_barriers"))}
        ];
      reply = None; doc = None};
    Parsetree.Event {name = "DeviceValuator"; number = 0; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "device_state";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "num_valuators";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "first_valuator";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_list {name = "valuators";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 6L))}
        ];
      doc = None};
    Parsetree.Enum {name = "MoreEventsMask";
      items = [("MoreEvents", (Parsetree.Item_bit 7))]; doc = None};
    Parsetree.Event {name = "DeviceKeyPress"; number = 1; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "detail";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "root";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "event";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "child";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Window" }))
            }};
        Parsetree.Field {name = "root_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "root_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "event_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "event_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "state";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "KeyButMask" }))
            }};
        Parsetree.Field {name = "same_screen";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "MoreEventsMask"
                       }))
            }}
        ];
      doc = None};
    Parsetree.Event_copy {name = "DeviceKeyRelease";
      event = { Parsetree.id_module = None; id_name = "DeviceKeyPress" };
      ev_number = 2};
    Parsetree.Event_copy {name = "DeviceButtonPress";
      event = { Parsetree.id_module = None; id_name = "DeviceKeyPress" };
      ev_number = 3};
    Parsetree.Event_copy {name = "DeviceButtonRelease";
      event = { Parsetree.id_module = None; id_name = "DeviceKeyPress" };
      ev_number = 4};
    Parsetree.Event_copy {name = "DeviceMotionNotify";
      event = { Parsetree.id_module = None; id_name = "DeviceKeyPress" };
      ev_number = 5};
    Parsetree.Event {name = "DeviceFocusIn"; number = 6; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "detail";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = (Some "xproto");
                      id_name = "NotifyDetail" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = (Some "xproto");
                       id_name = "NotifyMode" }))
            }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 18);
          serialize = false}
        ];
      doc = None};
    Parsetree.Event_copy {name = "DeviceFocusOut";
      event = { Parsetree.id_module = None; id_name = "DeviceFocusIn" };
      ev_number = 7};
    Parsetree.Event_copy {name = "ProximityIn";
      event = { Parsetree.id_module = None; id_name = "DeviceKeyPress" };
      ev_number = 8};
    Parsetree.Event_copy {name = "ProximityOut";
      event = { Parsetree.id_module = None; id_name = "DeviceKeyPress" };
      ev_number = 9};
    Parsetree.Enum {name = "ClassesReportedMask";
      items =
      [("OutOfProximity", (Parsetree.Item_bit 7));
        ("DeviceModeAbsolute", (Parsetree.Item_bit 6));
        ("ReportingValuators", (Parsetree.Item_bit 2));
        ("ReportingButtons", (Parsetree.Item_bit 1));
        ("ReportingKeys", (Parsetree.Item_bit 0))];
      doc = None};
    Parsetree.Event {name = "DeviceStateNotify"; number = 10;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Parsetree.Allowed_mask
                    { Parsetree.id_module = None; id_name = "MoreEventsMask"
                      }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "num_keys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "num_buttons";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "num_valuators";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "classes_reported";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None;
                       id_name = "ClassesReportedMask" }))
            }};
        Parsetree.Field_list {name = "buttons";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 4L))};
        Parsetree.Field_list {name = "keys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 4L))};
        Parsetree.Field_list {name = "valuators";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 3L))}
        ];
      doc = None};
    Parsetree.Event {name = "DeviceMappingNotify"; number = 11;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
           ft_allowed = None }};
        Parsetree.Field {name = "request";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Mapping" }))
            }};
        Parsetree.Field {name = "first_keycode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KeyCode" });
            ft_allowed = None }};
        Parsetree.Field {name = "count";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
          serialize = false}
        ];
      doc = None};
    Parsetree.Enum {name = "ChangeDevice";
      items =
      [("NewPointer", (Parsetree.Item_value 0L));
        ("NewKeyboard", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Event {name = "ChangeDeviceNotify"; number = 12;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "request";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ChangeDevice" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
          serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "DeviceKeyStateNotify"; number = 13;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Parsetree.Allowed_mask
                    { Parsetree.id_module = None; id_name = "MoreEventsMask"
                      }))
           }};
        Parsetree.Field_list {name = "keys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 28L))}
        ];
      doc = None};
    Parsetree.Event {name = "DeviceButtonStateNotify"; number = 14;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "device_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Parsetree.Allowed_mask
                    { Parsetree.id_module = None; id_name = "MoreEventsMask"
                      }))
           }};
        Parsetree.Field_list {name = "buttons";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 28L))}
        ];
      doc = None};
    Parsetree.Enum {name = "DeviceChange";
      items =
      [("Added", (Parsetree.Item_value 0L));
        ("Removed", (Parsetree.Item_value 1L));
        ("Enabled", (Parsetree.Item_value 2L));
        ("Disabled", (Parsetree.Item_value 3L));
        ("Unrecoverable", (Parsetree.Item_value 4L));
        ("ControlChanged", (Parsetree.Item_value 5L))];
      doc = None};
    Parsetree.Event {name = "DevicePresenceNotify"; number = 15;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "devchange";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "DeviceChange" }))
            }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed = None }};
        Parsetree.Field {name = "control";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
          serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "DevicePropertyNotify"; number = 16;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "state";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Property" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 19);
          serialize = false};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ];
      doc = None};
    Parsetree.Enum {name = "ChangeReason";
      items =
      [("SlaveSwitch", (Parsetree.Item_value 1L));
        ("DeviceChange", (Parsetree.Item_value 2L))];
      doc = None};
    Parsetree.Event {name = "DeviceChanged"; number = 1; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "num_classes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field {name = "reason";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ChangeReason" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 11);
          serialize = false};
        Parsetree.Field_list {name = "classes";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceClass" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_classes"))}
        ];
      doc = None};
    Parsetree.Enum {name = "KeyEventFlags";
      items = [("KeyRepeat", (Parsetree.Item_bit 16))]; doc = None};
    Parsetree.Event {name = "KeyPress"; number = 2; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "detail";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "root";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "event";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "child";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "root_x";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "root_y";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "event_x";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "event_y";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "buttons_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "valuators_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "KeyEventFlags"
                       }))
            }};
        Parsetree.Field {name = "mods";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ModifierInfo" });
            ft_allowed = None }};
        Parsetree.Field {name = "group";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GroupInfo" });
            ft_allowed = None }};
        Parsetree.Field_list {name = "button_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "buttons_len"))};
        Parsetree.Field_list {name = "valuator_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "valuators_len"))};
        Parsetree.Field_list {name = "axisvalues";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Parsetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Parsetree.Pop_count Parsetree.List_element_ref))})}
        ];
      doc = None};
    Parsetree.Event_copy {name = "KeyRelease";
      event = { Parsetree.id_module = None; id_name = "KeyPress" };
      ev_number = 3};
    Parsetree.Enum {name = "PointerEventFlags";
      items = [("PointerEmulated", (Parsetree.Item_bit 16))]; doc = None};
    Parsetree.Event {name = "ButtonPress"; number = 4; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "detail";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "root";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "event";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "child";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "root_x";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "root_y";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "event_x";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "event_y";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "buttons_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "valuators_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None;
                       id_name = "PointerEventFlags" }))
            }};
        Parsetree.Field {name = "mods";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ModifierInfo" });
            ft_allowed = None }};
        Parsetree.Field {name = "group";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GroupInfo" });
            ft_allowed = None }};
        Parsetree.Field_list {name = "button_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "buttons_len"))};
        Parsetree.Field_list {name = "valuator_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "valuators_len"))};
        Parsetree.Field_list {name = "axisvalues";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Parsetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Parsetree.Pop_count Parsetree.List_element_ref))})}
        ];
      doc = None};
    Parsetree.Event_copy {name = "ButtonRelease";
      event = { Parsetree.id_module = None; id_name = "ButtonPress" };
      ev_number = 5};
    Parsetree.Event_copy {name = "Motion";
      event = { Parsetree.id_module = None; id_name = "ButtonPress" };
      ev_number = 6};
    Parsetree.Enum {name = "NotifyMode";
      items =
      [("Normal", (Parsetree.Item_value 0L));
        ("Grab", (Parsetree.Item_value 1L));
        ("Ungrab", (Parsetree.Item_value 2L));
        ("WhileGrabbed", (Parsetree.Item_value 3L));
        ("PassiveGrab", (Parsetree.Item_value 4L));
        ("PassiveUngrab", (Parsetree.Item_value 5L))];
      doc = None};
    Parsetree.Enum {name = "NotifyDetail";
      items =
      [("Ancestor", (Parsetree.Item_value 0L));
        ("Virtual", (Parsetree.Item_value 1L));
        ("Inferior", (Parsetree.Item_value 2L));
        ("Nonlinear", (Parsetree.Item_value 3L));
        ("NonlinearVirtual", (Parsetree.Item_value 4L));
        ("Pointer", (Parsetree.Item_value 5L));
        ("PointerRoot", (Parsetree.Item_value 6L));
        ("None", (Parsetree.Item_value 7L))];
      doc = None};
    Parsetree.Event {name = "Enter"; number = 7; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = (Some "xinput");
                       id_name = "NotifyMode" }))
            }};
        Parsetree.Field {name = "detail";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = (Some "xinput");
                       id_name = "NotifyDetail" }))
            }};
        Parsetree.Field {name = "root";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "event";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "child";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "root_x";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "root_y";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "event_x";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "event_y";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "same_screen";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "focus";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "buttons_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "mods";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ModifierInfo" });
            ft_allowed = None }};
        Parsetree.Field {name = "group";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GroupInfo" });
            ft_allowed = None }};
        Parsetree.Field_list {name = "buttons";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "buttons_len"))}
        ];
      doc = None};
    Parsetree.Event_copy {name = "Leave";
      event = { Parsetree.id_module = None; id_name = "Enter" };
      ev_number = 8};
    Parsetree.Event_copy {name = "FocusIn";
      event = { Parsetree.id_module = None; id_name = "Enter" };
      ev_number = 9};
    Parsetree.Event_copy {name = "FocusOut";
      event = { Parsetree.id_module = None; id_name = "Enter" };
      ev_number = 10};
    Parsetree.Enum {name = "HierarchyMask";
      items =
      [("MasterAdded", (Parsetree.Item_bit 0));
        ("MasterRemoved", (Parsetree.Item_bit 1));
        ("SlaveAdded", (Parsetree.Item_bit 2));
        ("SlaveRemoved", (Parsetree.Item_bit 3));
        ("SlaveAttached", (Parsetree.Item_bit 4));
        ("SlaveDetached", (Parsetree.Item_bit 5));
        ("DeviceEnabled", (Parsetree.Item_bit 6));
        ("DeviceDisabled", (Parsetree.Item_bit 7))];
      doc = None};
    Parsetree.Struct {name = "HierarchyInfo";
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "attachment";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "DeviceType" }))
            }};
        Parsetree.Field {name = "enabled";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "HierarchyMask"
                       }))
            }}
        ]};
    Parsetree.Event {name = "Hierarchy"; number = 11; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "HierarchyMask"
                       }))
            }};
        Parsetree.Field {name = "num_infos";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 10);
          serialize = false};
        Parsetree.Field_list {name = "infos";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "HierarchyInfo" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_infos"))}
        ];
      doc = None};
    Parsetree.Enum {name = "PropertyFlag";
      items =
      [("Deleted", (Parsetree.Item_value 0L));
        ("Created", (Parsetree.Item_value 1L));
        ("Modified", (Parsetree.Item_value 2L))];
      doc = None};
    Parsetree.Event {name = "Property"; number = 12; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "what";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "PropertyFlag" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 11);
          serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "RawKeyPress"; number = 13; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "detail";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed = None }};
        Parsetree.Field {name = "valuators_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "KeyEventFlags"
                       }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4); serialize = false};
        Parsetree.Field_list {name = "valuator_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "valuators_len"))};
        Parsetree.Field_list {name = "axisvalues";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Parsetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Parsetree.Pop_count Parsetree.List_element_ref))})};
        Parsetree.Field_list {name = "axisvalues_raw";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Parsetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Parsetree.Pop_count Parsetree.List_element_ref))})}
        ];
      doc = None};
    Parsetree.Event_copy {name = "RawKeyRelease";
      event = { Parsetree.id_module = None; id_name = "RawKeyPress" };
      ev_number = 14};
    Parsetree.Event {name = "RawButtonPress"; number = 15; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "detail";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed = None }};
        Parsetree.Field {name = "valuators_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None;
                       id_name = "PointerEventFlags" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4); serialize = false};
        Parsetree.Field_list {name = "valuator_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "valuators_len"))};
        Parsetree.Field_list {name = "axisvalues";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Parsetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Parsetree.Pop_count Parsetree.List_element_ref))})};
        Parsetree.Field_list {name = "axisvalues_raw";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Parsetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Parsetree.Pop_count Parsetree.List_element_ref))})}
        ];
      doc = None};
    Parsetree.Event_copy {name = "RawButtonRelease";
      event = { Parsetree.id_module = None; id_name = "RawButtonPress" };
      ev_number = 16};
    Parsetree.Event_copy {name = "RawMotion";
      event = { Parsetree.id_module = None; id_name = "RawButtonPress" };
      ev_number = 17};
    Parsetree.Enum {name = "TouchEventFlags";
      items =
      [("TouchPendingEnd", (Parsetree.Item_bit 16));
        ("TouchEmulatingPointer", (Parsetree.Item_bit 17))];
      doc = None};
    Parsetree.Event {name = "TouchBegin"; number = 18; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "detail";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "root";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "event";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "child";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "root_x";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "root_y";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "event_x";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "event_y";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "buttons_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "valuators_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None;
                       id_name = "TouchEventFlags" }))
            }};
        Parsetree.Field {name = "mods";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ModifierInfo" });
            ft_allowed = None }};
        Parsetree.Field {name = "group";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GroupInfo" });
            ft_allowed = None }};
        Parsetree.Field_list {name = "button_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "buttons_len"))};
        Parsetree.Field_list {name = "valuator_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "valuators_len"))};
        Parsetree.Field_list {name = "axisvalues";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Parsetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Parsetree.Pop_count Parsetree.List_element_ref))})}
        ];
      doc = None};
    Parsetree.Event_copy {name = "TouchUpdate";
      event = { Parsetree.id_module = None; id_name = "TouchBegin" };
      ev_number = 19};
    Parsetree.Event_copy {name = "TouchEnd";
      event = { Parsetree.id_module = None; id_name = "TouchBegin" };
      ev_number = 20};
    Parsetree.Enum {name = "TouchOwnershipFlags";
      items = [("None", (Parsetree.Item_value 0L))]; doc = None};
    Parsetree.Event {name = "TouchOwnership"; number = 21; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "touchid";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "root";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "event";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "child";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None;
                       id_name = "TouchOwnershipFlags" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8); serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "RawTouchBegin"; number = 22; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "detail";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed = None }};
        Parsetree.Field {name = "valuators_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None;
                       id_name = "TouchEventFlags" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4); serialize = false};
        Parsetree.Field_list {name = "valuator_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "valuators_len"))};
        Parsetree.Field_list {name = "axisvalues";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Parsetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Parsetree.Pop_count Parsetree.List_element_ref))})};
        Parsetree.Field_list {name = "axisvalues_raw";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Parsetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Parsetree.Pop_count Parsetree.List_element_ref))})}
        ];
      doc = None};
    Parsetree.Event_copy {name = "RawTouchUpdate";
      event = { Parsetree.id_module = None; id_name = "RawTouchBegin" };
      ev_number = 23};
    Parsetree.Event_copy {name = "RawTouchEnd";
      event = { Parsetree.id_module = None; id_name = "RawTouchBegin" };
      ev_number = 24};
    Parsetree.Enum {name = "BarrierFlags";
      items =
      [("PointerReleased", (Parsetree.Item_bit 0));
        ("DeviceIsGrabbed", (Parsetree.Item_bit 1))];
      doc = None};
    Parsetree.Event {name = "BarrierHit"; number = 25; is_generic = true;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "deviceid";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceId" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "Device" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }};
        Parsetree.Field {name = "eventid";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "root";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "event";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "barrier";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "BARRIER" });
            ft_allowed = None }};
        Parsetree.Field {name = "dtime";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "BarrierFlags" }))
            }};
        Parsetree.Field {name = "sourceid";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceId" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Device" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "root_x";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "root_y";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP1616" });
            ft_allowed = None }};
        Parsetree.Field {name = "dx";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP3232" });
            ft_allowed = None }};
        Parsetree.Field {name = "dy";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "FP3232" });
            ft_allowed = None }}
        ];
      doc = None};
    Parsetree.Event_copy {name = "BarrierLeave";
      event = { Parsetree.id_module = None; id_name = "BarrierHit" };
      ev_number = 26};
    Parsetree.Event_struct {name = "EventForSend";
      allowed_events =
      [{ Parsetree.ae_module = "Input";
         ae_opcode_range = { Parsetree.min = 0; max = 16 }; ae_is_xge = false
         }
        ]};
    Parsetree.Request {name = "SendExtensionEvent"; opcode = 31;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "destination";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "device_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "propagate";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "num_classes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "num_events";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field_list {name = "events";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "EventForSend" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_events"))};
        Parsetree.Field_list {name = "classes";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "EventClass" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_classes"))}
        ];
      reply = None; doc = None};
    Parsetree.Error {name = "Device"; number = 0; fields = []};
    Parsetree.Error {name = "Event"; number = 1; fields = []};
    Parsetree.Error {name = "Mode"; number = 2; fields = []};
    Parsetree.Error {name = "DeviceBusy"; number = 3; fields = []};
    Parsetree.Error {name = "Class"; number = 4; fields = []}]}
Parsetree.Extension {name = "xkb"; file_name = "xkb";
  query_name = "XKEYBOARD"; multiword = false; version = (1, 0);
  declarations =
  [(Parsetree.Import "xproto");
    Parsetree.Enum {name = "Const";
      items =
      [("MaxLegalKeyCode", (Parsetree.Item_value 255L));
        ("PerKeyBitArraySize", (Parsetree.Item_value 32L));
        ("KeyNameLength", (Parsetree.Item_value 4L))];
      doc = None};
    Parsetree.Enum {name = "EventType";
      items =
      [("NewKeyboardNotify", (Parsetree.Item_bit 0));
        ("MapNotify", (Parsetree.Item_bit 1));
        ("StateNotify", (Parsetree.Item_bit 2));
        ("ControlsNotify", (Parsetree.Item_bit 3));
        ("IndicatorStateNotify", (Parsetree.Item_bit 4));
        ("IndicatorMapNotify", (Parsetree.Item_bit 5));
        ("NamesNotify", (Parsetree.Item_bit 6));
        ("CompatMapNotify", (Parsetree.Item_bit 7));
        ("BellNotify", (Parsetree.Item_bit 8));
        ("ActionMessage", (Parsetree.Item_bit 9));
        ("AccessXNotify", (Parsetree.Item_bit 10));
        ("ExtensionDeviceNotify", (Parsetree.Item_bit 11))];
      doc = None};
    Parsetree.Enum {name = "NKNDetail";
      items =
      [("Keycodes", (Parsetree.Item_bit 0));
        ("Geometry", (Parsetree.Item_bit 1));
        ("DeviceID", (Parsetree.Item_bit 2))];
      doc = None};
    Parsetree.Enum {name = "AXNDetail";
      items =
      [("SKPress", (Parsetree.Item_bit 0));
        ("SKAccept", (Parsetree.Item_bit 1));
        ("SKReject", (Parsetree.Item_bit 2));
        ("SKRelease", (Parsetree.Item_bit 3));
        ("BKAccept", (Parsetree.Item_bit 4));
        ("BKReject", (Parsetree.Item_bit 5));
        ("AXKWarning", (Parsetree.Item_bit 6))];
      doc = None};
    Parsetree.Enum {name = "MapPart";
      items =
      [("KeyTypes", (Parsetree.Item_bit 0));
        ("KeySyms", (Parsetree.Item_bit 1));
        ("ModifierMap", (Parsetree.Item_bit 2));
        ("ExplicitComponents", (Parsetree.Item_bit 3));
        ("KeyActions", (Parsetree.Item_bit 4));
        ("KeyBehaviors", (Parsetree.Item_bit 5));
        ("VirtualMods", (Parsetree.Item_bit 6));
        ("VirtualModMap", (Parsetree.Item_bit 7))];
      doc = None};
    Parsetree.Enum {name = "SetMapFlags";
      items =
      [("ResizeTypes", (Parsetree.Item_bit 0));
        ("RecomputeActions", (Parsetree.Item_bit 1))];
      doc = None};
    Parsetree.Enum {name = "StatePart";
      items =
      [("ModifierState", (Parsetree.Item_bit 0));
        ("ModifierBase", (Parsetree.Item_bit 1));
        ("ModifierLatch", (Parsetree.Item_bit 2));
        ("ModifierLock", (Parsetree.Item_bit 3));
        ("GroupState", (Parsetree.Item_bit 4));
        ("GroupBase", (Parsetree.Item_bit 5));
        ("GroupLatch", (Parsetree.Item_bit 6));
        ("GroupLock", (Parsetree.Item_bit 7));
        ("CompatState", (Parsetree.Item_bit 8));
        ("GrabMods", (Parsetree.Item_bit 9));
        ("CompatGrabMods", (Parsetree.Item_bit 10));
        ("LookupMods", (Parsetree.Item_bit 11));
        ("CompatLookupMods", (Parsetree.Item_bit 12));
        ("PointerButtons", (Parsetree.Item_bit 13))];
      doc = None};
    Parsetree.Enum {name = "BoolCtrl";
      items =
      [("RepeatKeys", (Parsetree.Item_bit 0));
        ("SlowKeys", (Parsetree.Item_bit 1));
        ("BounceKeys", (Parsetree.Item_bit 2));
        ("StickyKeys", (Parsetree.Item_bit 3));
        ("MouseKeys", (Parsetree.Item_bit 4));
        ("MouseKeysAccel", (Parsetree.Item_bit 5));
        ("AccessXKeys", (Parsetree.Item_bit 6));
        ("AccessXTimeoutMask", (Parsetree.Item_bit 7));
        ("AccessXFeedbackMask", (Parsetree.Item_bit 8));
        ("AudibleBellMask", (Parsetree.Item_bit 9));
        ("Overlay1Mask", (Parsetree.Item_bit 10));
        ("Overlay2Mask", (Parsetree.Item_bit 11));
        ("IgnoreGroupLockMask", (Parsetree.Item_bit 12))];
      doc = None};
    Parsetree.Enum {name = "Control";
      items =
      [("GroupsWrap", (Parsetree.Item_bit 27));
        ("InternalMods", (Parsetree.Item_bit 28));
        ("IgnoreLockMods", (Parsetree.Item_bit 29));
        ("PerKeyRepeat", (Parsetree.Item_bit 30));
        ("ControlsEnabled", (Parsetree.Item_bit 31))];
      doc = None};
    Parsetree.Enum {name = "AXOption";
      items =
      [("SKPressFB", (Parsetree.Item_bit 0));
        ("SKAcceptFB", (Parsetree.Item_bit 1));
        ("FeatureFB", (Parsetree.Item_bit 2));
        ("SlowWarnFB", (Parsetree.Item_bit 3));
        ("IndicatorFB", (Parsetree.Item_bit 4));
        ("StickyKeysFB", (Parsetree.Item_bit 5));
        ("TwoKeys", (Parsetree.Item_bit 6));
        ("LatchToLock", (Parsetree.Item_bit 7));
        ("SKReleaseFB", (Parsetree.Item_bit 8));
        ("SKRejectFB", (Parsetree.Item_bit 9));
        ("BKRejectFB", (Parsetree.Item_bit 10));
        ("DumbBell", (Parsetree.Item_bit 11))];
      doc = None};
    Parsetree.Typedef {name = "DeviceSpec";
      type_ = (Parsetree.Type_primitive Parsetree.Card16)};
    Parsetree.Enum {name = "LedClassResult";
      items =
      [("KbdFeedbackClass", (Parsetree.Item_value 0L));
        ("LedFeedbackClass", (Parsetree.Item_value 4L))];
      doc = None};
    Parsetree.Enum {name = "LedClass";
      items =
      [("KbdFeedbackClass", (Parsetree.Item_value 0L));
        ("LedFeedbackClass", (Parsetree.Item_value 4L));
        ("DfltXIClass", (Parsetree.Item_value 768L));
        ("AllXIClasses", (Parsetree.Item_value 1280L))];
      doc = None};
    Parsetree.Typedef {name = "LedClassSpec";
      type_ = (Parsetree.Type_primitive Parsetree.Card16)};
    Parsetree.Enum {name = "BellClassResult";
      items =
      [("KbdFeedbackClass", (Parsetree.Item_value 0L));
        ("BellFeedbackClass", (Parsetree.Item_value 5L))];
      doc = None};
    Parsetree.Enum {name = "BellClass";
      items =
      [("KbdFeedbackClass", (Parsetree.Item_value 0L));
        ("BellFeedbackClass", (Parsetree.Item_value 5L));
        ("DfltXIClass", (Parsetree.Item_value 768L))];
      doc = None};
    Parsetree.Typedef {name = "BellClassSpec";
      type_ = (Parsetree.Type_primitive Parsetree.Card16)};
    Parsetree.Enum {name = "ID";
      items =
      [("UseCoreKbd", (Parsetree.Item_value 256L));
        ("UseCorePtr", (Parsetree.Item_value 512L));
        ("DfltXIClass", (Parsetree.Item_value 768L));
        ("DfltXIId", (Parsetree.Item_value 1024L));
        ("AllXIClass", (Parsetree.Item_value 1280L));
        ("AllXIId", (Parsetree.Item_value 1536L));
        ("XINone", (Parsetree.Item_value 65280L))];
      doc = None};
    Parsetree.Typedef {name = "IDSpec";
      type_ = (Parsetree.Type_primitive Parsetree.Card16)};
    Parsetree.Enum {name = "Group";
      items =
      [("1", (Parsetree.Item_value 0L)); ("2", (Parsetree.Item_value 1L));
        ("3", (Parsetree.Item_value 2L)); ("4", (Parsetree.Item_value 3L))];
      doc = None};
    Parsetree.Enum {name = "Groups";
      items =
      [("Any", (Parsetree.Item_value 254L));
        ("All", (Parsetree.Item_value 255L))];
      doc = None};
    Parsetree.Enum {name = "SetOfGroup";
      items =
      [("Group1", (Parsetree.Item_bit 0));
        ("Group2", (Parsetree.Item_bit 1));
        ("Group3", (Parsetree.Item_bit 2));
        ("Group4", (Parsetree.Item_bit 3))];
      doc = None};
    Parsetree.Enum {name = "SetOfGroups";
      items = [("Any", (Parsetree.Item_bit 7))]; doc = None};
    Parsetree.Enum {name = "GroupsWrap";
      items =
      [("WrapIntoRange", (Parsetree.Item_value 0L));
        ("ClampIntoRange", (Parsetree.Item_bit 6));
        ("RedirectIntoRange", (Parsetree.Item_bit 7))];
      doc = None};
    Parsetree.Enum {name = "VModsHigh";
      items =
      [("15", (Parsetree.Item_bit 7)); ("14", (Parsetree.Item_bit 6));
        ("13", (Parsetree.Item_bit 5)); ("12", (Parsetree.Item_bit 4));
        ("11", (Parsetree.Item_bit 3)); ("10", (Parsetree.Item_bit 2));
        ("9", (Parsetree.Item_bit 1)); ("8", (Parsetree.Item_bit 0))];
      doc = None};
    Parsetree.Enum {name = "VModsLow";
      items =
      [("7", (Parsetree.Item_bit 7)); ("6", (Parsetree.Item_bit 6));
        ("5", (Parsetree.Item_bit 5)); ("4", (Parsetree.Item_bit 4));
        ("3", (Parsetree.Item_bit 3)); ("2", (Parsetree.Item_bit 2));
        ("1", (Parsetree.Item_bit 1)); ("0", (Parsetree.Item_bit 0))];
      doc = None};
    Parsetree.Enum {name = "VMod";
      items =
      [("15", (Parsetree.Item_bit 15)); ("14", (Parsetree.Item_bit 14));
        ("13", (Parsetree.Item_bit 13)); ("12", (Parsetree.Item_bit 12));
        ("11", (Parsetree.Item_bit 11)); ("10", (Parsetree.Item_bit 10));
        ("9", (Parsetree.Item_bit 9)); ("8", (Parsetree.Item_bit 8));
        ("7", (Parsetree.Item_bit 7)); ("6", (Parsetree.Item_bit 6));
        ("5", (Parsetree.Item_bit 5)); ("4", (Parsetree.Item_bit 4));
        ("3", (Parsetree.Item_bit 3)); ("2", (Parsetree.Item_bit 2));
        ("1", (Parsetree.Item_bit 1)); ("0", (Parsetree.Item_bit 0))];
      doc = None};
    Parsetree.Enum {name = "Explicit";
      items =
      [("VModMap", (Parsetree.Item_bit 7));
        ("Behavior", (Parsetree.Item_bit 6));
        ("AutoRepeat", (Parsetree.Item_bit 5));
        ("Interpret", (Parsetree.Item_bit 4));
        ("KeyType4", (Parsetree.Item_bit 3));
        ("KeyType3", (Parsetree.Item_bit 2));
        ("KeyType2", (Parsetree.Item_bit 1));
        ("KeyType1", (Parsetree.Item_bit 0))];
      doc = None};
    Parsetree.Enum {name = "SymInterpretMatch";
      items =
      [("NoneOf", (Parsetree.Item_value 0L));
        ("AnyOfOrNone", (Parsetree.Item_value 1L));
        ("AnyOf", (Parsetree.Item_value 2L));
        ("AllOf", (Parsetree.Item_value 3L));
        ("Exactly", (Parsetree.Item_value 4L))];
      doc = None};
    Parsetree.Enum {name = "SymInterpMatch";
      items =
      [("LevelOneOnly", (Parsetree.Item_bit 7));
        ("OpMask", (Parsetree.Item_value 127L))];
      doc = None};
    Parsetree.Enum {name = "IMFlag";
      items =
      [("NoExplicit", (Parsetree.Item_bit 7));
        ("NoAutomatic", (Parsetree.Item_bit 6));
        ("LEDDrivesKB", (Parsetree.Item_bit 5))];
      doc = None};
    Parsetree.Enum {name = "IMModsWhich";
      items =
      [("UseCompat", (Parsetree.Item_bit 4));
        ("UseEffective", (Parsetree.Item_bit 3));
        ("UseLocked", (Parsetree.Item_bit 2));
        ("UseLatched", (Parsetree.Item_bit 1));
        ("UseBase", (Parsetree.Item_bit 0))];
      doc = None};
    Parsetree.Enum {name = "IMGroupsWhich";
      items =
      [("UseCompat", (Parsetree.Item_bit 4));
        ("UseEffective", (Parsetree.Item_bit 3));
        ("UseLocked", (Parsetree.Item_bit 2));
        ("UseLatched", (Parsetree.Item_bit 1));
        ("UseBase", (Parsetree.Item_bit 0))];
      doc = None};
    Parsetree.Struct {name = "IndicatorMap";
      fields =
      [Parsetree.Field {name = "flags";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "IMFlag" }))
           }};
        Parsetree.Field {name = "whichGroups";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "IMGroupsWhich"
                       }))
            }};
        Parsetree.Field {name = "groups";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SetOfGroup" }))
            }};
        Parsetree.Field {name = "whichMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "IMModsWhich" }))
            }};
        Parsetree.Field {name = "mods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "realMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "vmods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }};
        Parsetree.Field {name = "ctrls";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "BoolCtrl" }))
            }}
        ]};
    Parsetree.Enum {name = "CMDetail";
      items =
      [("SymInterp", (Parsetree.Item_bit 0));
        ("GroupCompat", (Parsetree.Item_bit 1))];
      doc = None};
    Parsetree.Enum {name = "NameDetail";
      items =
      [("Keycodes", (Parsetree.Item_bit 0));
        ("Geometry", (Parsetree.Item_bit 1));
        ("Symbols", (Parsetree.Item_bit 2));
        ("PhysSymbols", (Parsetree.Item_bit 3));
        ("Types", (Parsetree.Item_bit 4));
        ("Compat", (Parsetree.Item_bit 5));
        ("KeyTypeNames", (Parsetree.Item_bit 6));
        ("KTLevelNames", (Parsetree.Item_bit 7));
        ("IndicatorNames", (Parsetree.Item_bit 8));
        ("KeyNames", (Parsetree.Item_bit 9));
        ("KeyAliases", (Parsetree.Item_bit 10));
        ("VirtualModNames", (Parsetree.Item_bit 11));
        ("GroupNames", (Parsetree.Item_bit 12));
        ("RGNames", (Parsetree.Item_bit 13))];
      doc = None};
    Parsetree.Enum {name = "GBNDetail";
      items =
      [("Types", (Parsetree.Item_bit 0));
        ("CompatMap", (Parsetree.Item_bit 1));
        ("ClientSymbols", (Parsetree.Item_bit 2));
        ("ServerSymbols", (Parsetree.Item_bit 3));
        ("IndicatorMaps", (Parsetree.Item_bit 4));
        ("KeyNames", (Parsetree.Item_bit 5));
        ("Geometry", (Parsetree.Item_bit 6));
        ("OtherNames", (Parsetree.Item_bit 7))];
      doc = None};
    Parsetree.Enum {name = "XIFeature";
      items =
      [("Keyboards", (Parsetree.Item_bit 0));
        ("ButtonActions", (Parsetree.Item_bit 1));
        ("IndicatorNames", (Parsetree.Item_bit 2));
        ("IndicatorMaps", (Parsetree.Item_bit 3));
        ("IndicatorState", (Parsetree.Item_bit 4))];
      doc = None};
    Parsetree.Enum {name = "PerClientFlag";
      items =
      [("DetectableAutoRepeat", (Parsetree.Item_bit 0));
        ("GrabsUseXKBState", (Parsetree.Item_bit 1));
        ("AutoResetControls", (Parsetree.Item_bit 2));
        ("LookupStateWhenGrabbed", (Parsetree.Item_bit 3));
        ("SendEventUsesXKBState", (Parsetree.Item_bit 4))];
      doc = None};
    Parsetree.Struct {name = "ModDef";
      fields =
      [Parsetree.Field {name = "mask";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_mask
                    { Parsetree.id_module = None; id_name = "ModMask" }))
           }};
        Parsetree.Field {name = "realMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "vmods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }}
        ]};
    Parsetree.Struct {name = "KeyName";
      fields =
      [Parsetree.Field_list {name = "name";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
           ft_allowed = None };
         length = (Some (Parsetree.Expr_value 4L))}
        ]};
    Parsetree.Struct {name = "KeyAlias";
      fields =
      [Parsetree.Field_list {name = "real";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
           ft_allowed = None };
         length = (Some (Parsetree.Expr_value 4L))};
        Parsetree.Field_list {name = "alias";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 4L))}
        ]};
    Parsetree.Struct {name = "CountedString16";
      fields =
      [Parsetree.Field {name = "length";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field_list {name = "string";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "length"))};
        Parsetree.Field_list {name = "alignment_pad";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Void);
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Sub,
                   (Parsetree.Binop (Parsetree.Bit_and,
                      (Parsetree.Binop (Parsetree.Add,
                         (Parsetree.Field_ref "length"),
                         (Parsetree.Expr_value 5L))),
                      (Parsetree.Unop (Parsetree.Bit_not,
                         (Parsetree.Expr_value 3L)))
                      )),
                   (Parsetree.Binop (Parsetree.Add,
                      (Parsetree.Field_ref "length"),
                      (Parsetree.Expr_value 2L)))
                   )))}
        ]};
    Parsetree.Struct {name = "KTMapEntry";
      fields =
      [Parsetree.Field {name = "active";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
           ft_allowed = None }};
        Parsetree.Field {name = "mods_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "level";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "mods_mods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "mods_vmods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ]};
    Parsetree.Struct {name = "KeyType";
      fields =
      [Parsetree.Field {name = "mods_mask";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_mask
                    { Parsetree.id_module = None; id_name = "ModMask" }))
           }};
        Parsetree.Field {name = "mods_mods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "mods_vmods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }};
        Parsetree.Field {name = "numLevels";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "nMapEntries";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "hasPreserve";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field_list {name = "map";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KTMapEntry" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nMapEntries"))};
        Parsetree.Field_list {name = "preserve";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ModDef" });
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Mul,
                   (Parsetree.Field_ref "hasPreserve"),
                   (Parsetree.Field_ref "nMapEntries"))))}
        ]};
    Parsetree.Struct {name = "KeySymMap";
      fields =
      [Parsetree.Field_list {name = "kt_index";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None };
         length = (Some (Parsetree.Expr_value 4L))};
        Parsetree.Field {name = "groupInfo";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "nSyms";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "syms";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYSYM" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nSyms"))}
        ]};
    Parsetree.Struct {name = "CommonBehavior";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "data";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "DefaultBehavior";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false}
        ]};
    Parsetree.Typedef {name = "LockBehavior";
      type_ =
      (Parsetree.Type_ref
         { Parsetree.id_module = None; id_name = "DefaultBehavior" })};
    Parsetree.Struct {name = "RadioGroupBehavior";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "group";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "OverlayBehavior";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "key";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }}
        ]};
    Parsetree.Typedef {name = "PermamentLockBehavior";
      type_ =
      (Parsetree.Type_ref
         { Parsetree.id_module = None; id_name = "LockBehavior" })};
    Parsetree.Typedef {name = "PermamentRadioGroupBehavior";
      type_ =
      (Parsetree.Type_ref
         { Parsetree.id_module = None; id_name = "RadioGroupBehavior" })};
    Parsetree.Typedef {name = "PermamentOverlayBehavior";
      type_ =
      (Parsetree.Type_ref
         { Parsetree.id_module = None; id_name = "OverlayBehavior" })};
    Parsetree.Union {name = "Behavior";
      members =
      [Parsetree.Field {name = "common";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CommonBehavior" });
           ft_allowed = None }};
        Parsetree.Field {name = "default";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DefaultBehavior" });
            ft_allowed = None }};
        Parsetree.Field {name = "lock";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "LockBehavior" });
            ft_allowed = None }};
        Parsetree.Field {name = "radioGroup";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "RadioGroupBehavior" });
            ft_allowed = None }};
        Parsetree.Field {name = "overlay1";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "OverlayBehavior" });
            ft_allowed = None }};
        Parsetree.Field {name = "overlay2";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "OverlayBehavior" });
            ft_allowed = None }};
        Parsetree.Field {name = "permamentLock";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None;
                 id_name = "PermamentLockBehavior" });
            ft_allowed = None }};
        Parsetree.Field {name = "permamentRadioGroup";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None;
                 id_name = "PermamentRadioGroupBehavior" });
            ft_allowed = None }};
        Parsetree.Field {name = "permamentOverlay1";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None;
                 id_name = "PermamentOverlayBehavior" });
            ft_allowed = None }};
        Parsetree.Field {name = "permamentOverlay2";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None;
                 id_name = "PermamentOverlayBehavior" });
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ]};
    Parsetree.Enum {name = "BehaviorType";
      items =
      [("Default", (Parsetree.Item_value 0L));
        ("Lock", (Parsetree.Item_value 1L));
        ("RadioGroup", (Parsetree.Item_value 2L));
        ("Overlay1", (Parsetree.Item_value 3L));
        ("Overlay2", (Parsetree.Item_value 4L));
        ("PermamentLock", (Parsetree.Item_value 129L));
        ("PermamentRadioGroup", (Parsetree.Item_value 130L));
        ("PermamentOverlay1", (Parsetree.Item_value 131L));
        ("PermamentOverlay2", (Parsetree.Item_value 132L))];
      doc = None};
    Parsetree.Struct {name = "SetBehavior";
      fields =
      [Parsetree.Field {name = "keycode";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "KEYCODE" });
           ft_allowed = None }};
        Parsetree.Field {name = "behavior";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Behavior" });
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false}
        ]};
    Parsetree.Struct {name = "SetExplicit";
      fields =
      [Parsetree.Field {name = "keycode";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "KEYCODE" });
           ft_allowed = None }};
        Parsetree.Field {name = "explicit";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "Explicit" }))
            }}
        ]};
    Parsetree.Struct {name = "KeyModMap";
      fields =
      [Parsetree.Field {name = "keycode";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "KEYCODE" });
           ft_allowed = None }};
        Parsetree.Field {name = "mods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }}
        ]};
    Parsetree.Struct {name = "KeyVModMap";
      fields =
      [Parsetree.Field {name = "keycode";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "KEYCODE" });
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "vmods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }}
        ]};
    Parsetree.Struct {name = "KTSetMapEntry";
      fields =
      [Parsetree.Field {name = "level";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "realMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "virtualMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }}
        ]};
    Parsetree.Struct {name = "SetKeyType";
      fields =
      [Parsetree.Field {name = "mask";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_mask
                    { Parsetree.id_module = None; id_name = "ModMask" }))
           }};
        Parsetree.Field {name = "realMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "virtualMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }};
        Parsetree.Field {name = "numLevels";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "nMapEntries";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "preserve";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field_list {name = "entries";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KTSetMapEntry" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nMapEntries"))};
        Parsetree.Field_list {name = "preserve_entries";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KTSetMapEntry" });
            ft_allowed = None };
          length =
          (Some (Parsetree.Binop (Parsetree.Mul,
                   (Parsetree.Field_ref "preserve"),
                   (Parsetree.Field_ref "nMapEntries"))))}
        ]};
    Parsetree.Typedef {name = "STRING8";
      type_ = (Parsetree.Type_primitive Parsetree.Char)};
    Parsetree.Struct {name = "Outline";
      fields =
      [Parsetree.Field {name = "nPoints";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "cornerRadius";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "points";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "POINT" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nPoints"))}
        ]};
    Parsetree.Struct {name = "Shape";
      fields =
      [Parsetree.Field {name = "name";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ATOM" });
           ft_allowed = None }};
        Parsetree.Field {name = "nOutlines";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "primaryNdx";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "approxNdx";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field_list {name = "outlines";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Outline" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nOutlines"))}
        ]};
    Parsetree.Struct {name = "Key";
      fields =
      [Parsetree.Field_list {name = "name";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "STRING8" });
           ft_allowed = None };
         length = (Some (Parsetree.Expr_value 4L))};
        Parsetree.Field {name = "gap";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "shapeNdx";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "colorNdx";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "OverlayKey";
      fields =
      [Parsetree.Field_list {name = "over";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "STRING8" });
           ft_allowed = None };
         length = (Some (Parsetree.Expr_value 4L))};
        Parsetree.Field_list {name = "under";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "STRING8" });
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 4L))}
        ]};
    Parsetree.Struct {name = "OverlayRow";
      fields =
      [Parsetree.Field {name = "rowUnder";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "nKeys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "keys";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "OverlayKey" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nKeys"))}
        ]};
    Parsetree.Struct {name = "Overlay";
      fields =
      [Parsetree.Field {name = "name";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ATOM" });
           ft_allowed = None }};
        Parsetree.Field {name = "nRows";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field_list {name = "rows";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "OverlayRow" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nRows"))}
        ]};
    Parsetree.Struct {name = "Row";
      fields =
      [Parsetree.Field {name = "top";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
           ft_allowed = None }};
        Parsetree.Field {name = "left";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "nKeys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "vertical";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "keys";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Key" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nKeys"))}
        ]};
    Parsetree.Enum {name = "DoodadType";
      items =
      [("Outline", (Parsetree.Item_value 1L));
        ("Solid", (Parsetree.Item_value 2L));
        ("Text", (Parsetree.Item_value 3L));
        ("Indicator", (Parsetree.Item_value 4L));
        ("Logo", (Parsetree.Item_value 5L))];
      doc = None};
    Parsetree.Struct {name = "Listing";
      fields =
      [Parsetree.Field {name = "flags";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field {name = "length";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "string";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "STRING8" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "length"))};
        Parsetree.Field_pad {pad = (Parsetree.Pad_align 2); serialize = false}
        ]};
    Parsetree.Struct {name = "DeviceLedInfo";
      fields =
      [Parsetree.Field {name = "ledClass";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "LedClassSpec" });
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "LedClass" }))
           }};
        Parsetree.Field {name = "ledID";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "IDSpec" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ID" }))
            }};
        Parsetree.Field {name = "namesPresent";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "mapsPresent";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "physIndicators";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "state";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "names";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None };
          length =
          (Some (Parsetree.Pop_count (Parsetree.Field_ref "namesPresent")))};
        Parsetree.Field_list {name = "maps";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "IndicatorMap" });
            ft_allowed = None };
          length =
          (Some (Parsetree.Pop_count (Parsetree.Field_ref "mapsPresent")))}
        ]};
    Parsetree.Enum {name = "Error";
      items =
      [("BadDevice", (Parsetree.Item_value 255L));
        ("BadClass", (Parsetree.Item_value 254L));
        ("BadId", (Parsetree.Item_value 253L))];
      doc = None};
    Parsetree.Error {name = "Keyboard"; number = 0;
      fields =
      [Parsetree.Field {name = "value";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "minorOpcode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "majorOpcode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 21);
          serialize = false}
        ]};
    Parsetree.Enum {name = "SA";
      items =
      [("ClearLocks", (Parsetree.Item_bit 0));
        ("LatchToLock", (Parsetree.Item_bit 1));
        ("UseModMapMods", (Parsetree.Item_bit 2));
        ("GroupAbsolute", (Parsetree.Item_bit 2))];
      doc = None};
    Parsetree.Enum {name = "SAType";
      items =
      [("NoAction", (Parsetree.Item_value 0L));
        ("SetMods", (Parsetree.Item_value 1L));
        ("LatchMods", (Parsetree.Item_value 2L));
        ("LockMods", (Parsetree.Item_value 3L));
        ("SetGroup", (Parsetree.Item_value 4L));
        ("LatchGroup", (Parsetree.Item_value 5L));
        ("LockGroup", (Parsetree.Item_value 6L));
        ("MovePtr", (Parsetree.Item_value 7L));
        ("PtrBtn", (Parsetree.Item_value 8L));
        ("LockPtrBtn", (Parsetree.Item_value 9L));
        ("SetPtrDflt", (Parsetree.Item_value 10L));
        ("ISOLock", (Parsetree.Item_value 11L));
        ("Terminate", (Parsetree.Item_value 12L));
        ("SwitchScreen", (Parsetree.Item_value 13L));
        ("SetControls", (Parsetree.Item_value 14L));
        ("LockControls", (Parsetree.Item_value 15L));
        ("ActionMessage", (Parsetree.Item_value 16L));
        ("RedirectKey", (Parsetree.Item_value 17L));
        ("DeviceBtn", (Parsetree.Item_value 18L));
        ("LockDeviceBtn", (Parsetree.Item_value 19L));
        ("DeviceValuator", (Parsetree.Item_value 20L))];
      doc = None};
    Parsetree.Struct {name = "SANoAction";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 7); serialize = false}
        ]};
    Parsetree.Struct {name = "SASetMods";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "SA" }))
            }};
        Parsetree.Field {name = "mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "realMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "vmodsHigh";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VModsHigh" }))
            }};
        Parsetree.Field {name = "vmodsLow";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VModsLow" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ]};
    Parsetree.Typedef {name = "SALatchMods";
      type_ =
      (Parsetree.Type_ref
         { Parsetree.id_module = None; id_name = "SASetMods" })};
    Parsetree.Typedef {name = "SALockMods";
      type_ =
      (Parsetree.Type_ref
         { Parsetree.id_module = None; id_name = "SASetMods" })};
    Parsetree.Struct {name = "SASetGroup";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "SA" }))
            }};
        Parsetree.Field {name = "group";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 5); serialize = false}
        ]};
    Parsetree.Typedef {name = "SALatchGroup";
      type_ =
      (Parsetree.Type_ref
         { Parsetree.id_module = None; id_name = "SASetGroup" })};
    Parsetree.Typedef {name = "SALockGroup";
      type_ =
      (Parsetree.Type_ref
         { Parsetree.id_module = None; id_name = "SASetGroup" })};
    Parsetree.Enum {name = "SAMovePtrFlag";
      items =
      [("NoAcceleration", (Parsetree.Item_bit 0));
        ("MoveAbsoluteX", (Parsetree.Item_bit 1));
        ("MoveAbsoluteY", (Parsetree.Item_bit 2))];
      doc = None};
    Parsetree.Struct {name = "SAMovePtr";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "SAMovePtrFlag"
                       }))
            }};
        Parsetree.Field {name = "xHigh";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int8);
            ft_allowed = None }};
        Parsetree.Field {name = "xLow";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "yHigh";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int8);
            ft_allowed = None }};
        Parsetree.Field {name = "yLow";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ]};
    Parsetree.Struct {name = "SAPtrBtn";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "count";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "button";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4); serialize = false}
        ]};
    Parsetree.Struct {name = "SALockPtrBtn";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "button";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4); serialize = false}
        ]};
    Parsetree.Enum {name = "SASetPtrDfltFlag";
      items =
      [("DfltBtnAbsolute", (Parsetree.Item_bit 2));
        ("AffectDfltButton", (Parsetree.Item_bit 0))];
      doc = None};
    Parsetree.Struct {name = "SASetPtrDflt";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None;
                       id_name = "SASetPtrDfltFlag" }))
            }};
        Parsetree.Field {name = "affect";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None;
                       id_name = "SASetPtrDfltFlag" }))
            }};
        Parsetree.Field {name = "value";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4); serialize = false}
        ]};
    Parsetree.Enum {name = "SAIsoLockFlag";
      items =
      [("NoLock", (Parsetree.Item_bit 0));
        ("NoUnlock", (Parsetree.Item_bit 1));
        ("UseModMapMods", (Parsetree.Item_bit 2));
        ("GroupAbsolute", (Parsetree.Item_bit 2));
        ("ISODfltIsGroup", (Parsetree.Item_bit 3))];
      doc = None};
    Parsetree.Enum {name = "SAIsoLockNoAffect";
      items =
      [("Ctrls", (Parsetree.Item_bit 3)); ("Ptr", (Parsetree.Item_bit 4));
        ("Group", (Parsetree.Item_bit 5)); ("Mods", (Parsetree.Item_bit 6))];
      doc = None};
    Parsetree.Struct {name = "SAIsoLock";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "SAIsoLockFlag"
                       }))
            }};
        Parsetree.Field {name = "mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "realMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "group";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int8);
            ft_allowed = None }};
        Parsetree.Field {name = "affect";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None;
                       id_name = "SAIsoLockNoAffect" }))
            }};
        Parsetree.Field {name = "vmodsHigh";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VModsHigh" }))
            }};
        Parsetree.Field {name = "vmodsLow";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VModsLow" }))
            }}
        ]};
    Parsetree.Struct {name = "SATerminate";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 7); serialize = false}
        ]};
    Parsetree.Enum {name = "SwitchScreenFlag";
      items =
      [("Application", (Parsetree.Item_bit 0));
        ("Absolute", (Parsetree.Item_bit 2))];
      doc = None};
    Parsetree.Struct {name = "SASwitchScreen";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "newScreen";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 5); serialize = false}
        ]};
    Parsetree.Enum {name = "BoolCtrlsHigh";
      items =
      [("AccessXFeedback", (Parsetree.Item_bit 0));
        ("AudibleBell", (Parsetree.Item_bit 1));
        ("Overlay1", (Parsetree.Item_bit 2));
        ("Overlay2", (Parsetree.Item_bit 3));
        ("IgnoreGroupLock", (Parsetree.Item_bit 4))];
      doc = None};
    Parsetree.Enum {name = "BoolCtrlsLow";
      items =
      [("RepeatKeys", (Parsetree.Item_bit 0));
        ("SlowKeys", (Parsetree.Item_bit 1));
        ("BounceKeys", (Parsetree.Item_bit 2));
        ("StickyKeys", (Parsetree.Item_bit 3));
        ("MouseKeys", (Parsetree.Item_bit 4));
        ("MouseKeysAccel", (Parsetree.Item_bit 5));
        ("AccessXKeys", (Parsetree.Item_bit 6));
        ("AccessXTimeout", (Parsetree.Item_bit 7))];
      doc = None};
    Parsetree.Struct {name = "SASetControls";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "boolCtrlsHigh";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "BoolCtrlsHigh"
                       }))
            }};
        Parsetree.Field {name = "boolCtrlsLow";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "BoolCtrlsLow" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ]};
    Parsetree.Typedef {name = "SALockControls";
      type_ =
      (Parsetree.Type_ref
         { Parsetree.id_module = None; id_name = "SASetControls" })};
    Parsetree.Enum {name = "ActionMessageFlag";
      items =
      [("OnPress", (Parsetree.Item_bit 0));
        ("OnRelease", (Parsetree.Item_bit 1));
        ("GenKeyEvent", (Parsetree.Item_bit 2))];
      doc = None};
    Parsetree.Struct {name = "SAActionMessage";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None;
                       id_name = "ActionMessageFlag" }))
            }};
        Parsetree.Field_list {name = "message";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 6L))}
        ]};
    Parsetree.Struct {name = "SARedirectKey";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field {name = "newkey";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "realModifiers";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "vmodsMaskHigh";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VModsHigh" }))
            }};
        Parsetree.Field {name = "vmodsMaskLow";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VModsLow" }))
            }};
        Parsetree.Field {name = "vmodsHigh";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VModsHigh" }))
            }};
        Parsetree.Field {name = "vmodsLow";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VModsLow" }))
            }}
        ]};
    Parsetree.Struct {name = "SADeviceBtn";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "count";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "button";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "device";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ]};
    Parsetree.Enum {name = "LockDeviceFlags";
      items =
      [("NoLock", (Parsetree.Item_bit 0));
        ("NoUnlock", (Parsetree.Item_bit 1))];
      doc = None};
    Parsetree.Struct {name = "SALockDeviceBtn";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None;
                       id_name = "LockDeviceFlags" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "button";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "device";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ]};
    Parsetree.Enum {name = "SAValWhat";
      items =
      [("IgnoreVal", (Parsetree.Item_value 0L));
        ("SetValMin", (Parsetree.Item_value 1L));
        ("SetValCenter", (Parsetree.Item_value 2L));
        ("SetValMax", (Parsetree.Item_value 3L));
        ("SetValRelative", (Parsetree.Item_value 4L));
        ("SetValAbsolute", (Parsetree.Item_value 5L))];
      doc = None};
    Parsetree.Struct {name = "SADeviceValuator";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field {name = "device";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "val1what";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SAValWhat" }))
            }};
        Parsetree.Field {name = "val1index";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "val1value";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "val2what";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SAValWhat" }))
            }};
        Parsetree.Field {name = "val2index";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "val2value";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "SIAction";
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None; id_name = "SAType" }))
           }};
        Parsetree.Field_list {name = "data";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 7L))}
        ]};
    Parsetree.Struct {name = "SymInterpret";
      fields =
      [Parsetree.Field {name = "sym";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "KEYSYM" });
           ft_allowed = None }};
        Parsetree.Field {name = "mods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "match";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None;
                       id_name = "SymInterpretMatch" }))
            }};
        Parsetree.Field {name = "virtualMod";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VModsLow" }))
            }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "action";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SIAction" });
            ft_allowed = None }}
        ]};
    Parsetree.Union {name = "Action";
      members =
      [Parsetree.Field {name = "noaction";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "SANoAction" });
           ft_allowed = None }};
        Parsetree.Field {name = "setmods";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SASetMods" });
            ft_allowed = None }};
        Parsetree.Field {name = "latchmods";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SALatchMods" });
            ft_allowed = None }};
        Parsetree.Field {name = "lockmods";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SALockMods" });
            ft_allowed = None }};
        Parsetree.Field {name = "setgroup";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SASetGroup" });
            ft_allowed = None }};
        Parsetree.Field {name = "latchgroup";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SALatchGroup" });
            ft_allowed = None }};
        Parsetree.Field {name = "lockgroup";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SALockGroup" });
            ft_allowed = None }};
        Parsetree.Field {name = "moveptr";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SAMovePtr" });
            ft_allowed = None }};
        Parsetree.Field {name = "ptrbtn";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SAPtrBtn" });
            ft_allowed = None }};
        Parsetree.Field {name = "lockptrbtn";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SALockPtrBtn" });
            ft_allowed = None }};
        Parsetree.Field {name = "setptrdflt";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SASetPtrDflt" });
            ft_allowed = None }};
        Parsetree.Field {name = "isolock";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SAIsoLock" });
            ft_allowed = None }};
        Parsetree.Field {name = "terminate";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SATerminate" });
            ft_allowed = None }};
        Parsetree.Field {name = "switchscreen";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SASwitchScreen" });
            ft_allowed = None }};
        Parsetree.Field {name = "setcontrols";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SASetControls" });
            ft_allowed = None }};
        Parsetree.Field {name = "lockcontrols";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SALockControls" });
            ft_allowed = None }};
        Parsetree.Field {name = "message";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SAActionMessage" });
            ft_allowed = None }};
        Parsetree.Field {name = "redirect";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SARedirectKey" });
            ft_allowed = None }};
        Parsetree.Field {name = "devbtn";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SADeviceBtn" });
            ft_allowed = None }};
        Parsetree.Field {name = "lockdevbtn";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SALockDeviceBtn" });
            ft_allowed = None }};
        Parsetree.Field {name = "devval";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SADeviceValuator" });
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SAType" }))
            }}
        ]};
    Parsetree.Request {name = "UseExtension"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "wantedMajor";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field {name = "wantedMinor";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "supported";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Bool);
                   ft_allowed = None }};
                Parsetree.Field {name = "serverMajor";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "serverMinor";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SelectEvents"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "affectWhich";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "EventType" }))
            }};
        Parsetree.Field {name = "clear";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "EventType" }))
            }};
        Parsetree.Field {name = "selectAll";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "EventType" }))
            }};
        Parsetree.Field {name = "affectMap";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "MapPart" }))
            }};
        Parsetree.Field {name = "map";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "MapPart" }))
            }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "details";
             sw_cond =
             (Parsetree.Cond_bit_and
                (Parsetree.Binop (Parsetree.Bit_and,
                   (Parsetree.Field_ref "affectWhich"),
                   (Parsetree.Binop (Parsetree.Bit_and,
                      (Parsetree.Unop (Parsetree.Bit_not,
                         (Parsetree.Field_ref "clear"))),
                      (Parsetree.Unop (Parsetree.Bit_not,
                         (Parsetree.Field_ref "selectAll")))
                      ))
                   )));
             sw_cases =
             [{ Parsetree.cs_name = None;
                cs_cond =
                [Parsetree.Enum_ref {
                   enum =
                   { Parsetree.id_module = None; id_name = "EventType" };
                   item = "NewKeyboardNotify"}
                  ];
                cs_fields =
                [Parsetree.Field {name = "affectNewKeyboard";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed =
                     (Some (Parsetree.Allowed_mask
                              { Parsetree.id_module = None;
                                id_name = "NKNDetail" }))
                     }};
                  Parsetree.Field {name = "newKeyboardDetails";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card16);
                      ft_allowed =
                      (Some (Parsetree.Allowed_mask
                               { Parsetree.id_module = None;
                                 id_name = "NKNDetail" }))
                      }}
                  ]
                };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "EventType" };
                    item = "StateNotify"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "affectState";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card16);
                      ft_allowed =
                      (Some (Parsetree.Allowed_mask
                               { Parsetree.id_module = None;
                                 id_name = "StatePart" }))
                      }};
                   Parsetree.Field {name = "stateDetails";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card16);
                       ft_allowed =
                       (Some (Parsetree.Allowed_mask
                                { Parsetree.id_module = None;
                                  id_name = "StatePart" }))
                       }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "EventType" };
                    item = "ControlsNotify"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "affectCtrls";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_mask
                               { Parsetree.id_module = None;
                                 id_name = "Control" }))
                      }};
                   Parsetree.Field {name = "ctrlDetails";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_mask
                                { Parsetree.id_module = None;
                                  id_name = "Control" }))
                       }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "EventType" };
                    item = "IndicatorStateNotify"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "affectIndicatorState";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }};
                   Parsetree.Field {name = "indicatorStateDetails";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "EventType" };
                    item = "IndicatorMapNotify"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "affectIndicatorMap";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed = None }};
                   Parsetree.Field {name = "indicatorMapDetails";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "EventType" };
                    item = "NamesNotify"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "affectNames";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card16);
                      ft_allowed =
                      (Some (Parsetree.Allowed_mask
                               { Parsetree.id_module = None;
                                 id_name = "NameDetail" }))
                      }};
                   Parsetree.Field {name = "namesDetails";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card16);
                       ft_allowed =
                       (Some (Parsetree.Allowed_mask
                                { Parsetree.id_module = None;
                                  id_name = "NameDetail" }))
                       }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "EventType" };
                    item = "CompatMapNotify"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "affectCompat";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed =
                      (Some (Parsetree.Allowed_mask
                               { Parsetree.id_module = None;
                                 id_name = "CMDetail" }))
                      }};
                   Parsetree.Field {name = "compatDetails";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card8);
                       ft_allowed =
                       (Some (Parsetree.Allowed_mask
                                { Parsetree.id_module = None;
                                  id_name = "CMDetail" }))
                       }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "EventType" };
                    item = "BellNotify"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "affectBell";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None }};
                   Parsetree.Field {name = "bellDetails";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card8);
                       ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "EventType" };
                    item = "ActionMessage"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "affectMsgDetails";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None }};
                   Parsetree.Field {name = "msgDetails";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card8);
                       ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "EventType" };
                    item = "AccessXNotify"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "affectAccessX";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card16);
                      ft_allowed =
                      (Some (Parsetree.Allowed_mask
                               { Parsetree.id_module = None;
                                 id_name = "AXNDetail" }))
                      }};
                   Parsetree.Field {name = "accessXDetails";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card16);
                       ft_allowed =
                       (Some (Parsetree.Allowed_mask
                                { Parsetree.id_module = None;
                                  id_name = "AXNDetail" }))
                       }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "EventType" };
                    item = "ExtensionDeviceNotify"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "affectExtDev";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card16);
                      ft_allowed =
                      (Some (Parsetree.Allowed_mask
                               { Parsetree.id_module = None;
                                 id_name = "XIFeature" }))
                      }};
                   Parsetree.Field {name = "extdevDetails";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card16);
                       ft_allowed =
                       (Some (Parsetree.Allowed_mask
                                { Parsetree.id_module = None;
                                  id_name = "XIFeature" }))
                       }}
                   ]
                 }
               ]
             })
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "Bell"; opcode = 3; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "bellClass";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "BellClassSpec" });
            ft_allowed = None }};
        Parsetree.Field {name = "bellID";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "IDSpec" });
            ft_allowed = None }};
        Parsetree.Field {name = "percent";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int8);
            ft_allowed = None }};
        Parsetree.Field {name = "forceSound";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "eventOnly";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "pitch";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "duration";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "name";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetState"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "deviceID";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "mods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModMask" }))
                    }};
                Parsetree.Field {name = "baseMods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModMask" }))
                    }};
                Parsetree.Field {name = "latchedMods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModMask" }))
                    }};
                Parsetree.Field {name = "lockedMods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModMask" }))
                    }};
                Parsetree.Field {name = "group";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None; id_name = "Group"
                               }))
                    }};
                Parsetree.Field {name = "lockedGroup";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None; id_name = "Group"
                               }))
                    }};
                Parsetree.Field {name = "baseGroup";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "latchedGroup";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "compatState";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModMask" }))
                    }};
                Parsetree.Field {name = "grabMods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModMask" }))
                    }};
                Parsetree.Field {name = "compatGrabMods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModMask" }))
                    }};
                Parsetree.Field {name = "lookupMods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModMask" }))
                    }};
                Parsetree.Field {name = "compatLookupMods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModMask" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                Parsetree.Field {name = "ptrBtnState";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "KeyButMask" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 6);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "LatchLockState"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "affectModLocks";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "modLocks";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "lockGroup";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "groupLock";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Group" }))
            }};
        Parsetree.Field {name = "affectModLatches";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "latchGroup";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "groupLatch";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetControls"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "deviceID";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "mouseKeysDfltBtn";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "numGroups";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "groupsWrap";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "internalModsMask";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModMask" }))
                    }};
                Parsetree.Field {name = "ignoreLockModsMask";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModMask" }))
                    }};
                Parsetree.Field {name = "internalModsRealMods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModMask" }))
                    }};
                Parsetree.Field {name = "ignoreLockModsRealMods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModMask" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                Parsetree.Field {name = "internalModsVmods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None; id_name = "VMod" }))
                    }};
                Parsetree.Field {name = "ignoreLockModsVmods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None; id_name = "VMod" }))
                    }};
                Parsetree.Field {name = "repeatDelay";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "repeatInterval";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "slowKeysDelay";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "debounceDelay";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "mouseKeysDelay";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "mouseKeysInterval";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "mouseKeysTimeToMax";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "mouseKeysMaxSpeed";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "mouseKeysCurve";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int16);
                    ft_allowed = None }};
                Parsetree.Field {name = "accessXOption";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "AXOption" }))
                    }};
                Parsetree.Field {name = "accessXTimeout";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "accessXTimeoutOptionsMask";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "AXOption" }))
                    }};
                Parsetree.Field {name = "accessXTimeoutOptionsValues";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "AXOption" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                  serialize = false};
                Parsetree.Field {name = "accessXTimeoutMask";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "BoolCtrl" }))
                    }};
                Parsetree.Field {name = "accessXTimeoutValues";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "BoolCtrl" }))
                    }};
                Parsetree.Field {name = "enabledControls";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "BoolCtrl" }))
                    }};
                Parsetree.Field_list {name = "perKeyRepeat";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None };
                  length = (Some (Parsetree.Expr_value 32L))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetControls"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "affectInternalRealMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "internalRealMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "affectIgnoreLockRealMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "ignoreLockRealMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "affectInternalVirtualMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }};
        Parsetree.Field {name = "internalVirtualMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }};
        Parsetree.Field {name = "affectIgnoreLockVirtualMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }};
        Parsetree.Field {name = "ignoreLockVirtualMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }};
        Parsetree.Field {name = "mouseKeysDfltBtn";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "groupsWrap";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "accessXOptions";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "AXOption" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "affectEnabledControls";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "BoolCtrl" }))
            }};
        Parsetree.Field {name = "enabledControls";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "BoolCtrl" }))
            }};
        Parsetree.Field {name = "changeControls";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "Control" }))
            }};
        Parsetree.Field {name = "repeatDelay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "repeatInterval";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "slowKeysDelay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "debounceDelay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "mouseKeysDelay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "mouseKeysInterval";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "mouseKeysTimeToMax";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "mouseKeysMaxSpeed";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "mouseKeysCurve";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "accessXTimeout";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "accessXTimeoutMask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "BoolCtrl" }))
            }};
        Parsetree.Field {name = "accessXTimeoutValues";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "BoolCtrl" }))
            }};
        Parsetree.Field {name = "accessXTimeoutOptionsMask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "AXOption" }))
            }};
        Parsetree.Field {name = "accessXTimeoutOptionsValues";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "AXOption" }))
            }};
        Parsetree.Field_list {name = "perKeyRepeat";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 32L))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetMap"; opcode = 8; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "full";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "MapPart" }))
            }};
        Parsetree.Field {name = "partial";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "MapPart" }))
            }};
        Parsetree.Field {name = "firstType";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "nTypes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstKeySym";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nKeySyms";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstKeyAction";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nKeyActions";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstKeyBehavior";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nKeyBehaviors";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "virtualMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }};
        Parsetree.Field {name = "firstKeyExplicit";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nKeyExplicit";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstModMapKey";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nModMapKeys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstVModMapKey";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nVModMapKeys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "deviceID";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                  serialize = false};
                Parsetree.Field {name = "minKeyCode";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "KEYCODE" });
                    ft_allowed = None }};
                Parsetree.Field {name = "maxKeyCode";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "KEYCODE" });
                    ft_allowed = None }};
                Parsetree.Field {name = "present";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "MapPart" }))
                    }};
                Parsetree.Field {name = "firstType";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "nTypes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "totalTypes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "firstKeySym";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "KEYCODE" });
                    ft_allowed = None }};
                Parsetree.Field {name = "totalSyms";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "nKeySyms";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "firstKeyAction";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "KEYCODE" });
                    ft_allowed = None }};
                Parsetree.Field {name = "totalActions";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "nKeyActions";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "firstKeyBehavior";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "KEYCODE" });
                    ft_allowed = None }};
                Parsetree.Field {name = "nKeyBehaviors";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "totalKeyBehaviors";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "firstKeyExplicit";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "KEYCODE" });
                    ft_allowed = None }};
                Parsetree.Field {name = "nKeyExplicit";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "totalKeyExplicit";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "firstModMapKey";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "KEYCODE" });
                    ft_allowed = None }};
                Parsetree.Field {name = "nModMapKeys";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "totalModMapKeys";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "firstVModMapKey";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "KEYCODE" });
                    ft_allowed = None }};
                Parsetree.Field {name = "nVModMapKeys";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "totalVModMapKeys";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                Parsetree.Field {name = "virtualMods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None; id_name = "VMod" }))
                    }};
                (Parsetree.Field_switch
                   { Parsetree.sw_name = "map";
                     sw_cond =
                     (Parsetree.Cond_bit_and (Parsetree.Field_ref "present"));
                     sw_cases =
                     [{ Parsetree.cs_name = None;
                        cs_cond =
                        [Parsetree.Enum_ref {
                           enum =
                           { Parsetree.id_module = None; id_name = "MapPart"
                             };
                           item = "KeyTypes"}
                          ];
                        cs_fields =
                        [Parsetree.Field_list {name = "types_rtrn";
                           type_ =
                           { Parsetree.ft_type =
                             (Parsetree.Type_ref
                                { Parsetree.id_module = None;
                                  id_name = "KeyType" });
                             ft_allowed = None };
                           length = (Some (Parsetree.Field_ref "nTypes"))}
                          ]
                        };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None; id_name = "MapPart"
                              };
                            item = "KeySyms"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "syms_rtrn";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "KeySymMap" });
                              ft_allowed = None };
                            length = (Some (Parsetree.Field_ref "nKeySyms"))}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None; id_name = "MapPart"
                              };
                            item = "KeyActions"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "acts_rtrn_count";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None };
                            length =
                            (Some (Parsetree.Field_ref "nKeyActions"))};
                           Parsetree.Field_pad {
                             pad = (Parsetree.Pad_align 4); serialize = true};
                           Parsetree.Field_list {name = "acts_rtrn_acts";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_ref
                                  { Parsetree.id_module = None;
                                    id_name = "Action" });
                               ft_allowed = None };
                             length =
                             (Some (Parsetree.Field_ref "totalActions"))}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None; id_name = "MapPart"
                              };
                            item = "KeyBehaviors"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "behaviors_rtrn";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "SetBehavior" });
                              ft_allowed = None };
                            length =
                            (Some (Parsetree.Field_ref "totalKeyBehaviors"))}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None; id_name = "MapPart"
                              };
                            item = "VirtualMods"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "vmods_rtrn";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed =
                              (Some (Parsetree.Allowed_mask
                                       { Parsetree.id_module = None;
                                         id_name = "ModMask" }))
                              };
                            length =
                            (Some (Parsetree.Pop_count
                                     (Parsetree.Field_ref "virtualMods")))};
                           Parsetree.Field_pad {
                             pad = (Parsetree.Pad_align 4); serialize = true}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None; id_name = "MapPart"
                              };
                            item = "ExplicitComponents"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "explicit_rtrn";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "SetExplicit" });
                              ft_allowed = None };
                            length =
                            (Some (Parsetree.Field_ref "totalKeyExplicit"))};
                           Parsetree.Field_pad {
                             pad = (Parsetree.Pad_align 4); serialize = true}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None; id_name = "MapPart"
                              };
                            item = "ModifierMap"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "modmap_rtrn";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "KeyModMap" });
                              ft_allowed = None };
                            length =
                            (Some (Parsetree.Field_ref "totalModMapKeys"))};
                           Parsetree.Field_pad {
                             pad = (Parsetree.Pad_align 4); serialize = true}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None; id_name = "MapPart"
                              };
                            item = "VirtualModMap"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "vmodmap_rtrn";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "KeyVModMap" });
                              ft_allowed = None };
                            length =
                            (Some (Parsetree.Field_ref "totalVModMapKeys"))}
                           ]
                         }
                       ]
                     })
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetMap"; opcode = 9; combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "present";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "MapPart" }))
            }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "SetMapFlags" }))
            }};
        Parsetree.Field {name = "minKeyCode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "maxKeyCode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "firstType";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "nTypes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstKeySym";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nKeySyms";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "totalSyms";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "firstKeyAction";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nKeyActions";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "totalActions";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "firstKeyBehavior";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nKeyBehaviors";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "totalKeyBehaviors";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstKeyExplicit";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nKeyExplicit";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "totalKeyExplicit";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstModMapKey";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nModMapKeys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "totalModMapKeys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstVModMapKey";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nVModMapKeys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "totalVModMapKeys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "virtualMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "values";
             sw_cond =
             (Parsetree.Cond_bit_and (Parsetree.Field_ref "present"));
             sw_cases =
             [{ Parsetree.cs_name = None;
                cs_cond =
                [Parsetree.Enum_ref {
                   enum = { Parsetree.id_module = None; id_name = "MapPart" };
                   item = "KeyTypes"}
                  ];
                cs_fields =
                [Parsetree.Field_list {name = "types";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "SetKeyType"
                          });
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "nTypes"))}
                  ]
                };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "MapPart" };
                    item = "KeySyms"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "syms";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "KeySymMap"
                           });
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "nKeySyms"))}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "MapPart" };
                    item = "KeyActions"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "actionsCount";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "nKeyActions"))};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                     serialize = false};
                   Parsetree.Field_list {name = "actions";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "Action" });
                       ft_allowed = None };
                     length = (Some (Parsetree.Field_ref "totalActions"))}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "MapPart" };
                    item = "KeyBehaviors"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "behaviors";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None;
                           id_name = "SetBehavior" });
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "totalKeyBehaviors"))}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "MapPart" };
                    item = "VirtualMods"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "vmods";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None };
                    length =
                    (Some (Parsetree.Pop_count
                             (Parsetree.Field_ref "virtualMods")))};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                     serialize = false}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "MapPart" };
                    item = "ExplicitComponents"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "explicit";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None;
                           id_name = "SetExplicit" });
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "totalKeyExplicit"))}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "MapPart" };
                    item = "ModifierMap"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "modmap";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "KeyModMap"
                           });
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "totalModMapKeys"))}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "MapPart" };
                    item = "VirtualModMap"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "vmodmap";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "KeyVModMap"
                           });
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "totalVModMapKeys"))}
                   ]
                 }
               ]
             })
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetCompatMap"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "groups";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "SetOfGroup" }))
            }};
        Parsetree.Field {name = "getAllSI";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "firstSI";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "nSI";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "deviceID";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "groupsRtrn";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "SetOfGroup" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                Parsetree.Field {name = "firstSIRtrn";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "nSIRtrn";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "nTotalSI";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false};
                Parsetree.Field_list {name = "si_rtrn";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "SymInterpret"
                         });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nSIRtrn"))};
                Parsetree.Field_list {name = "group_rtrn";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ModDef" });
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Pop_count
                           (Parsetree.Field_ref "groupsRtrn")))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetCompatMap"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "recomputeActions";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "truncateSI";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "groups";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "SetOfGroup" }))
            }};
        Parsetree.Field {name = "firstSI";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "nSI";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "si";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SymInterpret" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nSI"))};
        Parsetree.Field_list {name = "groupMaps";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ModDef" });
            ft_allowed = None };
          length =
          (Some (Parsetree.Pop_count (Parsetree.Field_ref "groups")))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetIndicatorState"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "deviceID";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "state";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetIndicatorMap"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "which";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "deviceID";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "which";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "realIndicators";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "nIndicators";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 15);
                  serialize = false};
                Parsetree.Field_list {name = "maps";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "IndicatorMap"
                         });
                    ft_allowed = None };
                  length =
                  (Some (Parsetree.Pop_count (Parsetree.Field_ref "which")))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetIndicatorMap"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "which";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "maps";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "IndicatorMap" });
            ft_allowed = None };
          length = (Some (Parsetree.Pop_count (Parsetree.Field_ref "which")))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetNamedIndicator"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "ledClass";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "LedClassSpec" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "LedClass" }))
            }};
        Parsetree.Field {name = "ledID";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "IDSpec" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ID" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "indicator";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "deviceID";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "indicator";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ATOM" });
                    ft_allowed = None }};
                Parsetree.Field {name = "found";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field {name = "on";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field {name = "realIndicator";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field {name = "ndx";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "map_flags";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None; id_name = "IMFlag"
                               }))
                    }};
                Parsetree.Field {name = "map_whichGroups";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "IMGroupsWhich" }))
                    }};
                Parsetree.Field {name = "map_groups";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "SetOfGroups" }))
                    }};
                Parsetree.Field {name = "map_whichMods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "IMModsWhich" }))
                    }};
                Parsetree.Field {name = "map_mods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModMask" }))
                    }};
                Parsetree.Field {name = "map_realMods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "ModMask" }))
                    }};
                Parsetree.Field {name = "map_vmod";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None; id_name = "VMod" }))
                    }};
                Parsetree.Field {name = "map_ctrls";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "BoolCtrl" }))
                    }};
                Parsetree.Field {name = "supported";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetNamedIndicator"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "ledClass";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "LedClassSpec" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "LedClass" }))
            }};
        Parsetree.Field {name = "ledID";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "IDSpec" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ID" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "indicator";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "setState";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "on";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "setMap";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "createMap";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "map_flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "IMFlag" }))
            }};
        Parsetree.Field {name = "map_whichGroups";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "IMGroupsWhich"
                       }))
            }};
        Parsetree.Field {name = "map_groups";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "SetOfGroups" }))
            }};
        Parsetree.Field {name = "map_whichMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "IMModsWhich" }))
            }};
        Parsetree.Field {name = "map_realMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "map_vmods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }};
        Parsetree.Field {name = "map_ctrls";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "BoolCtrl" }))
            }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetNames"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "which";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "NameDetail" }))
            }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "deviceID";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "which";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "NameDetail" }))
                    }};
                Parsetree.Field {name = "minKeyCode";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "KEYCODE" });
                    ft_allowed = None }};
                Parsetree.Field {name = "maxKeyCode";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "KEYCODE" });
                    ft_allowed = None }};
                Parsetree.Field {name = "nTypes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "groupNames";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "SetOfGroup" }))
                    }};
                Parsetree.Field {name = "virtualMods";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None; id_name = "VMod" }))
                    }};
                Parsetree.Field {name = "firstKey";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "KEYCODE" });
                    ft_allowed = None }};
                Parsetree.Field {name = "nKeys";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "indicators";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "nRadioGroups";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "nKeyAliases";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "nKTLevels";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                  serialize = false};
                (Parsetree.Field_switch
                   { Parsetree.sw_name = "valueList";
                     sw_cond =
                     (Parsetree.Cond_bit_and (Parsetree.Field_ref "which"));
                     sw_cases =
                     [{ Parsetree.cs_name = None;
                        cs_cond =
                        [Parsetree.Enum_ref {
                           enum =
                           { Parsetree.id_module = None;
                             id_name = "NameDetail" };
                           item = "Keycodes"}
                          ];
                        cs_fields =
                        [Parsetree.Field {name = "keycodesName";
                           type_ =
                           { Parsetree.ft_type =
                             (Parsetree.Type_ref
                                { Parsetree.id_module = None;
                                  id_name = "ATOM" });
                             ft_allowed = None }}
                          ]
                        };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "NameDetail" };
                            item = "Geometry"}
                           ];
                         cs_fields =
                         [Parsetree.Field {name = "geometryName";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "ATOM" });
                              ft_allowed = None }}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "NameDetail" };
                            item = "Symbols"}
                           ];
                         cs_fields =
                         [Parsetree.Field {name = "symbolsName";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "ATOM" });
                              ft_allowed = None }}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "NameDetail" };
                            item = "PhysSymbols"}
                           ];
                         cs_fields =
                         [Parsetree.Field {name = "physSymbolsName";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "ATOM" });
                              ft_allowed = None }}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "NameDetail" };
                            item = "Types"}
                           ];
                         cs_fields =
                         [Parsetree.Field {name = "typesName";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "ATOM" });
                              ft_allowed = None }}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "NameDetail" };
                            item = "Compat"}
                           ];
                         cs_fields =
                         [Parsetree.Field {name = "compatName";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "ATOM" });
                              ft_allowed = None }}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "NameDetail" };
                            item = "KeyTypeNames"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "typeNames";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "ATOM" });
                              ft_allowed = None };
                            length = (Some (Parsetree.Field_ref "nTypes"))}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "NameDetail" };
                            item = "KTLevelNames"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "nLevelsPerType";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None };
                            length = (Some (Parsetree.Field_ref "nTypes"))};
                           Parsetree.Field_pad {
                             pad = (Parsetree.Pad_align 4); serialize = true};
                           Parsetree.Field_list {name = "ktLevelNames";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_ref
                                  { Parsetree.id_module = None;
                                    id_name = "ATOM" });
                               ft_allowed = None };
                             length =
                             (Some Parsetree.Sum_of {
                                     field = "nLevelsPerType"; by_expr = None})}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "NameDetail" };
                            item = "IndicatorNames"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "indicatorNames";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "ATOM" });
                              ft_allowed = None };
                            length =
                            (Some (Parsetree.Pop_count
                                     (Parsetree.Field_ref "indicators")))}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "NameDetail" };
                            item = "VirtualModNames"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "virtualModNames";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "ATOM" });
                              ft_allowed = None };
                            length =
                            (Some (Parsetree.Pop_count
                                     (Parsetree.Field_ref "virtualMods")))}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "NameDetail" };
                            item = "GroupNames"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "groups";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "ATOM" });
                              ft_allowed = None };
                            length =
                            (Some (Parsetree.Pop_count
                                     (Parsetree.Field_ref "groupNames")))}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "NameDetail" };
                            item = "KeyNames"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "keyNames";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "KeyName" });
                              ft_allowed = None };
                            length = (Some (Parsetree.Field_ref "nKeys"))}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "NameDetail" };
                            item = "KeyAliases"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "keyAliases";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "KeyAlias" });
                              ft_allowed = None };
                            length =
                            (Some (Parsetree.Field_ref "nKeyAliases"))}
                           ]
                         };
                       { Parsetree.cs_name = None;
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "NameDetail" };
                            item = "RGNames"}
                           ];
                         cs_fields =
                         [Parsetree.Field_list {name = "radioGroupNames";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "ATOM" });
                              ft_allowed = None };
                            length =
                            (Some (Parsetree.Field_ref "nRadioGroups"))}
                           ]
                         }
                       ]
                     })
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetNames"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "virtualMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }};
        Parsetree.Field {name = "which";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "NameDetail" }))
            }};
        Parsetree.Field {name = "firstType";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "nTypes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstKTLevelt";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "nKTLevels";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "indicators";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "groupNames";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "SetOfGroup" }))
            }};
        Parsetree.Field {name = "nRadioGroups";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstKey";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nKeys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "nKeyAliases";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "totalKTLevelNames";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        (Parsetree.Field_switch
           { Parsetree.sw_name = "values";
             sw_cond = (Parsetree.Cond_bit_and (Parsetree.Field_ref "which"));
             sw_cases =
             [{ Parsetree.cs_name = None;
                cs_cond =
                [Parsetree.Enum_ref {
                   enum =
                   { Parsetree.id_module = None; id_name = "NameDetail" };
                   item = "Keycodes"}
                  ];
                cs_fields =
                [Parsetree.Field {name = "keycodesName";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "ATOM" });
                     ft_allowed = None }}
                  ]
                };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "NameDetail" };
                    item = "Geometry"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "geometryName";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "ATOM" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "NameDetail" };
                    item = "Symbols"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "symbolsName";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "ATOM" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "NameDetail" };
                    item = "PhysSymbols"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "physSymbolsName";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "ATOM" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "NameDetail" };
                    item = "Types"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "typesName";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "ATOM" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "NameDetail" };
                    item = "Compat"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "compatName";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "ATOM" });
                      ft_allowed = None }}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "NameDetail" };
                    item = "KeyTypeNames"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "typeNames";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "ATOM" });
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "nTypes"))}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "NameDetail" };
                    item = "KTLevelNames"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "nLevelsPerType";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card8);
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "nTypes"))};
                   Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                     serialize = false};
                   Parsetree.Field_list {name = "ktLevelNames";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "ATOM" });
                       ft_allowed = None };
                     length =
                     (Some Parsetree.Sum_of {field = "nLevelsPerType";
                             by_expr = None})}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "NameDetail" };
                    item = "IndicatorNames"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "indicatorNames";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "ATOM" });
                      ft_allowed = None };
                    length =
                    (Some (Parsetree.Pop_count
                             (Parsetree.Field_ref "indicators")))}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "NameDetail" };
                    item = "VirtualModNames"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "virtualModNames";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "ATOM" });
                      ft_allowed = None };
                    length =
                    (Some (Parsetree.Pop_count
                             (Parsetree.Field_ref "virtualMods")))}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "NameDetail" };
                    item = "GroupNames"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "groups";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "ATOM" });
                      ft_allowed = None };
                    length =
                    (Some (Parsetree.Pop_count
                             (Parsetree.Field_ref "groupNames")))}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "NameDetail" };
                    item = "KeyNames"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "keyNames";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "KeyName" });
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "nKeys"))}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "NameDetail" };
                    item = "KeyAliases"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "keyAliases";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "KeyAlias" });
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "nKeyAliases"))}
                   ]
                 };
               { Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "NameDetail" };
                    item = "RGNames"}
                   ];
                 cs_fields =
                 [Parsetree.Field_list {name = "radioGroupNames";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "ATOM" });
                      ft_allowed = None };
                    length = (Some (Parsetree.Field_ref "nRadioGroups"))}
                   ]
                 }
               ]
             })
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PerClientFlags"; opcode = 21;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "change";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "PerClientFlag"
                       }))
            }};
        Parsetree.Field {name = "value";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "PerClientFlag"
                       }))
            }};
        Parsetree.Field {name = "ctrlsToChange";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "BoolCtrl" }))
            }};
        Parsetree.Field {name = "autoCtrls";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "BoolCtrl" }))
            }};
        Parsetree.Field {name = "autoCtrlsValues";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "BoolCtrl" }))
            }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "deviceID";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "supported";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "PerClientFlag" }))
                    }};
                Parsetree.Field {name = "value";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "PerClientFlag" }))
                    }};
                Parsetree.Field {name = "autoCtrls";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "BoolCtrl" }))
                    }};
                Parsetree.Field {name = "autoCtrlsValues";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "BoolCtrl" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ListComponents"; opcode = 22;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "maxNames";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "deviceID";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "nKeymaps";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "nKeycodes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "nTypes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "nCompatMaps";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "nSymbols";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "nGeometries";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "extra";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 10);
                  serialize = false};
                Parsetree.Field_list {name = "keymaps";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "Listing" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nKeymaps"))};
                Parsetree.Field_list {name = "keycodes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "Listing" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nKeycodes"))};
                Parsetree.Field_list {name = "types";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "Listing" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nTypes"))};
                Parsetree.Field_list {name = "compatMaps";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "Listing" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nCompatMaps"))};
                Parsetree.Field_list {name = "symbols";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "Listing" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nSymbols"))};
                Parsetree.Field_list {name = "geometries";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "Listing" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nGeometries"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetKbdByName"; opcode = 23;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "need";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "GBNDetail" }))
            }};
        Parsetree.Field {name = "want";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "GBNDetail" }))
            }};
        Parsetree.Field {name = "load";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "deviceID";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "minKeyCode";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "KEYCODE" });
                    ft_allowed = None }};
                Parsetree.Field {name = "maxKeyCode";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "KEYCODE" });
                    ft_allowed = None }};
                Parsetree.Field {name = "loaded";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field {name = "newKeyboard";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field {name = "found";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "GBNDetail" }))
                    }};
                Parsetree.Field {name = "reported";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "GBNDetail" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false};
                (Parsetree.Field_switch
                   { Parsetree.sw_name = "replies";
                     sw_cond =
                     (Parsetree.Cond_bit_and (Parsetree.Field_ref "reported"));
                     sw_cases =
                     [{ Parsetree.cs_name = (Some "types");
                        cs_cond =
                        [Parsetree.Enum_ref {
                           enum =
                           { Parsetree.id_module = None;
                             id_name = "GBNDetail" };
                           item = "Types"};
                          Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "GBNDetail" };
                            item = "ClientSymbols"};
                          Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "GBNDetail" };
                            item = "ServerSymbols"}
                          ];
                        cs_fields =
                        [Parsetree.Field {name = "getmap_type";
                           type_ =
                           { Parsetree.ft_type =
                             (Parsetree.Type_primitive Parsetree.Card8);
                             ft_allowed = None }};
                          Parsetree.Field {name = "typeDeviceID";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                          Parsetree.Field {name = "getmap_sequence";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card16);
                              ft_allowed = None }};
                          Parsetree.Field {name = "getmap_length";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card32);
                              ft_allowed = None }};
                          Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                            serialize = false};
                          Parsetree.Field {name = "typeMinKeyCode";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "KEYCODE" });
                              ft_allowed = None }};
                          Parsetree.Field {name = "typeMaxKeyCode";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "KEYCODE" });
                              ft_allowed = None }};
                          Parsetree.Field {name = "present";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card16);
                              ft_allowed =
                              (Some (Parsetree.Allowed_mask
                                       { Parsetree.id_module = None;
                                         id_name = "MapPart" }))
                              }};
                          Parsetree.Field {name = "firstType";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                          Parsetree.Field {name = "nTypes";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                          Parsetree.Field {name = "totalTypes";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                          Parsetree.Field {name = "firstKeySym";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "KEYCODE" });
                              ft_allowed = None }};
                          Parsetree.Field {name = "totalSyms";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card16);
                              ft_allowed = None }};
                          Parsetree.Field {name = "nKeySyms";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                          Parsetree.Field {name = "firstKeyAction";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "KEYCODE" });
                              ft_allowed = None }};
                          Parsetree.Field {name = "totalActions";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card16);
                              ft_allowed = None }};
                          Parsetree.Field {name = "nKeyActions";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                          Parsetree.Field {name = "firstKeyBehavior";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "KEYCODE" });
                              ft_allowed = None }};
                          Parsetree.Field {name = "nKeyBehaviors";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                          Parsetree.Field {name = "totalKeyBehaviors";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                          Parsetree.Field {name = "firstKeyExplicit";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "KEYCODE" });
                              ft_allowed = None }};
                          Parsetree.Field {name = "nKeyExplicit";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                          Parsetree.Field {name = "totalKeyExplicit";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                          Parsetree.Field {name = "firstModMapKey";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "KEYCODE" });
                              ft_allowed = None }};
                          Parsetree.Field {name = "nModMapKeys";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                          Parsetree.Field {name = "totalModMapKeys";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                          Parsetree.Field {name = "firstVModMapKey";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_ref
                                 { Parsetree.id_module = None;
                                   id_name = "KEYCODE" });
                              ft_allowed = None }};
                          Parsetree.Field {name = "nVModMapKeys";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                          Parsetree.Field {name = "totalVModMapKeys";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                          Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                            serialize = false};
                          Parsetree.Field {name = "virtualMods";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card16);
                              ft_allowed =
                              (Some (Parsetree.Allowed_mask
                                       { Parsetree.id_module = None;
                                         id_name = "VMod" }))
                              }};
                          (Parsetree.Field_switch
                             { Parsetree.sw_name = "map";
                               sw_cond =
                               (Parsetree.Cond_bit_and
                                  (Parsetree.Field_ref "present"));
                               sw_cases =
                               [{ Parsetree.cs_name = None;
                                  cs_cond =
                                  [Parsetree.Enum_ref {
                                     enum =
                                     { Parsetree.id_module = None;
                                       id_name = "MapPart" };
                                     item = "KeyTypes"}
                                    ];
                                  cs_fields =
                                  [Parsetree.Field_list {name = "types_rtrn";
                                     type_ =
                                     { Parsetree.ft_type =
                                       (Parsetree.Type_ref
                                          { Parsetree.id_module = None;
                                            id_name = "KeyType" });
                                       ft_allowed = None };
                                     length =
                                     (Some (Parsetree.Field_ref "nTypes"))}
                                    ]
                                  };
                                 { Parsetree.cs_name = None;
                                   cs_cond =
                                   [Parsetree.Enum_ref {
                                      enum =
                                      { Parsetree.id_module = None;
                                        id_name = "MapPart" };
                                      item = "KeySyms"}
                                     ];
                                   cs_fields =
                                   [Parsetree.Field_list {name = "syms_rtrn";
                                      type_ =
                                      { Parsetree.ft_type =
                                        (Parsetree.Type_ref
                                           { Parsetree.id_module = None;
                                             id_name = "KeySymMap" });
                                        ft_allowed = None };
                                      length =
                                      (Some (Parsetree.Field_ref "nKeySyms"))}
                                     ]
                                   };
                                 { Parsetree.cs_name = None;
                                   cs_cond =
                                   [Parsetree.Enum_ref {
                                      enum =
                                      { Parsetree.id_module = None;
                                        id_name = "MapPart" };
                                      item = "KeyActions"}
                                     ];
                                   cs_fields =
                                   [Parsetree.Field_list {
                                      name = "acts_rtrn_count";
                                      type_ =
                                      { Parsetree.ft_type =
                                        (Parsetree.Type_primitive
                                           Parsetree.Card8);
                                        ft_allowed = None };
                                      length =
                                      (Some (Parsetree.Field_ref
                                               "nKeyActions"))};
                                     Parsetree.Field_pad {
                                       pad = (Parsetree.Pad_align 4);
                                       serialize = false};
                                     Parsetree.Field_list {
                                       name = "acts_rtrn_acts";
                                       type_ =
                                       { Parsetree.ft_type =
                                         (Parsetree.Type_ref
                                            { Parsetree.id_module = None;
                                              id_name = "Action" });
                                         ft_allowed = None };
                                       length =
                                       (Some (Parsetree.Field_ref
                                                "totalActions"))}
                                     ]
                                   };
                                 { Parsetree.cs_name = None;
                                   cs_cond =
                                   [Parsetree.Enum_ref {
                                      enum =
                                      { Parsetree.id_module = None;
                                        id_name = "MapPart" };
                                      item = "KeyBehaviors"}
                                     ];
                                   cs_fields =
                                   [Parsetree.Field_list {
                                      name = "behaviors_rtrn";
                                      type_ =
                                      { Parsetree.ft_type =
                                        (Parsetree.Type_ref
                                           { Parsetree.id_module = None;
                                             id_name = "SetBehavior" });
                                        ft_allowed = None };
                                      length =
                                      (Some (Parsetree.Field_ref
                                               "totalKeyBehaviors"))}
                                     ]
                                   };
                                 { Parsetree.cs_name = None;
                                   cs_cond =
                                   [Parsetree.Enum_ref {
                                      enum =
                                      { Parsetree.id_module = None;
                                        id_name = "MapPart" };
                                      item = "VirtualMods"}
                                     ];
                                   cs_fields =
                                   [Parsetree.Field_list {
                                      name = "vmods_rtrn";
                                      type_ =
                                      { Parsetree.ft_type =
                                        (Parsetree.Type_primitive
                                           Parsetree.Card8);
                                        ft_allowed =
                                        (Some (Parsetree.Allowed_mask
                                                 { Parsetree.id_module = None;
                                                   id_name = "ModMask" }))
                                        };
                                      length =
                                      (Some (Parsetree.Pop_count
                                               (Parsetree.Field_ref
                                                  "virtualMods")))};
                                     Parsetree.Field_pad {
                                       pad = (Parsetree.Pad_align 4);
                                       serialize = false}
                                     ]
                                   };
                                 { Parsetree.cs_name = None;
                                   cs_cond =
                                   [Parsetree.Enum_ref {
                                      enum =
                                      { Parsetree.id_module = None;
                                        id_name = "MapPart" };
                                      item = "ExplicitComponents"}
                                     ];
                                   cs_fields =
                                   [Parsetree.Field_list {
                                      name = "explicit_rtrn";
                                      type_ =
                                      { Parsetree.ft_type =
                                        (Parsetree.Type_ref
                                           { Parsetree.id_module = None;
                                             id_name = "SetExplicit" });
                                        ft_allowed = None };
                                      length =
                                      (Some (Parsetree.Field_ref
                                               "totalKeyExplicit"))};
                                     Parsetree.Field_pad {
                                       pad = (Parsetree.Pad_align 4);
                                       serialize = false}
                                     ]
                                   };
                                 { Parsetree.cs_name = None;
                                   cs_cond =
                                   [Parsetree.Enum_ref {
                                      enum =
                                      { Parsetree.id_module = None;
                                        id_name = "MapPart" };
                                      item = "ModifierMap"}
                                     ];
                                   cs_fields =
                                   [Parsetree.Field_list {
                                      name = "modmap_rtrn";
                                      type_ =
                                      { Parsetree.ft_type =
                                        (Parsetree.Type_ref
                                           { Parsetree.id_module = None;
                                             id_name = "KeyModMap" });
                                        ft_allowed = None };
                                      length =
                                      (Some (Parsetree.Field_ref
                                               "totalModMapKeys"))};
                                     Parsetree.Field_pad {
                                       pad = (Parsetree.Pad_align 4);
                                       serialize = false}
                                     ]
                                   };
                                 { Parsetree.cs_name = None;
                                   cs_cond =
                                   [Parsetree.Enum_ref {
                                      enum =
                                      { Parsetree.id_module = None;
                                        id_name = "MapPart" };
                                      item = "VirtualModMap"}
                                     ];
                                   cs_fields =
                                   [Parsetree.Field_list {
                                      name = "vmodmap_rtrn";
                                      type_ =
                                      { Parsetree.ft_type =
                                        (Parsetree.Type_ref
                                           { Parsetree.id_module = None;
                                             id_name = "KeyVModMap" });
                                        ft_allowed = None };
                                      length =
                                      (Some (Parsetree.Field_ref
                                               "totalVModMapKeys"))}
                                     ]
                                   }
                                 ]
                               })
                          ]
                        };
                       { Parsetree.cs_name = (Some "compat_map");
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "GBNDetail" };
                            item = "CompatMap"}
                           ];
                         cs_fields =
                         [Parsetree.Field {name = "compatmap_type";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                           Parsetree.Field {name = "compatDeviceID";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card8);
                               ft_allowed = None }};
                           Parsetree.Field {name = "compatmap_sequence";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field {name = "compatmap_length";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card32);
                               ft_allowed = None }};
                           Parsetree.Field {name = "groupsRtrn";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card8);
                               ft_allowed =
                               (Some (Parsetree.Allowed_mask
                                        { Parsetree.id_module = None;
                                          id_name = "SetOfGroup" }))
                               }};
                           Parsetree.Field_pad {
                             pad = (Parsetree.Pad_bytes 1); serialize = false};
                           Parsetree.Field {name = "firstSIRtrn";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field {name = "nSIRtrn";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field {name = "nTotalSI";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field_pad {
                             pad = (Parsetree.Pad_bytes 16);
                             serialize = false};
                           Parsetree.Field_list {name = "si_rtrn";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_ref
                                  { Parsetree.id_module = None;
                                    id_name = "SymInterpret" });
                               ft_allowed = None };
                             length = (Some (Parsetree.Field_ref "nSIRtrn"))};
                           Parsetree.Field_list {name = "group_rtrn";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_ref
                                  { Parsetree.id_module = None;
                                    id_name = "ModDef" });
                               ft_allowed = None };
                             length =
                             (Some (Parsetree.Pop_count
                                      (Parsetree.Field_ref "groupsRtrn")))}
                           ]
                         };
                       { Parsetree.cs_name = (Some "indicator_maps");
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "GBNDetail" };
                            item = "IndicatorMaps"}
                           ];
                         cs_fields =
                         [Parsetree.Field {name = "indicatormap_type";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                           Parsetree.Field {name = "indicatorDeviceID";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card8);
                               ft_allowed = None }};
                           Parsetree.Field {name = "indicatormap_sequence";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field {name = "indicatormap_length";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card32);
                               ft_allowed = None }};
                           Parsetree.Field {name = "which";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card32);
                               ft_allowed = None }};
                           Parsetree.Field {name = "realIndicators";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card32);
                               ft_allowed = None }};
                           Parsetree.Field {name = "nIndicators";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card8);
                               ft_allowed = None }};
                           Parsetree.Field_pad {
                             pad = (Parsetree.Pad_bytes 15);
                             serialize = false};
                           Parsetree.Field_list {name = "maps";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_ref
                                  { Parsetree.id_module = None;
                                    id_name = "IndicatorMap" });
                               ft_allowed = None };
                             length =
                             (Some (Parsetree.Field_ref "nIndicators"))}
                           ]
                         };
                       { Parsetree.cs_name = (Some "key_names");
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "GBNDetail" };
                            item = "KeyNames"};
                           Parsetree.Enum_ref {
                             enum =
                             { Parsetree.id_module = None;
                               id_name = "GBNDetail" };
                             item = "OtherNames"}
                           ];
                         cs_fields =
                         [Parsetree.Field {name = "keyname_type";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                           Parsetree.Field {name = "keyDeviceID";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card8);
                               ft_allowed = None }};
                           Parsetree.Field {name = "keyname_sequence";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field {name = "keyname_length";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card32);
                               ft_allowed = None }};
                           Parsetree.Field {name = "which";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card32);
                               ft_allowed =
                               (Some (Parsetree.Allowed_mask
                                        { Parsetree.id_module = None;
                                          id_name = "NameDetail" }))
                               }};
                           Parsetree.Field {name = "keyMinKeyCode";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_ref
                                  { Parsetree.id_module = None;
                                    id_name = "KEYCODE" });
                               ft_allowed = None }};
                           Parsetree.Field {name = "keyMaxKeyCode";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_ref
                                  { Parsetree.id_module = None;
                                    id_name = "KEYCODE" });
                               ft_allowed = None }};
                           Parsetree.Field {name = "nTypes";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card8);
                               ft_allowed = None }};
                           Parsetree.Field {name = "groupNames";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card8);
                               ft_allowed =
                               (Some (Parsetree.Allowed_mask
                                        { Parsetree.id_module = None;
                                          id_name = "SetOfGroup" }))
                               }};
                           Parsetree.Field {name = "virtualMods";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed =
                               (Some (Parsetree.Allowed_mask
                                        { Parsetree.id_module = None;
                                          id_name = "VMod" }))
                               }};
                           Parsetree.Field {name = "firstKey";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_ref
                                  { Parsetree.id_module = None;
                                    id_name = "KEYCODE" });
                               ft_allowed = None }};
                           Parsetree.Field {name = "nKeys";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card8);
                               ft_allowed = None }};
                           Parsetree.Field {name = "indicators";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card32);
                               ft_allowed = None }};
                           Parsetree.Field {name = "nRadioGroups";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card8);
                               ft_allowed = None }};
                           Parsetree.Field {name = "nKeyAliases";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card8);
                               ft_allowed = None }};
                           Parsetree.Field {name = "nKTLevels";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field_pad {
                             pad = (Parsetree.Pad_bytes 4); serialize = false};
                           (Parsetree.Field_switch
                              { Parsetree.sw_name = "valueList";
                                sw_cond =
                                (Parsetree.Cond_bit_and
                                   (Parsetree.Field_ref "which"));
                                sw_cases =
                                [{ Parsetree.cs_name = None;
                                   cs_cond =
                                   [Parsetree.Enum_ref {
                                      enum =
                                      { Parsetree.id_module = None;
                                        id_name = "NameDetail" };
                                      item = "Keycodes"}
                                     ];
                                   cs_fields =
                                   [Parsetree.Field {name = "keycodesName";
                                      type_ =
                                      { Parsetree.ft_type =
                                        (Parsetree.Type_ref
                                           { Parsetree.id_module = None;
                                             id_name = "ATOM" });
                                        ft_allowed = None }}
                                     ]
                                   };
                                  { Parsetree.cs_name = None;
                                    cs_cond =
                                    [Parsetree.Enum_ref {
                                       enum =
                                       { Parsetree.id_module = None;
                                         id_name = "NameDetail" };
                                       item = "Geometry"}
                                      ];
                                    cs_fields =
                                    [Parsetree.Field {name = "geometryName";
                                       type_ =
                                       { Parsetree.ft_type =
                                         (Parsetree.Type_ref
                                            { Parsetree.id_module = None;
                                              id_name = "ATOM" });
                                         ft_allowed = None }}
                                      ]
                                    };
                                  { Parsetree.cs_name = None;
                                    cs_cond =
                                    [Parsetree.Enum_ref {
                                       enum =
                                       { Parsetree.id_module = None;
                                         id_name = "NameDetail" };
                                       item = "Symbols"}
                                      ];
                                    cs_fields =
                                    [Parsetree.Field {name = "symbolsName";
                                       type_ =
                                       { Parsetree.ft_type =
                                         (Parsetree.Type_ref
                                            { Parsetree.id_module = None;
                                              id_name = "ATOM" });
                                         ft_allowed = None }}
                                      ]
                                    };
                                  { Parsetree.cs_name = None;
                                    cs_cond =
                                    [Parsetree.Enum_ref {
                                       enum =
                                       { Parsetree.id_module = None;
                                         id_name = "NameDetail" };
                                       item = "PhysSymbols"}
                                      ];
                                    cs_fields =
                                    [Parsetree.Field {
                                       name = "physSymbolsName";
                                       type_ =
                                       { Parsetree.ft_type =
                                         (Parsetree.Type_ref
                                            { Parsetree.id_module = None;
                                              id_name = "ATOM" });
                                         ft_allowed = None }}
                                      ]
                                    };
                                  { Parsetree.cs_name = None;
                                    cs_cond =
                                    [Parsetree.Enum_ref {
                                       enum =
                                       { Parsetree.id_module = None;
                                         id_name = "NameDetail" };
                                       item = "Types"}
                                      ];
                                    cs_fields =
                                    [Parsetree.Field {name = "typesName";
                                       type_ =
                                       { Parsetree.ft_type =
                                         (Parsetree.Type_ref
                                            { Parsetree.id_module = None;
                                              id_name = "ATOM" });
                                         ft_allowed = None }}
                                      ]
                                    };
                                  { Parsetree.cs_name = None;
                                    cs_cond =
                                    [Parsetree.Enum_ref {
                                       enum =
                                       { Parsetree.id_module = None;
                                         id_name = "NameDetail" };
                                       item = "Compat"}
                                      ];
                                    cs_fields =
                                    [Parsetree.Field {name = "compatName";
                                       type_ =
                                       { Parsetree.ft_type =
                                         (Parsetree.Type_ref
                                            { Parsetree.id_module = None;
                                              id_name = "ATOM" });
                                         ft_allowed = None }}
                                      ]
                                    };
                                  { Parsetree.cs_name = None;
                                    cs_cond =
                                    [Parsetree.Enum_ref {
                                       enum =
                                       { Parsetree.id_module = None;
                                         id_name = "NameDetail" };
                                       item = "KeyTypeNames"}
                                      ];
                                    cs_fields =
                                    [Parsetree.Field_list {
                                       name = "typeNames";
                                       type_ =
                                       { Parsetree.ft_type =
                                         (Parsetree.Type_ref
                                            { Parsetree.id_module = None;
                                              id_name = "ATOM" });
                                         ft_allowed = None };
                                       length =
                                       (Some (Parsetree.Field_ref "nTypes"))}
                                      ]
                                    };
                                  { Parsetree.cs_name = None;
                                    cs_cond =
                                    [Parsetree.Enum_ref {
                                       enum =
                                       { Parsetree.id_module = None;
                                         id_name = "NameDetail" };
                                       item = "KTLevelNames"}
                                      ];
                                    cs_fields =
                                    [Parsetree.Field_list {
                                       name = "nLevelsPerType";
                                       type_ =
                                       { Parsetree.ft_type =
                                         (Parsetree.Type_primitive
                                            Parsetree.Card8);
                                         ft_allowed = None };
                                       length =
                                       (Some (Parsetree.Field_ref "nTypes"))};
                                      Parsetree.Field_pad {
                                        pad = (Parsetree.Pad_align 4);
                                        serialize = false};
                                      Parsetree.Field_list {
                                        name = "ktLevelNames";
                                        type_ =
                                        { Parsetree.ft_type =
                                          (Parsetree.Type_ref
                                             { Parsetree.id_module = None;
                                               id_name = "ATOM" });
                                          ft_allowed = None };
                                        length =
                                        (Some Parsetree.Sum_of {
                                                field = "nLevelsPerType";
                                                by_expr = None})}
                                      ]
                                    };
                                  { Parsetree.cs_name = None;
                                    cs_cond =
                                    [Parsetree.Enum_ref {
                                       enum =
                                       { Parsetree.id_module = None;
                                         id_name = "NameDetail" };
                                       item = "IndicatorNames"}
                                      ];
                                    cs_fields =
                                    [Parsetree.Field_list {
                                       name = "indicatorNames";
                                       type_ =
                                       { Parsetree.ft_type =
                                         (Parsetree.Type_ref
                                            { Parsetree.id_module = None;
                                              id_name = "ATOM" });
                                         ft_allowed = None };
                                       length =
                                       (Some (Parsetree.Pop_count
                                                (Parsetree.Field_ref
                                                   "indicators")))}
                                      ]
                                    };
                                  { Parsetree.cs_name = None;
                                    cs_cond =
                                    [Parsetree.Enum_ref {
                                       enum =
                                       { Parsetree.id_module = None;
                                         id_name = "NameDetail" };
                                       item = "VirtualModNames"}
                                      ];
                                    cs_fields =
                                    [Parsetree.Field_list {
                                       name = "virtualModNames";
                                       type_ =
                                       { Parsetree.ft_type =
                                         (Parsetree.Type_ref
                                            { Parsetree.id_module = None;
                                              id_name = "ATOM" });
                                         ft_allowed = None };
                                       length =
                                       (Some (Parsetree.Pop_count
                                                (Parsetree.Field_ref
                                                   "virtualMods")))}
                                      ]
                                    };
                                  { Parsetree.cs_name = None;
                                    cs_cond =
                                    [Parsetree.Enum_ref {
                                       enum =
                                       { Parsetree.id_module = None;
                                         id_name = "NameDetail" };
                                       item = "GroupNames"}
                                      ];
                                    cs_fields =
                                    [Parsetree.Field_list {name = "groups";
                                       type_ =
                                       { Parsetree.ft_type =
                                         (Parsetree.Type_ref
                                            { Parsetree.id_module = None;
                                              id_name = "ATOM" });
                                         ft_allowed = None };
                                       length =
                                       (Some (Parsetree.Pop_count
                                                (Parsetree.Field_ref
                                                   "groupNames")))}
                                      ]
                                    };
                                  { Parsetree.cs_name = None;
                                    cs_cond =
                                    [Parsetree.Enum_ref {
                                       enum =
                                       { Parsetree.id_module = None;
                                         id_name = "NameDetail" };
                                       item = "KeyNames"}
                                      ];
                                    cs_fields =
                                    [Parsetree.Field_list {name = "keyNames";
                                       type_ =
                                       { Parsetree.ft_type =
                                         (Parsetree.Type_ref
                                            { Parsetree.id_module = None;
                                              id_name = "KeyName" });
                                         ft_allowed = None };
                                       length =
                                       (Some (Parsetree.Field_ref "nKeys"))}
                                      ]
                                    };
                                  { Parsetree.cs_name = None;
                                    cs_cond =
                                    [Parsetree.Enum_ref {
                                       enum =
                                       { Parsetree.id_module = None;
                                         id_name = "NameDetail" };
                                       item = "KeyAliases"}
                                      ];
                                    cs_fields =
                                    [Parsetree.Field_list {
                                       name = "keyAliases";
                                       type_ =
                                       { Parsetree.ft_type =
                                         (Parsetree.Type_ref
                                            { Parsetree.id_module = None;
                                              id_name = "KeyAlias" });
                                         ft_allowed = None };
                                       length =
                                       (Some (Parsetree.Field_ref
                                                "nKeyAliases"))}
                                      ]
                                    };
                                  { Parsetree.cs_name = None;
                                    cs_cond =
                                    [Parsetree.Enum_ref {
                                       enum =
                                       { Parsetree.id_module = None;
                                         id_name = "NameDetail" };
                                       item = "RGNames"}
                                      ];
                                    cs_fields =
                                    [Parsetree.Field_list {
                                       name = "radioGroupNames";
                                       type_ =
                                       { Parsetree.ft_type =
                                         (Parsetree.Type_ref
                                            { Parsetree.id_module = None;
                                              id_name = "ATOM" });
                                         ft_allowed = None };
                                       length =
                                       (Some (Parsetree.Field_ref
                                                "nRadioGroups"))}
                                      ]
                                    }
                                  ]
                                })
                           ]
                         };
                       { Parsetree.cs_name = (Some "geometry");
                         cs_cond =
                         [Parsetree.Enum_ref {
                            enum =
                            { Parsetree.id_module = None;
                              id_name = "GBNDetail" };
                            item = "Geometry"}
                           ];
                         cs_fields =
                         [Parsetree.Field {name = "geometry_type";
                            type_ =
                            { Parsetree.ft_type =
                              (Parsetree.Type_primitive Parsetree.Card8);
                              ft_allowed = None }};
                           Parsetree.Field {name = "geometryDeviceID";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card8);
                               ft_allowed = None }};
                           Parsetree.Field {name = "geometry_sequence";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field {name = "geometry_length";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card32);
                               ft_allowed = None }};
                           Parsetree.Field {name = "name";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_ref
                                  { Parsetree.id_module = None;
                                    id_name = "ATOM" });
                               ft_allowed = None }};
                           Parsetree.Field {name = "geometryFound";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Bool);
                               ft_allowed = None }};
                           Parsetree.Field_pad {
                             pad = (Parsetree.Pad_bytes 1); serialize = false};
                           Parsetree.Field {name = "widthMM";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field {name = "heightMM";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field {name = "nProperties";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field {name = "nColors";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field {name = "nShapes";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field {name = "nSections";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field {name = "nDoodads";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field {name = "nKeyAliases";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card16);
                               ft_allowed = None }};
                           Parsetree.Field {name = "baseColorNdx";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card8);
                               ft_allowed = None }};
                           Parsetree.Field {name = "labelColorNdx";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_primitive Parsetree.Card8);
                               ft_allowed = None }};
                           Parsetree.Field {name = "labelFont";
                             type_ =
                             { Parsetree.ft_type =
                               (Parsetree.Type_ref
                                  { Parsetree.id_module = None;
                                    id_name = "CountedString16" });
                               ft_allowed = None }}
                           ]
                         }
                       ]
                     })
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetDeviceInfo"; opcode = 24;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "wanted";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "XIFeature" }))
            }};
        Parsetree.Field {name = "allButtons";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "firstButton";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "nButtons";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "ledClass";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "LedClassSpec" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "LedClass" }))
            }};
        Parsetree.Field {name = "ledID";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "IDSpec" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ID" }))
            }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "deviceID";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "present";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "XIFeature" }))
                    }};
                Parsetree.Field {name = "supported";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "XIFeature" }))
                    }};
                Parsetree.Field {name = "unsupported";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_mask
                             { Parsetree.id_module = None;
                               id_name = "XIFeature" }))
                    }};
                Parsetree.Field {name = "nDeviceLedFBs";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "firstBtnWanted";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "nBtnsWanted";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "firstBtnRtrn";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "nBtnsRtrn";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "totalBtns";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                Parsetree.Field {name = "hasOwnState";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                Parsetree.Field {name = "dfltKbdFB";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None; id_name = "ID" }))
                    }};
                Parsetree.Field {name = "dfltLedFB";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None; id_name = "ID" }))
                    }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                  serialize = false};
                Parsetree.Field {name = "devType";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ATOM" });
                    ft_allowed = None }};
                Parsetree.Field {name = "nameLen";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_list {name = "name";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "STRING8" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nameLen"))};
                Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
                  serialize = false};
                Parsetree.Field_list {name = "btnActions";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "Action" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nBtnsRtrn"))};
                Parsetree.Field_list {name = "leds";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None;
                         id_name = "DeviceLedInfo" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "nDeviceLedFBs"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetDeviceInfo"; opcode = 25;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "deviceSpec";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DeviceSpec" });
           ft_allowed = None }};
        Parsetree.Field {name = "firstBtn";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "nBtns";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "change";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "XIFeature" }))
            }};
        Parsetree.Field {name = "nDeviceLedFBs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "btnActions";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Action" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nBtns"))};
        Parsetree.Field_list {name = "leds";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DeviceLedInfo" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nDeviceLedFBs"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SetDebuggingFlags"; opcode = 101;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "msgLength";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "affectFlags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "affectCtrls";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "ctrls";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "message";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "STRING8" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "msgLength"))}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "currentFlags";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "currentCtrls";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "supportedFlags";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "supportedCtrls";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                  serialize = false}
                ];
              doc = None });
      doc = None};
    Parsetree.Event {name = "NewKeyboardNotify"; number = 0;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "xkbType";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "deviceID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "oldDeviceID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "minKeyCode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "maxKeyCode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "oldMinKeyCode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "oldMaxKeyCode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "requestMajor";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "requestMinor";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "changed";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "NKNDetail" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 14);
          serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "MapNotify"; number = 1; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "xkbType";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "deviceID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "ptrBtnActions";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "changed";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "MapPart" }))
            }};
        Parsetree.Field {name = "minKeyCode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "maxKeyCode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "firstType";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "nTypes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstKeySym";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nKeySyms";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstKeyAct";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nKeyActs";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstKeyBehavior";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nKeyBehavior";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstKeyExplicit";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nKeyExplicit";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstModMapKey";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nModMapKeys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstVModMapKey";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nVModMapKeys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "virtualMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "StateNotify"; number = 2; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "xkbType";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "deviceID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "mods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "baseMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "latchedMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "lockedMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "group";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Group" }))
            }};
        Parsetree.Field {name = "baseGroup";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "latchedGroup";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "lockedGroup";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Group" }))
            }};
        Parsetree.Field {name = "compatState";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "grabMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "compatGrabMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "lookupMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "compatLoockupMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "ptrBtnState";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "KeyButMask" }))
            }};
        Parsetree.Field {name = "changed";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "StatePart" }))
            }};
        Parsetree.Field {name = "keycode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "eventType";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "requestMajor";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "requestMinor";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ];
      doc = None};
    Parsetree.Event {name = "ControlsNotify"; number = 3; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "xkbType";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "deviceID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "numGroups";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "changedControls";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "Control" }))
            }};
        Parsetree.Field {name = "enabledControls";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "BoolCtrl" }))
            }};
        Parsetree.Field {name = "enabledControlChanges";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "BoolCtrl" }))
            }};
        Parsetree.Field {name = "keycode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "eventType";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "requestMajor";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "requestMinor";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4); serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "IndicatorStateNotify"; number = 4;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "xkbType";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "deviceID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "state";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "stateChanged";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "IndicatorMapNotify"; number = 5;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "xkbType";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "deviceID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "state";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "mapChanged";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "NamesNotify"; number = 6; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "xkbType";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "deviceID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "changed";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "NameDetail" }))
            }};
        Parsetree.Field {name = "firstType";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "nTypes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "firstLevelName";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "nLevelNames";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "nRadioGroups";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "nKeyAliases";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "changedGroupNames";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "SetOfGroup" }))
            }};
        Parsetree.Field {name = "changedVirtualMods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "VMod" }))
            }};
        Parsetree.Field {name = "firstKey";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "nKeys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "changedIndicators";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4); serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "CompatMapNotify"; number = 7;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "xkbType";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "deviceID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "changedGroups";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "SetOfGroup" }))
            }};
        Parsetree.Field {name = "firstSI";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "nSI";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "nTotalSI";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
          serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "BellNotify"; number = 8; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "xkbType";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "deviceID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "bellClass";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None;
                       id_name = "BellClassResult" }))
            }};
        Parsetree.Field {name = "bellID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "percent";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "pitch";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "duration";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "name";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "window";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field {name = "eventOnly";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 7); serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "ActionMessage"; number = 9; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "xkbType";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "deviceID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "keycode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "press";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "keyEventFollows";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field {name = "mods";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ModMask" }))
            }};
        Parsetree.Field {name = "group";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Group" }))
            }};
        Parsetree.Field_list {name = "message";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "STRING8" });
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 8L))};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 10);
          serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "AccessXNotify"; number = 10; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "xkbType";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "deviceID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "keycode";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
        Parsetree.Field {name = "detailt";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "AXNDetail" }))
            }};
        Parsetree.Field {name = "slowKeysDelay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "debounceDelay";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
          serialize = false}
        ];
      doc = None};
    Parsetree.Event {name = "ExtensionDeviceNotify"; number = 11;
      is_generic = false; no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "xkbType";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "deviceID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "reason";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "XIFeature" }))
            }};
        Parsetree.Field {name = "ledClass";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "LedClassResult"
                       }))
            }};
        Parsetree.Field {name = "ledID";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "ledsDefined";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "ledState";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "firstButton";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "nButtons";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "supported";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "XIFeature" }))
            }};
        Parsetree.Field {name = "unsupported";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "XIFeature" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false}
        ];
      doc = None}
    ]}
Parsetree.Extension {name = "XPrint"; file_name = "xprint";
  query_name = "XpExtension"; multiword = true; version = (1, 0);
  declarations =
  [(Parsetree.Import "xproto");
    Parsetree.Typedef {name = "STRING8";
      type_ = (Parsetree.Type_primitive Parsetree.Char)};
    Parsetree.Struct {name = "PRINTER";
      fields =
      [Parsetree.Field {name = "nameLen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field_list {name = "name";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "STRING8" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nameLen"))};
        Parsetree.Field_pad {pad = (Parsetree.Pad_align 4); serialize = false};
        Parsetree.Field {name = "descLen";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "description";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "STRING8" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "descLen"))};
        Parsetree.Field_pad {pad = (Parsetree.Pad_align 4); serialize = false}
        ]};
    (Parsetree.Xid "PCONTEXT");
    Parsetree.Enum {name = "GetDoc";
      items =
      [("Finished", (Parsetree.Item_value 0L));
        ("SecondConsumer", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Enum {name = "EvMask";
      items =
      [("NoEventMask", (Parsetree.Item_value 0L));
        ("PrintMask", (Parsetree.Item_bit 0));
        ("AttributeMask", (Parsetree.Item_bit 1))];
      doc = None};
    Parsetree.Enum {name = "Detail";
      items =
      [("StartJobNotify", (Parsetree.Item_value 1L));
        ("EndJobNotify", (Parsetree.Item_value 2L));
        ("StartDocNotify", (Parsetree.Item_value 3L));
        ("EndDocNotify", (Parsetree.Item_value 4L));
        ("StartPageNotify", (Parsetree.Item_value 5L));
        ("EndPageNotify", (Parsetree.Item_value 6L))];
      doc = None};
    Parsetree.Enum {name = "Attr";
      items =
      [("JobAttr", (Parsetree.Item_value 1L));
        ("DocAttr", (Parsetree.Item_value 2L));
        ("PageAttr", (Parsetree.Item_value 3L));
        ("PrinterAttr", (Parsetree.Item_value 4L));
        ("ServerAttr", (Parsetree.Item_value 5L));
        ("MediumAttr", (Parsetree.Item_value 6L));
        ("SpoolerAttr", (Parsetree.Item_value 7L))];
      doc = None};
    Parsetree.Request {name = "PrintQueryVersion"; opcode = 0;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "PrintGetPrinterList"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "printerNameLen";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "localeLen";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "printer_name";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "STRING8" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "printerNameLen"))};
        Parsetree.Field_list {name = "locale";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "STRING8" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "localeLen"))}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "listCount";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "printers";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "PRINTER" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "listCount"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "PrintRehashPrinterList"; opcode = 20;
      combine_adjacent = true; fields = []; reply = None; doc = None};
    Parsetree.Request {name = "CreateContext"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "printerNameLen";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "localeLen";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "printerName";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "STRING8" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "printerNameLen"))};
        Parsetree.Field_list {name = "locale";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "STRING8" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "localeLen"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PrintSetContext"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PrintGetContext"; opcode = 4;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "PrintDestroyContext"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PrintGetScreenOfContext"; opcode = 6;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "root";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "WINDOW" });
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "PrintStartJob"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "output_mode";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PrintEndJob"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "cancel";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PrintStartDoc"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "driver_mode";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PrintEndDoc"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "cancel";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PrintPutDocumentData"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "len_data";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "len_fmt";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "len_options";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "data";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "len_data"))};
        Parsetree.Field_list {name = "doc_format";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "STRING8" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "len_fmt"))};
        Parsetree.Field_list {name = "options";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "STRING8" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "len_options"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PrintGetDocumentData"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PCONTEXT" });
           ft_allowed = None }};
        Parsetree.Field {name = "max_bytes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "status_code";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "finished_flag";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "dataLen";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "dataLen"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "PrintStartPage"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PrintEndPage"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "cancel";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PrintSelectInput"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PCONTEXT" });
           ft_allowed = None }};
        Parsetree.Field {name = "event_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PrintInputSelected"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PCONTEXT" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "event_mask";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "all_events_mask";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "PrintGetAttributes"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PCONTEXT" });
           ft_allowed = None }};
        Parsetree.Field {name = "pool";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "stringLen";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "attributes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "STRING8" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "stringLen"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "PrintGetOneAttributes"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PCONTEXT" });
           ft_allowed = None }};
        Parsetree.Field {name = "nameLen";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pool";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field_list {name = "name";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "STRING8" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "nameLen"))}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "valueLen";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "value";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "STRING8" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "valueLen"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "PrintSetAttributes"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PCONTEXT" });
           ft_allowed = None }};
        Parsetree.Field {name = "stringLen";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "pool";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "rule";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "attributes";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "STRING8" });
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PrintGetPageDimensions"; opcode = 21;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PCONTEXT" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "offset_x";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "offset_y";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "reproducible_width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "reproducible_height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "PrintQueryScreens"; opcode = 22;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "listCount";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "roots";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "WINDOW" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "listCount"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "PrintSetImageResolution"; opcode = 23;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PCONTEXT" });
           ft_allowed = None }};
        Parsetree.Field {name = "image_resolution";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "status";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Bool);
                   ft_allowed = None }};
                Parsetree.Field {name = "previous_resolutions";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "PrintGetImageResolution"; opcode = 24;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PCONTEXT" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "image_resolution";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Event {name = "Notify"; number = 0; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "detail";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "context";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PCONTEXT" });
            ft_allowed = None }};
        Parsetree.Field {name = "cancel";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }}
        ];
      doc = None};
    Parsetree.Event {name = "AttributNotify"; number = 1; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "detail";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "context";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PCONTEXT" });
            ft_allowed = None }}
        ];
      doc = None};
    Parsetree.Error {name = "BadContext"; number = 0; fields = []};
    Parsetree.Error {name = "BadSequence"; number = 1; fields = []}]}
(Parsetree.Core
   [Parsetree.Struct {name = "CHAR2B";
      fields =
      [Parsetree.Field {name = "byte1";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "byte2";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ]};
     (Parsetree.Xid "WINDOW"); (Parsetree.Xid "PIXMAP");
     (Parsetree.Xid "CURSOR"); (Parsetree.Xid "FONT");
     (Parsetree.Xid "GCONTEXT"); (Parsetree.Xid "COLORMAP");
     (Parsetree.Xid "ATOM");
     Parsetree.Xid_union {name = "DRAWABLE";
       types =
       [{ Parsetree.id_module = None; id_name = "WINDOW" };
         { Parsetree.id_module = None; id_name = "PIXMAP" }]};
     Parsetree.Xid_union {name = "FONTABLE";
       types =
       [{ Parsetree.id_module = None; id_name = "FONT" };
         { Parsetree.id_module = None; id_name = "GCONTEXT" }]};
     Parsetree.Typedef {name = "BOOL32";
       type_ = (Parsetree.Type_primitive Parsetree.Card32)};
     Parsetree.Typedef {name = "VISUALID";
       type_ = (Parsetree.Type_primitive Parsetree.Card32)};
     Parsetree.Typedef {name = "TIMESTAMP";
       type_ = (Parsetree.Type_primitive Parsetree.Card32)};
     Parsetree.Typedef {name = "KEYSYM";
       type_ = (Parsetree.Type_primitive Parsetree.Card32)};
     Parsetree.Typedef {name = "KEYCODE";
       type_ = (Parsetree.Type_primitive Parsetree.Card8)};
     Parsetree.Typedef {name = "KEYCODE32";
       type_ = (Parsetree.Type_primitive Parsetree.Card32)};
     Parsetree.Typedef {name = "BUTTON";
       type_ = (Parsetree.Type_primitive Parsetree.Card8)};
     Parsetree.Struct {name = "POINT";
       fields =
       [Parsetree.Field {name = "x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ]};
     Parsetree.Struct {name = "RECTANGLE";
       fields =
       [Parsetree.Field {name = "x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ]};
     Parsetree.Struct {name = "ARC";
       fields =
       [Parsetree.Field {name = "x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "angle1";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "angle2";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ]};
     Parsetree.Struct {name = "FORMAT";
       fields =
       [Parsetree.Field {name = "depth";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
         Parsetree.Field {name = "bits_per_pixel";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field {name = "scanline_pad";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 5);
           serialize = false}
         ]};
     Parsetree.Enum {name = "VisualClass";
       items =
       [("StaticGray", (Parsetree.Item_value 0L));
         ("GrayScale", (Parsetree.Item_value 1L));
         ("StaticColor", (Parsetree.Item_value 2L));
         ("PseudoColor", (Parsetree.Item_value 3L));
         ("TrueColor", (Parsetree.Item_value 4L));
         ("DirectColor", (Parsetree.Item_value 5L))];
       doc = None};
     Parsetree.Struct {name = "VISUALTYPE";
       fields =
       [Parsetree.Field {name = "visual_id";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "VISUALID" });
            ft_allowed = None }};
         Parsetree.Field {name = "class";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "VisualClass" }))
             }};
         Parsetree.Field {name = "bits_per_rgb_value";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field {name = "colormap_entries";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "red_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Parsetree.Field {name = "green_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Parsetree.Field {name = "blue_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
           serialize = false}
         ]};
     Parsetree.Struct {name = "DEPTH";
       fields =
       [Parsetree.Field {name = "depth";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false};
         Parsetree.Field {name = "visuals_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
           serialize = false};
         Parsetree.Field_list {name = "visuals";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "VISUALTYPE" });
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "visuals_len"))}
         ]};
     Parsetree.Enum {name = "EventMask";
       items =
       [("NoEvent", (Parsetree.Item_value 0L));
         ("KeyPress", (Parsetree.Item_bit 0));
         ("KeyRelease", (Parsetree.Item_bit 1));
         ("ButtonPress", (Parsetree.Item_bit 2));
         ("ButtonRelease", (Parsetree.Item_bit 3));
         ("EnterWindow", (Parsetree.Item_bit 4));
         ("LeaveWindow", (Parsetree.Item_bit 5));
         ("PointerMotion", (Parsetree.Item_bit 6));
         ("PointerMotionHint", (Parsetree.Item_bit 7));
         ("Button1Motion", (Parsetree.Item_bit 8));
         ("Button2Motion", (Parsetree.Item_bit 9));
         ("Button3Motion", (Parsetree.Item_bit 10));
         ("Button4Motion", (Parsetree.Item_bit 11));
         ("Button5Motion", (Parsetree.Item_bit 12));
         ("ButtonMotion", (Parsetree.Item_bit 13));
         ("KeymapState", (Parsetree.Item_bit 14));
         ("Exposure", (Parsetree.Item_bit 15));
         ("VisibilityChange", (Parsetree.Item_bit 16));
         ("StructureNotify", (Parsetree.Item_bit 17));
         ("ResizeRedirect", (Parsetree.Item_bit 18));
         ("SubstructureNotify", (Parsetree.Item_bit 19));
         ("SubstructureRedirect", (Parsetree.Item_bit 20));
         ("FocusChange", (Parsetree.Item_bit 21));
         ("PropertyChange", (Parsetree.Item_bit 22));
         ("ColorMapChange", (Parsetree.Item_bit 23));
         ("OwnerGrabButton", (Parsetree.Item_bit 24))];
       doc = None};
     Parsetree.Enum {name = "BackingStore";
       items =
       [("NotUseful", (Parsetree.Item_value 0L));
         ("WhenMapped", (Parsetree.Item_value 1L));
         ("Always", (Parsetree.Item_value 2L))];
       doc = None};
     Parsetree.Struct {name = "SCREEN";
       fields =
       [Parsetree.Field {name = "root";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
         Parsetree.Field {name = "default_colormap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }};
         Parsetree.Field {name = "white_pixel";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Parsetree.Field {name = "black_pixel";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Parsetree.Field {name = "current_input_masks";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "EventMask" }))
             }};
         Parsetree.Field {name = "width_in_pixels";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height_in_pixels";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "width_in_millimeters";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height_in_millimeters";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "min_installed_maps";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "max_installed_maps";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "root_visual";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "VISUALID" });
             ft_allowed = None }};
         Parsetree.Field {name = "backing_stores";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "BackingStore"
                        }))
             }};
         Parsetree.Field {name = "save_unders";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
             ft_allowed = None }};
         Parsetree.Field {name = "root_depth";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field {name = "allowed_depths_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field_list {name = "allowed_depths";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DEPTH" });
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "allowed_depths_len"))}
         ]};
     Parsetree.Struct {name = "SetupRequest";
       fields =
       [Parsetree.Field {name = "byte_order";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false};
         Parsetree.Field {name = "protocol_major_version";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "protocol_minor_version";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "authorization_protocol_name_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "authorization_protocol_data_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Parsetree.Field_list {name = "authorization_protocol_name";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length =
           (Some (Parsetree.Field_ref "authorization_protocol_name_len"))};
         Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
           serialize = false};
         Parsetree.Field_list {name = "authorization_protocol_data";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length =
           (Some (Parsetree.Field_ref "authorization_protocol_data_len"))};
         Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
           serialize = false}
         ]};
     Parsetree.Struct {name = "SetupFailed";
       fields =
       [Parsetree.Field {name = "status";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
         Parsetree.Field {name = "reason_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field {name = "protocol_major_version";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "protocol_minor_version";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "length";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_list {name = "reason";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "reason_len"))}
         ]};
     Parsetree.Struct {name = "SetupAuthenticate";
       fields =
       [Parsetree.Field {name = "status";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 5);
           serialize = false};
         Parsetree.Field {name = "length";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_list {name = "reason";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length =
           (Some (Parsetree.Binop (Parsetree.Mul,
                    (Parsetree.Field_ref "length"), (Parsetree.Expr_value 4L)
                    )))}
         ]};
     Parsetree.Enum {name = "ImageOrder";
       items =
       [("LSBFirst", (Parsetree.Item_value 0L));
         ("MSBFirst", (Parsetree.Item_value 1L))];
       doc = None};
     Parsetree.Struct {name = "Setup";
       fields =
       [Parsetree.Field {name = "status";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false};
         Parsetree.Field {name = "protocol_major_version";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "protocol_minor_version";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "length";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "release_number";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Parsetree.Field {name = "resource_id_base";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Parsetree.Field {name = "resource_id_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Parsetree.Field {name = "motion_buffer_size";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Parsetree.Field {name = "vendor_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "maximum_request_length";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "roots_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field {name = "pixmap_formats_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field {name = "image_byte_order";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "ImageOrder" }))
             }};
         Parsetree.Field {name = "bitmap_format_bit_order";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "ImageOrder" }))
             }};
         Parsetree.Field {name = "bitmap_format_scanline_unit";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field {name = "bitmap_format_scanline_pad";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field {name = "min_keycode";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "KEYCODE" });
             ft_allowed = None }};
         Parsetree.Field {name = "max_keycode";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "KEYCODE" });
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
           serialize = false};
         Parsetree.Field_list {name = "vendor";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "vendor_len"))};
         Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
           serialize = false};
         Parsetree.Field_list {name = "pixmap_formats";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "FORMAT" });
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "pixmap_formats_len"))};
         Parsetree.Field_list {name = "roots";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "SCREEN" });
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "roots_len"))}
         ]};
     Parsetree.Enum {name = "ModMask";
       items =
       [("Shift", (Parsetree.Item_bit 0)); ("Lock", (Parsetree.Item_bit 1));
         ("Control", (Parsetree.Item_bit 2)); ("1", (Parsetree.Item_bit 3));
         ("2", (Parsetree.Item_bit 4)); ("3", (Parsetree.Item_bit 5));
         ("4", (Parsetree.Item_bit 6)); ("5", (Parsetree.Item_bit 7));
         ("Any", (Parsetree.Item_bit 15))];
       doc = None};
     Parsetree.Enum {name = "KeyButMask";
       items =
       [("Shift", (Parsetree.Item_bit 0)); ("Lock", (Parsetree.Item_bit 1));
         ("Control", (Parsetree.Item_bit 2));
         ("Mod1", (Parsetree.Item_bit 3)); ("Mod2", (Parsetree.Item_bit 4));
         ("Mod3", (Parsetree.Item_bit 5)); ("Mod4", (Parsetree.Item_bit 6));
         ("Mod5", (Parsetree.Item_bit 7));
         ("Button1", (Parsetree.Item_bit 8));
         ("Button2", (Parsetree.Item_bit 9));
         ("Button3", (Parsetree.Item_bit 10));
         ("Button4", (Parsetree.Item_bit 11));
         ("Button5", (Parsetree.Item_bit 12))];
       doc = None};
     Parsetree.Enum {name = "Window";
       items = [("None", (Parsetree.Item_value 0L))]; doc = None};
     Parsetree.Event {name = "KeyPress"; number = 2; is_generic = false;
       no_sequence_number = false;
       fields =
       [Parsetree.Field {name = "detail";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed = None }};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed = None }};
         Parsetree.Field {name = "root";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "event";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "child";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Window" }))
             }};
         Parsetree.Field {name = "root_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "root_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "event_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "event_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "state";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "KeyButMask" }))
             }};
         Parsetree.Field {name = "same_screen";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Event_copy {name = "KeyRelease";
       event = { Parsetree.id_module = None; id_name = "KeyPress" };
       ev_number = 3};
     Parsetree.Enum {name = "ButtonMask";
       items =
       [("1", (Parsetree.Item_bit 8)); ("2", (Parsetree.Item_bit 9));
         ("3", (Parsetree.Item_bit 10)); ("4", (Parsetree.Item_bit 11));
         ("5", (Parsetree.Item_bit 12)); ("Any", (Parsetree.Item_bit 15))];
       doc = None};
     Parsetree.Event {name = "ButtonPress"; number = 4; is_generic = false;
       no_sequence_number = false;
       fields =
       [Parsetree.Field {name = "detail";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "BUTTON" });
            ft_allowed = None }};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed = None }};
         Parsetree.Field {name = "root";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "event";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "child";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Window" }))
             }};
         Parsetree.Field {name = "root_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "root_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "event_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "event_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "state";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "KeyButMask" }))
             }};
         Parsetree.Field {name = "same_screen";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Event_copy {name = "ButtonRelease";
       event = { Parsetree.id_module = None; id_name = "ButtonPress" };
       ev_number = 5};
     Parsetree.Enum {name = "Motion";
       items =
       [("Normal", (Parsetree.Item_value 0L));
         ("Hint", (Parsetree.Item_value 1L))];
       doc = None};
     Parsetree.Event {name = "MotionNotify"; number = 6; is_generic = false;
       no_sequence_number = false;
       fields =
       [Parsetree.Field {name = "detail";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Motion" }))
            }};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed = None }};
         Parsetree.Field {name = "root";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "event";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "child";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Window" }))
             }};
         Parsetree.Field {name = "root_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "root_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "event_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "event_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "state";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "KeyButMask" }))
             }};
         Parsetree.Field {name = "same_screen";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Enum {name = "NotifyDetail";
       items =
       [("Ancestor", (Parsetree.Item_value 0L));
         ("Virtual", (Parsetree.Item_value 1L));
         ("Inferior", (Parsetree.Item_value 2L));
         ("Nonlinear", (Parsetree.Item_value 3L));
         ("NonlinearVirtual", (Parsetree.Item_value 4L));
         ("Pointer", (Parsetree.Item_value 5L));
         ("PointerRoot", (Parsetree.Item_value 6L));
         ("None", (Parsetree.Item_value 7L))];
       doc = None};
     Parsetree.Enum {name = "NotifyMode";
       items =
       [("Normal", (Parsetree.Item_value 0L));
         ("Grab", (Parsetree.Item_value 1L));
         ("Ungrab", (Parsetree.Item_value 2L));
         ("WhileGrabbed", (Parsetree.Item_value 3L))];
       doc = None};
     Parsetree.Event {name = "EnterNotify"; number = 7; is_generic = false;
       no_sequence_number = false;
       fields =
       [Parsetree.Field {name = "detail";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "NotifyDetail" }))
            }};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed = None }};
         Parsetree.Field {name = "root";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "event";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "child";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Window" }))
             }};
         Parsetree.Field {name = "root_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "root_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "event_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "event_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "state";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "KeyButMask" }))
             }};
         Parsetree.Field {name = "mode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "NotifyMode" }))
             }};
         Parsetree.Field {name = "same_screen_focus";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed = None }}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Event_copy {name = "LeaveNotify";
       event = { Parsetree.id_module = None; id_name = "EnterNotify" };
       ev_number = 8};
     Parsetree.Event {name = "FocusIn"; number = 9; is_generic = false;
       no_sequence_number = false;
       fields =
       [Parsetree.Field {name = "detail";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "NotifyDetail" }))
            }};
         Parsetree.Field {name = "event";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "mode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "NotifyMode" }))
             }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Event_copy {name = "FocusOut";
       event = { Parsetree.id_module = None; id_name = "FocusIn" };
       ev_number = 10};
     Parsetree.Event {name = "KeymapNotify"; number = 11; is_generic = false;
       no_sequence_number = true;
       fields =
       [Parsetree.Field_list {name = "keys";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 31L))}
         ];
       doc = None};
     Parsetree.Event {name = "Expose"; number = 12; is_generic = false;
       no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "count";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Event {name = "GraphicsExposure"; number = 13;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "minor_opcode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "count";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "major_opcode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ];
       doc = None};
     Parsetree.Event {name = "NoExposure"; number = 14; is_generic = false;
       no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "minor_opcode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "major_opcode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ];
       doc = None};
     Parsetree.Enum {name = "Visibility";
       items =
       [("Unobscured", (Parsetree.Item_value 0L));
         ("PartiallyObscured", (Parsetree.Item_value 1L));
         ("FullyObscured", (Parsetree.Item_value 2L))];
       doc = None};
     Parsetree.Event {name = "VisibilityNotify"; number = 15;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "state";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Visibility" }))
             }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ];
       doc = None};
     Parsetree.Event {name = "CreateNotify"; number = 16; is_generic = false;
       no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "parent";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "border_width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "override_redirect";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ];
       doc = None};
     Parsetree.Event {name = "DestroyNotify"; number = 17;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "event";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Event {name = "UnmapNotify"; number = 18; is_generic = false;
       no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "event";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "from_configure";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Event {name = "MapNotify"; number = 19; is_generic = false;
       no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "event";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "override_redirect";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Event {name = "MapRequest"; number = 20; is_generic = false;
       no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "parent";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Event {name = "ReparentNotify"; number = 21;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "event";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "parent";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "override_redirect";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ];
       doc = None};
     Parsetree.Event {name = "ConfigureNotify"; number = 22;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "event";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "above_sibling";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Window" }))
             }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "border_width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "override_redirect";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Event {name = "ConfigureRequest"; number = 23;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field {name = "stack_mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "StackMode" }))
            }};
         Parsetree.Field {name = "parent";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "sibling";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Window" }))
             }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "border_width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "value_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "ConfigWindow"
                        }))
             }}
         ];
       doc = None};
     Parsetree.Event {name = "GravityNotify"; number = 24;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "event";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ];
       doc = None};
     Parsetree.Event {name = "ResizeRequest"; number = 25;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       doc = None};
     Parsetree.Enum {name = "Place";
       items =
       [("OnTop", (Parsetree.Item_value 0L));
         ("OnBottom", (Parsetree.Item_value 1L))];
       doc = (Some Parsetree.Doc)};
     Parsetree.Event {name = "CirculateNotify"; number = 26;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "event";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
           serialize = false};
         Parsetree.Field {name = "place";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Place" }))
             }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Event_copy {name = "CirculateRequest";
       event = { Parsetree.id_module = None; id_name = "CirculateNotify" };
       ev_number = 27};
     Parsetree.Enum {name = "Property";
       items =
       [("NewValue", (Parsetree.Item_value 0L));
         ("Delete", (Parsetree.Item_value 1L))];
       doc = None};
     Parsetree.Event {name = "PropertyNotify"; number = 28;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "atom";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed = None }};
         Parsetree.Field {name = "state";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Property" }))
             }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Event {name = "SelectionClear"; number = 29;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed = None }};
         Parsetree.Field {name = "owner";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "selection";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }}
         ];
       doc = None};
     Parsetree.Enum {name = "Time";
       items = [("CurrentTime", (Parsetree.Item_value 0L))]; doc = None};
     Parsetree.Enum {name = "Atom";
       items =
       [("None", (Parsetree.Item_value 0L));
         ("Any", (Parsetree.Item_value 0L));
         ("PRIMARY", (Parsetree.Item_value 1L));
         ("SECONDARY", (Parsetree.Item_value 2L));
         ("ARC", (Parsetree.Item_value 3L));
         ("ATOM", (Parsetree.Item_value 4L));
         ("BITMAP", (Parsetree.Item_value 5L));
         ("CARDINAL", (Parsetree.Item_value 6L));
         ("COLORMAP", (Parsetree.Item_value 7L));
         ("CURSOR", (Parsetree.Item_value 8L));
         ("CUT_BUFFER0", (Parsetree.Item_value 9L));
         ("CUT_BUFFER1", (Parsetree.Item_value 10L));
         ("CUT_BUFFER2", (Parsetree.Item_value 11L));
         ("CUT_BUFFER3", (Parsetree.Item_value 12L));
         ("CUT_BUFFER4", (Parsetree.Item_value 13L));
         ("CUT_BUFFER5", (Parsetree.Item_value 14L));
         ("CUT_BUFFER6", (Parsetree.Item_value 15L));
         ("CUT_BUFFER7", (Parsetree.Item_value 16L));
         ("DRAWABLE", (Parsetree.Item_value 17L));
         ("FONT", (Parsetree.Item_value 18L));
         ("INTEGER", (Parsetree.Item_value 19L));
         ("PIXMAP", (Parsetree.Item_value 20L));
         ("POINT", (Parsetree.Item_value 21L));
         ("RECTANGLE", (Parsetree.Item_value 22L));
         ("RESOURCE_MANAGER", (Parsetree.Item_value 23L));
         ("RGB_COLOR_MAP", (Parsetree.Item_value 24L));
         ("RGB_BEST_MAP", (Parsetree.Item_value 25L));
         ("RGB_BLUE_MAP", (Parsetree.Item_value 26L));
         ("RGB_DEFAULT_MAP", (Parsetree.Item_value 27L));
         ("RGB_GRAY_MAP", (Parsetree.Item_value 28L));
         ("RGB_GREEN_MAP", (Parsetree.Item_value 29L));
         ("RGB_RED_MAP", (Parsetree.Item_value 30L));
         ("STRING", (Parsetree.Item_value 31L));
         ("VISUALID", (Parsetree.Item_value 32L));
         ("WINDOW", (Parsetree.Item_value 33L));
         ("WM_COMMAND", (Parsetree.Item_value 34L));
         ("WM_HINTS", (Parsetree.Item_value 35L));
         ("WM_CLIENT_MACHINE", (Parsetree.Item_value 36L));
         ("WM_ICON_NAME", (Parsetree.Item_value 37L));
         ("WM_ICON_SIZE", (Parsetree.Item_value 38L));
         ("WM_NAME", (Parsetree.Item_value 39L));
         ("WM_NORMAL_HINTS", (Parsetree.Item_value 40L));
         ("WM_SIZE_HINTS", (Parsetree.Item_value 41L));
         ("WM_ZOOM_HINTS", (Parsetree.Item_value 42L));
         ("MIN_SPACE", (Parsetree.Item_value 43L));
         ("NORM_SPACE", (Parsetree.Item_value 44L));
         ("MAX_SPACE", (Parsetree.Item_value 45L));
         ("END_SPACE", (Parsetree.Item_value 46L));
         ("SUPERSCRIPT_X", (Parsetree.Item_value 47L));
         ("SUPERSCRIPT_Y", (Parsetree.Item_value 48L));
         ("SUBSCRIPT_X", (Parsetree.Item_value 49L));
         ("SUBSCRIPT_Y", (Parsetree.Item_value 50L));
         ("UNDERLINE_POSITION", (Parsetree.Item_value 51L));
         ("UNDERLINE_THICKNESS", (Parsetree.Item_value 52L));
         ("STRIKEOUT_ASCENT", (Parsetree.Item_value 53L));
         ("STRIKEOUT_DESCENT", (Parsetree.Item_value 54L));
         ("ITALIC_ANGLE", (Parsetree.Item_value 55L));
         ("X_HEIGHT", (Parsetree.Item_value 56L));
         ("QUAD_WIDTH", (Parsetree.Item_value 57L));
         ("WEIGHT", (Parsetree.Item_value 58L));
         ("POINT_SIZE", (Parsetree.Item_value 59L));
         ("RESOLUTION", (Parsetree.Item_value 60L));
         ("COPYRIGHT", (Parsetree.Item_value 61L));
         ("NOTICE", (Parsetree.Item_value 62L));
         ("FONT_NAME", (Parsetree.Item_value 63L));
         ("FAMILY_NAME", (Parsetree.Item_value 64L));
         ("FULL_NAME", (Parsetree.Item_value 65L));
         ("CAP_HEIGHT", (Parsetree.Item_value 66L));
         ("WM_CLASS", (Parsetree.Item_value 67L));
         ("WM_TRANSIENT_FOR", (Parsetree.Item_value 68L))];
       doc = None};
     Parsetree.Event {name = "SelectionRequest"; number = 30;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Time" }))
             }};
         Parsetree.Field {name = "owner";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "requestor";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "selection";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }};
         Parsetree.Field {name = "target";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }};
         Parsetree.Field {name = "property";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Atom" }))
             }}
         ];
       doc = None};
     Parsetree.Event {name = "SelectionNotify"; number = 31;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Time" }))
             }};
         Parsetree.Field {name = "requestor";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "selection";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }};
         Parsetree.Field {name = "target";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }};
         Parsetree.Field {name = "property";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Atom" }))
             }}
         ];
       doc = None};
     Parsetree.Enum {name = "ColormapState";
       items =
       [("Uninstalled", (Parsetree.Item_value 0L));
         ("Installed", (Parsetree.Item_value 1L))];
       doc = (Some Parsetree.Doc)};
     Parsetree.Enum {name = "Colormap";
       items = [("None", (Parsetree.Item_value 0L))]; doc = None};
     Parsetree.Event {name = "ColormapNotify"; number = 32;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "colormap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Colormap" }))
             }};
         Parsetree.Field {name = "new";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
             ft_allowed = None }};
         Parsetree.Field {name = "state";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "ColormapState"
                        }))
             }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Union {name = "ClientMessageData";
       members =
       [Parsetree.Field_list {name = "data8";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 20L))};
         Parsetree.Field_list {name = "data16";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None };
           length = (Some (Parsetree.Expr_value 10L))};
         Parsetree.Field_list {name = "data32";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None };
           length = (Some (Parsetree.Expr_value 5L))}
         ]};
     Parsetree.Event {name = "ClientMessage"; number = 33;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "type";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }};
         Parsetree.Field {name = "data";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ClientMessageData" });
             ft_allowed = None }}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Enum {name = "Mapping";
       items =
       [("Modifier", (Parsetree.Item_value 0L));
         ("Keyboard", (Parsetree.Item_value 1L));
         ("Pointer", (Parsetree.Item_value 2L))];
       doc = None};
     Parsetree.Event {name = "MappingNotify"; number = 34;
       is_generic = false; no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "request";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Mapping" }))
             }};
         Parsetree.Field {name = "first_keycode";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "KEYCODE" });
             ft_allowed = None }};
         Parsetree.Field {name = "count";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Event {name = "GeGeneric"; number = 35; is_generic = true;
       no_sequence_number = false;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
          serialize = false}
         ];
       doc = (Some Parsetree.Doc)};
     Parsetree.Error {name = "Request"; number = 1;
       fields =
       [Parsetree.Field {name = "bad_value";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
         Parsetree.Field {name = "minor_opcode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "major_opcode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ]};
     Parsetree.Error {name = "Value"; number = 2;
       fields =
       [Parsetree.Field {name = "bad_value";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
         Parsetree.Field {name = "minor_opcode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "major_opcode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ]};
     Parsetree.Error_copy {name = "Window";
       error = { Parsetree.id_module = None; id_name = "Value" };
       er_number = 3};
     Parsetree.Error_copy {name = "Pixmap";
       error = { Parsetree.id_module = None; id_name = "Value" };
       er_number = 4};
     Parsetree.Error_copy {name = "Atom";
       error = { Parsetree.id_module = None; id_name = "Value" };
       er_number = 5};
     Parsetree.Error_copy {name = "Cursor";
       error = { Parsetree.id_module = None; id_name = "Value" };
       er_number = 6};
     Parsetree.Error_copy {name = "Font";
       error = { Parsetree.id_module = None; id_name = "Value" };
       er_number = 7};
     Parsetree.Error_copy {name = "Match";
       error = { Parsetree.id_module = None; id_name = "Request" };
       er_number = 8};
     Parsetree.Error_copy {name = "Drawable";
       error = { Parsetree.id_module = None; id_name = "Value" };
       er_number = 9};
     Parsetree.Error_copy {name = "Access";
       error = { Parsetree.id_module = None; id_name = "Request" };
       er_number = 10};
     Parsetree.Error_copy {name = "Alloc";
       error = { Parsetree.id_module = None; id_name = "Request" };
       er_number = 11};
     Parsetree.Error_copy {name = "Colormap";
       error = { Parsetree.id_module = None; id_name = "Value" };
       er_number = 12};
     Parsetree.Error_copy {name = "GContext";
       error = { Parsetree.id_module = None; id_name = "Value" };
       er_number = 13};
     Parsetree.Error_copy {name = "IDChoice";
       error = { Parsetree.id_module = None; id_name = "Value" };
       er_number = 14};
     Parsetree.Error_copy {name = "Name";
       error = { Parsetree.id_module = None; id_name = "Request" };
       er_number = 15};
     Parsetree.Error_copy {name = "Length";
       error = { Parsetree.id_module = None; id_name = "Request" };
       er_number = 16};
     Parsetree.Error_copy {name = "Implementation";
       error = { Parsetree.id_module = None; id_name = "Request" };
       er_number = 17};
     Parsetree.Enum {name = "WindowClass";
       items =
       [("CopyFromParent", (Parsetree.Item_value 0L));
         ("InputOutput", (Parsetree.Item_value 1L));
         ("InputOnly", (Parsetree.Item_value 2L))];
       doc = None};
     Parsetree.Enum {name = "CW";
       items =
       [("BackPixmap", (Parsetree.Item_bit 0));
         ("BackPixel", (Parsetree.Item_bit 1));
         ("BorderPixmap", (Parsetree.Item_bit 2));
         ("BorderPixel", (Parsetree.Item_bit 3));
         ("BitGravity", (Parsetree.Item_bit 4));
         ("WinGravity", (Parsetree.Item_bit 5));
         ("BackingStore", (Parsetree.Item_bit 6));
         ("BackingPlanes", (Parsetree.Item_bit 7));
         ("BackingPixel", (Parsetree.Item_bit 8));
         ("OverrideRedirect", (Parsetree.Item_bit 9));
         ("SaveUnder", (Parsetree.Item_bit 10));
         ("EventMask", (Parsetree.Item_bit 11));
         ("DontPropagate", (Parsetree.Item_bit 12));
         ("Colormap", (Parsetree.Item_bit 13));
         ("Cursor", (Parsetree.Item_bit 14))];
       doc = (Some Parsetree.Doc)};
     Parsetree.Enum {name = "BackPixmap";
       items =
       [("None", (Parsetree.Item_value 0L));
         ("ParentRelative", (Parsetree.Item_value 1L))];
       doc = None};
     Parsetree.Enum {name = "Gravity";
       items =
       [("BitForget", (Parsetree.Item_value 0L));
         ("WinUnmap", (Parsetree.Item_value 0L));
         ("NorthWest", (Parsetree.Item_value 1L));
         ("North", (Parsetree.Item_value 2L));
         ("NorthEast", (Parsetree.Item_value 3L));
         ("West", (Parsetree.Item_value 4L));
         ("Center", (Parsetree.Item_value 5L));
         ("East", (Parsetree.Item_value 6L));
         ("SouthWest", (Parsetree.Item_value 7L));
         ("South", (Parsetree.Item_value 8L));
         ("SouthEast", (Parsetree.Item_value 9L));
         ("Static", (Parsetree.Item_value 10L))];
       doc = None};
     Parsetree.Request {name = "CreateWindow"; opcode = 1;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "depth";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
         Parsetree.Field {name = "wid";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "parent";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "border_width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "class";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "WindowClass" }))
             }};
         Parsetree.Field {name = "visual";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "VISUALID" });
             ft_allowed = None }};
         Parsetree.Field {name = "value_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "CW" }))
             }};
         (Parsetree.Field_switch
            { Parsetree.sw_name = "value_list";
              sw_cond =
              (Parsetree.Cond_bit_and (Parsetree.Field_ref "value_mask"));
              sw_cases =
              [{ Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "BackPixmap"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "background_pixmap";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "PIXMAP" });
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "BackPixmap" }))
                      }}
                   ]
                 };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "BackPixel"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "background_pixel";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "BorderPixmap"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "border_pixmap";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "PIXMAP" });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Pixmap" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "BorderPixel"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "border_pixel";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "BitGravity"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "bit_gravity";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Gravity" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "WinGravity"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "win_gravity";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Gravity" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "BackingStore"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "backing_store";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "BackingStore" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "BackingPlanes"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "backing_planes";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "BackingPixel"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "backing_pixel";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "OverrideRedirect"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "override_redirect";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "BOOL32" });
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "SaveUnder"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "save_under";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "BOOL32" });
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "EventMask"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "event_mask";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_mask
                                { Parsetree.id_module = None;
                                  id_name = "EventMask" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "DontPropagate"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "do_not_propogate_mask";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_mask
                                { Parsetree.id_module = None;
                                  id_name = "EventMask" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "Colormap"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "colormap";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "COLORMAP"
                            });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Colormap" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "Cursor"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "cursor";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "CURSOR" });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Cursor" }))
                       }}
                    ]
                  }
                ]
              })
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "ChangeWindowAttributes"; opcode = 2;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "value_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "CW" }))
             }};
         (Parsetree.Field_switch
            { Parsetree.sw_name = "value_list";
              sw_cond =
              (Parsetree.Cond_bit_and (Parsetree.Field_ref "value_mask"));
              sw_cases =
              [{ Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "CW" };
                    item = "BackPixmap"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "background_pixmap";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_ref
                         { Parsetree.id_module = None; id_name = "PIXMAP" });
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None;
                                 id_name = "BackPixmap" }))
                      }}
                   ]
                 };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "BackPixel"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "background_pixel";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "BorderPixmap"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "border_pixmap";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "PIXMAP" });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Pixmap" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "BorderPixel"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "border_pixel";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "BitGravity"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "bit_gravity";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Gravity" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "WinGravity"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "win_gravity";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Gravity" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "BackingStore"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "backing_store";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "BackingStore" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "BackingPlanes"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "backing_planes";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "BackingPixel"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "backing_pixel";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "OverrideRedirect"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "override_redirect";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "BOOL32" });
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "SaveUnder"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "save_under";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "BOOL32" });
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "EventMask"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "event_mask";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_mask
                                { Parsetree.id_module = None;
                                  id_name = "EventMask" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "DontPropagate"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "do_not_propogate_mask";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_mask
                                { Parsetree.id_module = None;
                                  id_name = "EventMask" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "Colormap"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "colormap";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "COLORMAP"
                            });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Colormap" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "CW" };
                     item = "Cursor"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "cursor";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "CURSOR" });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Cursor" }))
                       }}
                    ]
                  }
                ]
              })
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Enum {name = "MapState";
       items =
       [("Unmapped", (Parsetree.Item_value 0L));
         ("Unviewable", (Parsetree.Item_value 1L));
         ("Viewable", (Parsetree.Item_value 2L))];
       doc = None};
     Parsetree.Request {name = "GetWindowAttributes"; opcode = 3;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "backing_store";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "BackingStore" }))
                    }};
                 Parsetree.Field {name = "visual";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "VISUALID" });
                     ft_allowed = None }};
                 Parsetree.Field {name = "class";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "WindowClass" }))
                     }};
                 Parsetree.Field {name = "bit_gravity";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "Gravity" }))
                     }};
                 Parsetree.Field {name = "win_gravity";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "Gravity" }))
                     }};
                 Parsetree.Field {name = "backing_planes";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None }};
                 Parsetree.Field {name = "backing_pixel";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None }};
                 Parsetree.Field {name = "save_under";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Bool);
                     ft_allowed = None }};
                 Parsetree.Field {name = "map_is_installed";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Bool);
                     ft_allowed = None }};
                 Parsetree.Field {name = "map_state";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "MapState" }))
                     }};
                 Parsetree.Field {name = "override_redirect";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Bool);
                     ft_allowed = None }};
                 Parsetree.Field {name = "colormap";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "COLORMAP" });
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "Colormap" }))
                     }};
                 Parsetree.Field {name = "all_event_masks";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed =
                     (Some (Parsetree.Allowed_mask
                              { Parsetree.id_module = None;
                                id_name = "EventMask" }))
                     }};
                 Parsetree.Field {name = "your_event_mask";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed =
                     (Some (Parsetree.Allowed_mask
                              { Parsetree.id_module = None;
                                id_name = "EventMask" }))
                     }};
                 Parsetree.Field {name = "do_not_propagate_mask";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed =
                     (Some (Parsetree.Allowed_mask
                              { Parsetree.id_module = None;
                                id_name = "EventMask" }))
                     }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                   serialize = false}
                 ];
               doc = (Some Parsetree.Doc) });
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "DestroyWindow"; opcode = 4;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "DestroySubwindows"; opcode = 5;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "SetMode";
       items =
       [("Insert", (Parsetree.Item_value 0L));
         ("Delete", (Parsetree.Item_value 1L))];
       doc = None};
     Parsetree.Request {name = "ChangeSaveSet"; opcode = 6;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "SetMode" }))
            }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "ReparentWindow"; opcode = 7;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "parent";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "MapWindow"; opcode = 8;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "MapSubwindows"; opcode = 9;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "UnmapWindow"; opcode = 10;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "UnmapSubwindows"; opcode = 11;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "ConfigWindow";
       items =
       [("X", (Parsetree.Item_bit 0)); ("Y", (Parsetree.Item_bit 1));
         ("Width", (Parsetree.Item_bit 2));
         ("Height", (Parsetree.Item_bit 3));
         ("BorderWidth", (Parsetree.Item_bit 4));
         ("Sibling", (Parsetree.Item_bit 5));
         ("StackMode", (Parsetree.Item_bit 6))];
       doc = None};
     Parsetree.Enum {name = "StackMode";
       items =
       [("Above", (Parsetree.Item_value 0L));
         ("Below", (Parsetree.Item_value 1L));
         ("TopIf", (Parsetree.Item_value 2L));
         ("BottomIf", (Parsetree.Item_value 3L));
         ("Opposite", (Parsetree.Item_value 4L))];
       doc = None};
     Parsetree.Request {name = "ConfigureWindow"; opcode = 12;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "value_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "ConfigWindow"
                        }))
             }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         (Parsetree.Field_switch
            { Parsetree.sw_name = "value_list";
              sw_cond =
              (Parsetree.Cond_bit_and (Parsetree.Field_ref "value_mask"));
              sw_cases =
              [{ Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum =
                    { Parsetree.id_module = None; id_name = "ConfigWindow" };
                    item = "X"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "x";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int32);
                      ft_allowed = None }}
                   ]
                 };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum =
                     { Parsetree.id_module = None; id_name = "ConfigWindow" };
                     item = "Y"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "y";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum =
                     { Parsetree.id_module = None; id_name = "ConfigWindow" };
                     item = "Width"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "width";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum =
                     { Parsetree.id_module = None; id_name = "ConfigWindow" };
                     item = "Height"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "height";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum =
                     { Parsetree.id_module = None; id_name = "ConfigWindow" };
                     item = "BorderWidth"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "border_width";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum =
                     { Parsetree.id_module = None; id_name = "ConfigWindow" };
                     item = "Sibling"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "sibling";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "WINDOW" });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Window" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum =
                     { Parsetree.id_module = None; id_name = "ConfigWindow" };
                     item = "StackMode"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "stack_mode";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "StackMode" }))
                       }}
                    ]
                  }
                ]
              })
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Enum {name = "Circulate";
       items =
       [("RaiseLowest", (Parsetree.Item_value 0L));
         ("LowerHighest", (Parsetree.Item_value 1L))];
       doc = None};
     Parsetree.Request {name = "CirculateWindow"; opcode = 13;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "direction";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Circulate" }))
            }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "GetGeometry"; opcode = 14;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "depth";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                 Parsetree.Field {name = "root";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "WINDOW" });
                     ft_allowed = None }};
                 Parsetree.Field {name = "x";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "y";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "width";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "height";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "border_width";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                   serialize = false}
                 ];
               doc = (Some Parsetree.Doc) });
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "QueryTree"; opcode = 15;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "root";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "WINDOW" });
                     ft_allowed = None }};
                 Parsetree.Field {name = "parent";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "WINDOW" });
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "Window" }))
                     }};
                 Parsetree.Field {name = "children_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 14);
                   serialize = false};
                 Parsetree.Field_list {name = "children";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "WINDOW" });
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "children_len"))}
                 ];
               doc = (Some Parsetree.Doc) });
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "InternAtom"; opcode = 16;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "only_if_exists";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
         Parsetree.Field {name = "name_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Parsetree.Field_list {name = "name";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "name_len"))}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "atom";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "ATOM" });
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None; id_name = "Atom"
                                }))
                     }}
                 ];
               doc = None });
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "GetAtomName"; opcode = 17;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "atom";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "name_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                   serialize = false};
                 Parsetree.Field_list {name = "name";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Char);
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "name_len"))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Enum {name = "PropMode";
       items =
       [("Replace", (Parsetree.Item_value 0L));
         ("Prepend", (Parsetree.Item_value 1L));
         ("Append", (Parsetree.Item_value 2L))];
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "ChangeProperty"; opcode = 18;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "PropMode" }))
            }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "property";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }};
         Parsetree.Field {name = "type";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }};
         Parsetree.Field {name = "format";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false};
         Parsetree.Field {name = "data_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Parsetree.Field_list {name = "data";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Void);
             ft_allowed = None };
           length =
           (Some (Parsetree.Binop (Parsetree.Div,
                    (Parsetree.Binop (Parsetree.Mul,
                       (Parsetree.Field_ref "data_len"),
                       (Parsetree.Field_ref "format"))),
                    (Parsetree.Expr_value 8L))))}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "DeleteProperty"; opcode = 19;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "property";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "GetPropertyType";
       items = [("Any", (Parsetree.Item_value 0L))]; doc = None};
     Parsetree.Request {name = "GetProperty"; opcode = 20;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "delete";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "property";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }};
         Parsetree.Field {name = "type";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None;
                        id_name = "GetPropertyType" }))
             }};
         Parsetree.Field {name = "long_offset";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Parsetree.Field {name = "long_length";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "format";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                 Parsetree.Field {name = "type";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "ATOM" });
                     ft_allowed = None }};
                 Parsetree.Field {name = "bytes_after";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None }};
                 Parsetree.Field {name = "value_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                   serialize = false};
                 Parsetree.Field_list {name = "value";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Void);
                     ft_allowed = None };
                   length =
                   (Some (Parsetree.Binop (Parsetree.Mul,
                            (Parsetree.Field_ref "value_len"),
                            (Parsetree.Binop (Parsetree.Div,
                               (Parsetree.Field_ref "format"),
                               (Parsetree.Expr_value 8L)))
                            )))}
                 ];
               doc = (Some Parsetree.Doc) });
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "ListProperties"; opcode = 21;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "atoms_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                   serialize = false};
                 Parsetree.Field_list {name = "atoms";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "ATOM" });
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "atoms_len"))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "SetSelectionOwner"; opcode = 22;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "owner";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Window" }))
             }};
         Parsetree.Field {name = "selection";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Time" }))
             }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "GetSelectionOwner"; opcode = 23;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "selection";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "owner";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "WINDOW" });
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "Window" }))
                     }}
                 ];
               doc = (Some Parsetree.Doc) });
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "ConvertSelection"; opcode = 24;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "requestor";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "selection";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }};
         Parsetree.Field {name = "target";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None }};
         Parsetree.Field {name = "property";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Atom" }))
             }};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Time" }))
             }}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "SendEventDest";
       items =
       [("PointerWindow", (Parsetree.Item_value 0L));
         ("ItemFocus", (Parsetree.Item_value 1L))];
       doc = None};
     Parsetree.Request {name = "SendEvent"; opcode = 25;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "propagate";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
         Parsetree.Field {name = "destination";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "SendEventDest"
                        }))
             }};
         Parsetree.Field {name = "event_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "EventMask" }))
             }};
         Parsetree.Field_list {name = "event";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length = (Some (Parsetree.Expr_value 32L))}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Enum {name = "GrabMode";
       items =
       [("Sync", (Parsetree.Item_value 0L));
         ("Async", (Parsetree.Item_value 1L))];
       doc = (Some Parsetree.Doc)};
     Parsetree.Enum {name = "GrabStatus";
       items =
       [("Success", (Parsetree.Item_value 0L));
         ("AlreadyGrabbed", (Parsetree.Item_value 1L));
         ("InvalidTime", (Parsetree.Item_value 2L));
         ("NotViewable", (Parsetree.Item_value 3L));
         ("Frozen", (Parsetree.Item_value 4L))];
       doc = None};
     Parsetree.Enum {name = "Cursor";
       items = [("None", (Parsetree.Item_value 0L))]; doc = None};
     Parsetree.Request {name = "GrabPointer"; opcode = 26;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "owner_events";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
         Parsetree.Field {name = "grab_window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "event_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "EventMask" }))
             }};
         Parsetree.Field {name = "pointer_mode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "GrabMode" }))
             }};
         Parsetree.Field {name = "keyboard_mode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "GrabMode" }))
             }};
         Parsetree.Field {name = "confine_to";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Window" }))
             }};
         Parsetree.Field {name = "cursor";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "CURSOR" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Cursor" }))
             }};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Time" }))
             }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "status";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "GrabStatus" }))
                    }}
                 ];
               doc = None });
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "UngrabPointer"; opcode = 27;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Time" }))
             }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Enum {name = "ButtonIndex";
       items =
       [("Any", (Parsetree.Item_value 0L)); ("1", (Parsetree.Item_value 1L));
         ("2", (Parsetree.Item_value 2L)); ("3", (Parsetree.Item_value 3L));
         ("4", (Parsetree.Item_value 4L)); ("5", (Parsetree.Item_value 5L))];
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "GrabButton"; opcode = 28;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "owner_events";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
         Parsetree.Field {name = "grab_window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "event_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "EventMask" }))
             }};
         Parsetree.Field {name = "pointer_mode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "GrabMode" }))
             }};
         Parsetree.Field {name = "keyboard_mode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "GrabMode" }))
             }};
         Parsetree.Field {name = "confine_to";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Window" }))
             }};
         Parsetree.Field {name = "cursor";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "CURSOR" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Cursor" }))
             }};
         Parsetree.Field {name = "button";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "ButtonIndex" }))
             }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false};
         Parsetree.Field {name = "modifiers";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "ModMask" }))
             }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "UngrabButton"; opcode = 29;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "button";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ButtonIndex" }))
            }};
         Parsetree.Field {name = "grab_window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "modifiers";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "ModMask" }))
             }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "ChangeActivePointerGrab"; opcode = 30;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "cursor";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "CURSOR" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Cursor" }))
             }};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Time" }))
             }};
         Parsetree.Field {name = "event_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "EventMask" }))
             }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "GrabKeyboard"; opcode = 31;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "owner_events";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
         Parsetree.Field {name = "grab_window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Time" }))
             }};
         Parsetree.Field {name = "pointer_mode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "GrabMode" }))
             }};
         Parsetree.Field {name = "keyboard_mode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "GrabMode" }))
             }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "status";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "GrabStatus" }))
                    }}
                 ];
               doc = None });
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "UngrabKeyboard"; opcode = 32;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Time" }))
             }}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "Grab";
       items = [("Any", (Parsetree.Item_value 0L))]; doc = None};
     Parsetree.Request {name = "GrabKey"; opcode = 33;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "owner_events";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
         Parsetree.Field {name = "grab_window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "modifiers";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "ModMask" }))
             }};
         Parsetree.Field {name = "key";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "KEYCODE" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Grab" }))
             }};
         Parsetree.Field {name = "pointer_mode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "GrabMode" }))
             }};
         Parsetree.Field {name = "keyboard_mode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "GrabMode" }))
             }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "UngrabKey"; opcode = 34;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "key";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "KEYCODE" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Grab" }))
            }};
         Parsetree.Field {name = "grab_window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "modifiers";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "ModMask" }))
             }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Enum {name = "Allow";
       items =
       [("AsyncPointer", (Parsetree.Item_value 0L));
         ("SyncPointer", (Parsetree.Item_value 1L));
         ("ReplayPointer", (Parsetree.Item_value 2L));
         ("AsyncKeyboard", (Parsetree.Item_value 3L));
         ("SyncKeyboard", (Parsetree.Item_value 4L));
         ("ReplayKeyboard", (Parsetree.Item_value 5L));
         ("AsyncBoth", (Parsetree.Item_value 6L));
         ("SyncBoth", (Parsetree.Item_value 7L))];
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "AllowEvents"; opcode = 35;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Allow" }))
            }};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Time" }))
             }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "GrabServer"; opcode = 36;
       combine_adjacent = true; fields = []; reply = None; doc = None};
     Parsetree.Request {name = "UngrabServer"; opcode = 37;
       combine_adjacent = true; fields = []; reply = None; doc = None};
     Parsetree.Request {name = "QueryPointer"; opcode = 38;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "same_screen";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                 Parsetree.Field {name = "root";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "WINDOW" });
                     ft_allowed = None }};
                 Parsetree.Field {name = "child";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "WINDOW" });
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "Window" }))
                     }};
                 Parsetree.Field {name = "root_x";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "root_y";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "win_x";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "win_y";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "mask";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed =
                     (Some (Parsetree.Allowed_mask
                              { Parsetree.id_module = None;
                                id_name = "KeyButMask" }))
                     }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                   serialize = false}
                 ];
               doc = (Some Parsetree.Doc) });
       doc = (Some Parsetree.Doc)};
     Parsetree.Struct {name = "TIMECOORD";
       fields =
       [Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ]};
     Parsetree.Request {name = "GetMotionEvents"; opcode = 39;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "start";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Time" }))
             }};
         Parsetree.Field {name = "stop";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Time" }))
             }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "events_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                   serialize = false};
                 Parsetree.Field_list {name = "events";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "TIMECOORD" });
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "events_len"))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "TranslateCoordinates"; opcode = 40;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "src_window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "dst_window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "src_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "src_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "same_screen";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Bool);
                    ft_allowed = None }};
                 Parsetree.Field {name = "child";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "WINDOW" });
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "Window" }))
                     }};
                 Parsetree.Field {name = "dst_x";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "dst_y";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "WarpPointer"; opcode = 41;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "src_window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Window" }))
             }};
         Parsetree.Field {name = "dst_window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Window" }))
             }};
         Parsetree.Field {name = "src_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "src_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "src_width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "src_height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "dst_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "dst_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Enum {name = "InputFocus";
       items =
       [("None", (Parsetree.Item_value 0L));
         ("PointerRoot", (Parsetree.Item_value 1L));
         ("Parent", (Parsetree.Item_value 2L));
         ("FollowKeyboard", (Parsetree.Item_value 3L))];
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "SetInputFocus"; opcode = 42;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "revert_to";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "InputFocus" }))
            }};
         Parsetree.Field {name = "focus";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "InputFocus" }))
             }};
         Parsetree.Field {name = "time";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Time" }))
             }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "GetInputFocus"; opcode = 43;
       combine_adjacent = true; fields = [];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "revert_to";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "InputFocus" }))
                    }};
                 Parsetree.Field {name = "focus";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "WINDOW" });
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "InputFocus" }))
                     }}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "QueryKeymap"; opcode = 44;
       combine_adjacent = true; fields = [];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field_list {name = "keys";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None };
                   length = (Some (Parsetree.Expr_value 32L))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "OpenFont"; opcode = 45;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "fid";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "FONT" });
             ft_allowed = None }};
         Parsetree.Field {name = "name_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Parsetree.Field_list {name = "name";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "name_len"))}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "CloseFont"; opcode = 46;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "font";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "FONT" });
             ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "FontDraw";
       items =
       [("LeftToRight", (Parsetree.Item_value 0L));
         ("RightToLeft", (Parsetree.Item_value 1L))];
       doc = None};
     Parsetree.Struct {name = "FONTPROP";
       fields =
       [Parsetree.Field {name = "name";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
         Parsetree.Field {name = "value";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }}
         ]};
     Parsetree.Struct {name = "CHARINFO";
       fields =
       [Parsetree.Field {name = "left_side_bearing";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
         Parsetree.Field {name = "right_side_bearing";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "character_width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "ascent";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "descent";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "attributes";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ]};
     Parsetree.Request {name = "QueryFont"; opcode = 47;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "font";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "FONTABLE" });
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "min_bounds";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "CHARINFO" });
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                   serialize = false};
                 Parsetree.Field {name = "max_bounds";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "CHARINFO" });
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                   serialize = false};
                 Parsetree.Field {name = "min_char_or_byte2";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "max_char_or_byte2";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "default_char";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "properties_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "draw_direction";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Byte);
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "FontDraw" }))
                     }};
                 Parsetree.Field {name = "min_byte1";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None }};
                 Parsetree.Field {name = "max_byte1";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None }};
                 Parsetree.Field {name = "all_chars_exist";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Bool);
                     ft_allowed = None }};
                 Parsetree.Field {name = "font_ascent";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "font_descent";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "char_infos_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None }};
                 Parsetree.Field_list {name = "properties";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "FONTPROP" });
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "properties_len"))};
                 Parsetree.Field_list {name = "char_infos";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "CHARINFO" });
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "char_infos_len"))}
                 ];
               doc = (Some Parsetree.Doc) });
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "QueryTextExtents"; opcode = 48;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_expr {name = "odd_length";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None };
          expr =
          (Parsetree.Binop (Parsetree.Bit_and,
             (Parsetree.Field_ref "string_len"), (Parsetree.Expr_value 1L)))};
         Parsetree.Field {name = "font";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "FONTABLE" });
             ft_allowed = None }};
         Parsetree.Field_list {name = "string";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "CHAR2B" });
             ft_allowed = None };
           length = None}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "draw_direction";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "FontDraw" }))
                    }};
                 Parsetree.Field {name = "font_ascent";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "font_descent";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "overall_ascent";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "overall_descent";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "overall_width";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int32);
                     ft_allowed = None }};
                 Parsetree.Field {name = "overall_left";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int32);
                     ft_allowed = None }};
                 Parsetree.Field {name = "overall_right";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int32);
                     ft_allowed = None }}
                 ];
               doc = None });
       doc = (Some Parsetree.Doc)};
     Parsetree.Struct {name = "STR";
       fields =
       [Parsetree.Field {name = "name_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
         Parsetree.Field_list {name = "name";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "name_len"))}
         ]};
     Parsetree.Request {name = "ListFonts"; opcode = 49;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "max_names";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "pattern_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_list {name = "pattern";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "pattern_len"))}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "names_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                   serialize = false};
                 Parsetree.Field_list {name = "names";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "STR" });
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "names_len"))}
                 ];
               doc = (Some Parsetree.Doc) });
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "ListFontsWithInfo"; opcode = 50;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "max_names";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "pattern_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_list {name = "pattern";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "pattern_len"))}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "name_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                 Parsetree.Field {name = "min_bounds";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "CHARINFO" });
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                   serialize = false};
                 Parsetree.Field {name = "max_bounds";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "CHARINFO" });
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                   serialize = false};
                 Parsetree.Field {name = "min_char_or_byte2";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "max_char_or_byte2";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "default_char";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "properties_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "draw_direction";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Byte);
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "FontDraw" }))
                     }};
                 Parsetree.Field {name = "min_byte1";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None }};
                 Parsetree.Field {name = "max_byte1";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None }};
                 Parsetree.Field {name = "all_chars_exist";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Bool);
                     ft_allowed = None }};
                 Parsetree.Field {name = "font_ascent";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "font_descent";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Int16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "replies_hint";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None }};
                 Parsetree.Field_list {name = "properties";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "FONTPROP" });
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "properties_len"))};
                 Parsetree.Field_list {name = "name";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Char);
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "name_len"))}
                 ];
               doc = (Some Parsetree.Doc) });
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "SetFontPath"; opcode = 51;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "font_qty";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Parsetree.Field_list {name = "font";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "STR" });
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "font_qty"))}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "GetFontPath"; opcode = 52;
       combine_adjacent = true; fields = [];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "path_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                   serialize = false};
                 Parsetree.Field_list {name = "path";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "STR" });
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "path_len"))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "CreatePixmap"; opcode = 53;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "depth";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
         Parsetree.Field {name = "pid";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "PIXMAP" });
             ft_allowed = None }};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "FreePixmap"; opcode = 54;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "pixmap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "PIXMAP" });
             ft_allowed = None }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Enum {name = "GC";
       items =
       [("Function", (Parsetree.Item_bit 0));
         ("PlaneMask", (Parsetree.Item_bit 1));
         ("Foreground", (Parsetree.Item_bit 2));
         ("Background", (Parsetree.Item_bit 3));
         ("LineWidth", (Parsetree.Item_bit 4));
         ("LineStyle", (Parsetree.Item_bit 5));
         ("CapStyle", (Parsetree.Item_bit 6));
         ("JoinStyle", (Parsetree.Item_bit 7));
         ("FillStyle", (Parsetree.Item_bit 8));
         ("FillRule", (Parsetree.Item_bit 9));
         ("Tile", (Parsetree.Item_bit 10));
         ("Stipple", (Parsetree.Item_bit 11));
         ("TileStippleOriginX", (Parsetree.Item_bit 12));
         ("TileStippleOriginY", (Parsetree.Item_bit 13));
         ("Font", (Parsetree.Item_bit 14));
         ("SubwindowMode", (Parsetree.Item_bit 15));
         ("GraphicsExposures", (Parsetree.Item_bit 16));
         ("ClipOriginX", (Parsetree.Item_bit 17));
         ("ClipOriginY", (Parsetree.Item_bit 18));
         ("ClipMask", (Parsetree.Item_bit 19));
         ("DashOffset", (Parsetree.Item_bit 20));
         ("DashList", (Parsetree.Item_bit 21));
         ("ArcMode", (Parsetree.Item_bit 22))];
       doc = (Some Parsetree.Doc)};
     Parsetree.Enum {name = "GX";
       items =
       [("clear", (Parsetree.Item_value 0L));
         ("and", (Parsetree.Item_value 1L));
         ("andReverse", (Parsetree.Item_value 2L));
         ("copy", (Parsetree.Item_value 3L));
         ("andInverted", (Parsetree.Item_value 4L));
         ("noop", (Parsetree.Item_value 5L));
         ("xor", (Parsetree.Item_value 6L));
         ("or", (Parsetree.Item_value 7L));
         ("nor", (Parsetree.Item_value 8L));
         ("equiv", (Parsetree.Item_value 9L));
         ("invert", (Parsetree.Item_value 10L));
         ("orReverse", (Parsetree.Item_value 11L));
         ("copyInverted", (Parsetree.Item_value 12L));
         ("orInverted", (Parsetree.Item_value 13L));
         ("nand", (Parsetree.Item_value 14L));
         ("set", (Parsetree.Item_value 15L))];
       doc = None};
     Parsetree.Enum {name = "LineStyle";
       items =
       [("Solid", (Parsetree.Item_value 0L));
         ("OnOffDash", (Parsetree.Item_value 1L));
         ("DoubleDash", (Parsetree.Item_value 2L))];
       doc = None};
     Parsetree.Enum {name = "CapStyle";
       items =
       [("NotLast", (Parsetree.Item_value 0L));
         ("Butt", (Parsetree.Item_value 1L));
         ("Round", (Parsetree.Item_value 2L));
         ("Projecting", (Parsetree.Item_value 3L))];
       doc = None};
     Parsetree.Enum {name = "JoinStyle";
       items =
       [("Miter", (Parsetree.Item_value 0L));
         ("Round", (Parsetree.Item_value 1L));
         ("Bevel", (Parsetree.Item_value 2L))];
       doc = None};
     Parsetree.Enum {name = "FillStyle";
       items =
       [("Solid", (Parsetree.Item_value 0L));
         ("Tiled", (Parsetree.Item_value 1L));
         ("Stippled", (Parsetree.Item_value 2L));
         ("OpaqueStippled", (Parsetree.Item_value 3L))];
       doc = None};
     Parsetree.Enum {name = "FillRule";
       items =
       [("EvenOdd", (Parsetree.Item_value 0L));
         ("Winding", (Parsetree.Item_value 1L))];
       doc = None};
     Parsetree.Enum {name = "SubwindowMode";
       items =
       [("ClipByChildren", (Parsetree.Item_value 0L));
         ("IncludeInferiors", (Parsetree.Item_value 1L))];
       doc = None};
     Parsetree.Enum {name = "ArcMode";
       items =
       [("Chord", (Parsetree.Item_value 0L));
         ("PieSlice", (Parsetree.Item_value 1L))];
       doc = None};
     Parsetree.Request {name = "CreateGC"; opcode = 55;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "cid";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "value_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "GC" }))
             }};
         (Parsetree.Field_switch
            { Parsetree.sw_name = "value_list";
              sw_cond =
              (Parsetree.Cond_bit_and (Parsetree.Field_ref "value_mask"));
              sw_cases =
              [{ Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "GC" };
                    item = "Function"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "function";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None; id_name = "GX" }))
                      }}
                   ]
                 };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "PlaneMask"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "plane_mask";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "Foreground"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "foreground";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "Background"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "background";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "LineWidth"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "line_width";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "LineStyle"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "line_style";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "LineStyle" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "CapStyle"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "cap_style";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "CapStyle" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "JoinStyle"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "join_style";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "JoinStyle" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "FillStyle"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "fill_style";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "FillStyle" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "FillRule"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "fill_rule";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "FillRule" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "Tile"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "tile";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "PIXMAP" });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Pixmap" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "Stipple"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "stipple";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "PIXMAP" });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Pixmap" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "TileStippleOriginX"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "tile_stipple_x_origin";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "TileStippleOriginY"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "tile_stipple_y_origin";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "Font"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "font";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "FONT" });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Font" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "SubwindowMode"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "subwindow_mode";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "SubwindowMode" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "GraphicsExposures"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "graphics_exposures";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "BOOL32" });
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "ClipOriginX"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "clip_x_origin";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "ClipOriginY"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "clip_y_origin";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "ClipMask"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "clip_mask";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "PIXMAP" });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Pixmap" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "DashOffset"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "dash_offset";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "DashList"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "dashes";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "ArcMode"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "arc_mode";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "ArcMode" }))
                       }}
                    ]
                  }
                ]
              })
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "ChangeGC"; opcode = 56;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field {name = "value_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "GC" }))
             }};
         (Parsetree.Field_switch
            { Parsetree.sw_name = "value_list";
              sw_cond =
              (Parsetree.Cond_bit_and (Parsetree.Field_ref "value_mask"));
              sw_cases =
              [{ Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "GC" };
                    item = "Function"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "function";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Card32);
                      ft_allowed =
                      (Some (Parsetree.Allowed_enum
                               { Parsetree.id_module = None; id_name = "GX" }))
                      }}
                   ]
                 };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "PlaneMask"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "plane_mask";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "Foreground"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "foreground";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "Background"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "background";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "LineWidth"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "line_width";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "LineStyle"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "line_style";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "LineStyle" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "CapStyle"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "cap_style";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "CapStyle" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "JoinStyle"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "join_style";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "JoinStyle" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "FillStyle"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "fill_style";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "FillStyle" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "FillRule"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "fill_rule";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "FillRule" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "Tile"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "tile";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "PIXMAP" });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Pixmap" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "Stipple"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "stipple";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "PIXMAP" });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Pixmap" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "TileStippleOriginX"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "tile_stipple_x_origin";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "TileStippleOriginY"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "tile_stipple_y_origin";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "Font"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "font";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "FONT" });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Font" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "SubwindowMode"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "subwindow_mode";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "SubwindowMode" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "GraphicsExposures"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "graphics_exposures";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "BOOL32" });
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "ClipOriginX"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "clip_x_origin";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "ClipOriginY"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "clip_y_origin";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "ClipMask"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "clip_mask";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "PIXMAP" });
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "Pixmap" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "DashOffset"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "dash_offset";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "DashList"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "dashes";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "GC" };
                     item = "ArcMode"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "arc_mode";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "ArcMode" }))
                       }}
                    ]
                  }
                ]
              })
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "CopyGC"; opcode = 57;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "src_gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field {name = "dst_gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field {name = "value_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "GC" }))
             }}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "SetDashes"; opcode = 58;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field {name = "dash_offset";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "dashes_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_list {name = "dashes";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "dashes_len"))}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "ClipOrdering";
       items =
       [("Unsorted", (Parsetree.Item_value 0L));
         ("YSorted", (Parsetree.Item_value 1L));
         ("YXSorted", (Parsetree.Item_value 2L));
         ("YXBanded", (Parsetree.Item_value 3L))];
       doc = None};
     Parsetree.Request {name = "SetClipRectangles"; opcode = 59;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "ordering";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ClipOrdering" }))
            }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field {name = "clip_x_origin";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "clip_y_origin";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field_list {name = "rectangles";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "RECTANGLE" });
             ft_allowed = None };
           length = None}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "FreeGC"; opcode = 60;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "ClearArea"; opcode = 61;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "exposures";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "CopyArea"; opcode = 62;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "src_drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "dst_drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field {name = "src_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "src_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "dst_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "dst_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "CopyPlane"; opcode = 63;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "src_drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "dst_drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field {name = "src_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "src_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "dst_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "dst_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "bit_plane";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "CoordMode";
       items =
       [("Origin", (Parsetree.Item_value 0L));
         ("Previous", (Parsetree.Item_value 1L))];
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "PolyPoint"; opcode = 64;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "coordinate_mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "CoordMode" }))
            }};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field_list {name = "points";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "POINT" });
             ft_allowed = None };
           length = None}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "PolyLine"; opcode = 65;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "coordinate_mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "CoordMode" }))
            }};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field_list {name = "points";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "POINT" });
             ft_allowed = None };
           length = None}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Struct {name = "SEGMENT";
       fields =
       [Parsetree.Field {name = "x1";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
         Parsetree.Field {name = "y1";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "x2";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "y2";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ]};
     Parsetree.Request {name = "PolySegment"; opcode = 66;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field_list {name = "segments";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "SEGMENT" });
             ft_allowed = None };
           length = None}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "PolyRectangle"; opcode = 67;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field_list {name = "rectangles";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "RECTANGLE" });
             ft_allowed = None };
           length = None}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "PolyArc"; opcode = 68;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field_list {name = "arcs";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ARC" });
             ft_allowed = None };
           length = None}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "PolyShape";
       items =
       [("Complex", (Parsetree.Item_value 0L));
         ("Nonconvex", (Parsetree.Item_value 1L));
         ("Convex", (Parsetree.Item_value 2L))];
       doc = None};
     Parsetree.Request {name = "FillPoly"; opcode = 69;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field {name = "shape";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "PolyShape" }))
             }};
         Parsetree.Field {name = "coordinate_mode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "CoordMode" }))
             }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Parsetree.Field_list {name = "points";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "POINT" });
             ft_allowed = None };
           length = None}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "PolyFillRectangle"; opcode = 70;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field_list {name = "rectangles";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "RECTANGLE" });
             ft_allowed = None };
           length = None}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "PolyFillArc"; opcode = 71;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field_list {name = "arcs";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ARC" });
             ft_allowed = None };
           length = None}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "ImageFormat";
       items =
       [("XYBitmap", (Parsetree.Item_value 0L));
         ("XYPixmap", (Parsetree.Item_value 1L));
         ("ZPixmap", (Parsetree.Item_value 2L))];
       doc = None};
     Parsetree.Request {name = "PutImage"; opcode = 72;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ImageFormat" }))
            }};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "dst_x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "dst_y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "left_pad";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field {name = "depth";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Parsetree.Field_list {name = "data";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed = None };
           length = None}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "GetImage"; opcode = 73;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ImageFormat" }))
            }};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "plane_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "depth";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                 Parsetree.Field {name = "visual";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "VISUALID" });
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                   serialize = false};
                 Parsetree.Field_list {name = "data";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Byte);
                     ft_allowed = None };
                   length =
                   (Some (Parsetree.Binop (Parsetree.Mul,
                            (Parsetree.Field_ref "length"),
                            (Parsetree.Expr_value 4L))))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "PolyText8"; opcode = 74;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field_list {name = "items";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed = None };
           length = None}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "PolyText16"; opcode = 75;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field_list {name = "items";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed = None };
           length = None}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "ImageText8"; opcode = 76;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "string_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed = None }};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field_list {name = "string";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "string_len"))}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "ImageText16"; opcode = 77;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "string_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed = None }};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "gc";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field_list {name = "string";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "CHAR2B" });
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "string_len"))}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Enum {name = "ColormapAlloc";
       items =
       [("None", (Parsetree.Item_value 0L));
         ("All", (Parsetree.Item_value 1L))];
       doc = None};
     Parsetree.Request {name = "CreateColormap"; opcode = 78;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "alloc";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ColormapAlloc"
                       }))
            }};
         Parsetree.Field {name = "mid";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "visual";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "VISUALID" });
             ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "FreeColormap"; opcode = 79;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "cmap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "CopyColormapAndFree"; opcode = 80;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "mid";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }};
         Parsetree.Field {name = "src_cmap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "InstallColormap"; opcode = 81;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "cmap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "UninstallColormap"; opcode = 82;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "cmap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "ListInstalledColormaps"; opcode = 83;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "cmaps_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                   serialize = false};
                 Parsetree.Field_list {name = "cmaps";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "COLORMAP" });
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "cmaps_len"))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "AllocColor"; opcode = 84;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "cmap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }};
         Parsetree.Field {name = "red";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "green";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "blue";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "red";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "green";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "blue";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                   serialize = false};
                 Parsetree.Field {name = "pixel";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None }}
                 ];
               doc = None });
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "AllocNamedColor"; opcode = 85;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "cmap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }};
         Parsetree.Field {name = "name_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Parsetree.Field_list {name = "name";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "name_len"))}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "pixel";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None }};
                 Parsetree.Field {name = "exact_red";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "exact_green";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "exact_blue";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "visual_red";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "visual_green";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "visual_blue";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "AllocColorCells"; opcode = 86;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "contiguous";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
         Parsetree.Field {name = "cmap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }};
         Parsetree.Field {name = "colors";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "planes";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "pixels_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "masks_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                   serialize = false};
                 Parsetree.Field_list {name = "pixels";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "pixels_len"))};
                 Parsetree.Field_list {name = "masks";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "masks_len"))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "AllocColorPlanes"; opcode = 87;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "contiguous";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
         Parsetree.Field {name = "cmap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }};
         Parsetree.Field {name = "colors";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "reds";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "greens";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "blues";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "pixels_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                   serialize = false};
                 Parsetree.Field {name = "red_mask";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None }};
                 Parsetree.Field {name = "green_mask";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None }};
                 Parsetree.Field {name = "blue_mask";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                   serialize = false};
                 Parsetree.Field_list {name = "pixels";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "pixels_len"))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "FreeColors"; opcode = 88;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "cmap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }};
         Parsetree.Field {name = "plane_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Parsetree.Field_list {name = "pixels";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None };
           length = None}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "ColorFlag";
       items =
       [("Red", (Parsetree.Item_bit 0)); ("Green", (Parsetree.Item_bit 1));
         ("Blue", (Parsetree.Item_bit 2))];
       doc = None};
     Parsetree.Struct {name = "COLORITEM";
       fields =
       [Parsetree.Field {name = "pixel";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
         Parsetree.Field {name = "red";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "green";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "blue";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "flags";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "ColorFlag" }))
             }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ]};
     Parsetree.Request {name = "StoreColors"; opcode = 89;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "cmap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }};
         Parsetree.Field_list {name = "items";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORITEM" });
             ft_allowed = None };
           length = None}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "StoreNamedColor"; opcode = 90;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "ColorFlag" }))
            }};
         Parsetree.Field {name = "cmap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }};
         Parsetree.Field {name = "pixel";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Parsetree.Field {name = "name_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Parsetree.Field_list {name = "name";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "name_len"))}
         ];
       reply = None; doc = None};
     Parsetree.Struct {name = "RGB";
       fields =
       [Parsetree.Field {name = "red";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
         Parsetree.Field {name = "green";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "blue";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ]};
     Parsetree.Request {name = "QueryColors"; opcode = 91;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "cmap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }};
         Parsetree.Field_list {name = "pixels";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed = None };
           length = None}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "colors_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                   serialize = false};
                 Parsetree.Field_list {name = "colors";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "RGB" });
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "colors_len"))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "LookupColor"; opcode = 92;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "cmap";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "COLORMAP" });
             ft_allowed = None }};
         Parsetree.Field {name = "name_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Parsetree.Field_list {name = "name";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "name_len"))}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "exact_red";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "exact_green";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "exact_blue";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "visual_red";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "visual_green";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "visual_blue";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }}
                 ];
               doc = None });
       doc = None};
     Parsetree.Enum {name = "Pixmap";
       items = [("None", (Parsetree.Item_value 0L))]; doc = None};
     Parsetree.Request {name = "CreateCursor"; opcode = 93;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "cid";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "CURSOR" });
             ft_allowed = None }};
         Parsetree.Field {name = "source";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "PIXMAP" });
             ft_allowed = None }};
         Parsetree.Field {name = "mask";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "PIXMAP" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Pixmap" }))
             }};
         Parsetree.Field {name = "fore_red";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "fore_green";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "fore_blue";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "back_red";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "back_green";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "back_blue";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "x";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "y";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "Font";
       items = [("None", (Parsetree.Item_value 0L))]; doc = None};
     Parsetree.Request {name = "CreateGlyphCursor"; opcode = 94;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "cid";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "CURSOR" });
             ft_allowed = None }};
         Parsetree.Field {name = "source_font";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "FONT" });
             ft_allowed = None }};
         Parsetree.Field {name = "mask_font";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "FONT" });
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Font" }))
             }};
         Parsetree.Field {name = "source_char";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "mask_char";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "fore_red";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "fore_green";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "fore_blue";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "back_red";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "back_green";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "back_blue";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "FreeCursor"; opcode = 95;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "cursor";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "CURSOR" });
             ft_allowed = None }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "RecolorCursor"; opcode = 96;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "cursor";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "CURSOR" });
             ft_allowed = None }};
         Parsetree.Field {name = "fore_red";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "fore_green";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "fore_blue";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "back_red";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "back_green";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "back_blue";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "QueryShapeOf";
       items =
       [("LargestCursor", (Parsetree.Item_value 0L));
         ("FastestTile", (Parsetree.Item_value 1L));
         ("FastestStipple", (Parsetree.Item_value 2L))];
       doc = None};
     Parsetree.Request {name = "QueryBestSize"; opcode = 97;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "class";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "QueryShapeOf" }))
            }};
         Parsetree.Field {name = "drawable";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Parsetree.Field {name = "width";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "height";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "width";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "height";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "QueryExtension"; opcode = 98;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "name_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Parsetree.Field_list {name = "name";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "name_len"))}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "present";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Bool);
                     ft_allowed = None }};
                 Parsetree.Field {name = "major_opcode";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None }};
                 Parsetree.Field {name = "first_event";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None }};
                 Parsetree.Field {name = "first_error";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None }}
                 ];
               doc = (Some Parsetree.Doc) });
       doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "ListExtensions"; opcode = 99;
       combine_adjacent = true; fields = [];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "names_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                   serialize = false};
                 Parsetree.Field_list {name = "names";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "STR" });
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "names_len"))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "ChangeKeyboardMapping"; opcode = 100;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "keycode_count";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
         Parsetree.Field {name = "first_keycode";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "KEYCODE" });
             ft_allowed = None }};
         Parsetree.Field {name = "keysyms_per_keycode";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Parsetree.Field_list {name = "keysyms";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "KEYSYM" });
             ft_allowed = None };
           length =
           (Some (Parsetree.Binop (Parsetree.Mul,
                    (Parsetree.Field_ref "keycode_count"),
                    (Parsetree.Field_ref "keysyms_per_keycode"))))}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "GetKeyboardMapping"; opcode = 101;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "first_keycode";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "KEYCODE" });
             ft_allowed = None }};
         Parsetree.Field {name = "count";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "keysyms_per_keycode";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                   serialize = false};
                 Parsetree.Field_list {name = "keysyms";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "KEYSYM" });
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "length"))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Enum {name = "KB";
       items =
       [("KeyClickPercent", (Parsetree.Item_bit 0));
         ("BellPercent", (Parsetree.Item_bit 1));
         ("BellPitch", (Parsetree.Item_bit 2));
         ("BellDuration", (Parsetree.Item_bit 3));
         ("Led", (Parsetree.Item_bit 4));
         ("LedMode", (Parsetree.Item_bit 5));
         ("Key", (Parsetree.Item_bit 6));
         ("AutoRepeatMode", (Parsetree.Item_bit 7))];
       doc = None};
     Parsetree.Enum {name = "LedMode";
       items =
       [("Off", (Parsetree.Item_value 0L)); ("On", (Parsetree.Item_value 1L))
         ];
       doc = None};
     Parsetree.Enum {name = "AutoRepeatMode";
       items =
       [("Off", (Parsetree.Item_value 0L));
         ("On", (Parsetree.Item_value 1L));
         ("Default", (Parsetree.Item_value 2L))];
       doc = None};
     Parsetree.Request {name = "ChangeKeyboardControl"; opcode = 102;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "value_mask";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Parsetree.Allowed_mask
                      { Parsetree.id_module = None; id_name = "KB" }))
             }};
         (Parsetree.Field_switch
            { Parsetree.sw_name = "value_list";
              sw_cond =
              (Parsetree.Cond_bit_and (Parsetree.Field_ref "value_mask"));
              sw_cases =
              [{ Parsetree.cs_name = None;
                 cs_cond =
                 [Parsetree.Enum_ref {
                    enum = { Parsetree.id_module = None; id_name = "KB" };
                    item = "KeyClickPercent"}
                   ];
                 cs_fields =
                 [Parsetree.Field {name = "key_click_percent";
                    type_ =
                    { Parsetree.ft_type =
                      (Parsetree.Type_primitive Parsetree.Int32);
                      ft_allowed = None }}
                   ]
                 };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "KB" };
                     item = "BellPercent"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "bell_percent";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "KB" };
                     item = "BellPitch"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "bell_pitch";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "KB" };
                     item = "BellDuration"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "bell_duration";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Int32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "KB" };
                     item = "Led"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "led";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "KB" };
                     item = "LedMode"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "led_mode";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "LedMode" }))
                       }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "KB" };
                     item = "Key"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "key";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_ref
                          { Parsetree.id_module = None; id_name = "KEYCODE32"
                            });
                       ft_allowed = None }}
                    ]
                  };
                { Parsetree.cs_name = None;
                  cs_cond =
                  [Parsetree.Enum_ref {
                     enum = { Parsetree.id_module = None; id_name = "KB" };
                     item = "AutoRepeatMode"}
                    ];
                  cs_fields =
                  [Parsetree.Field {name = "auto_repeat_mode";
                     type_ =
                     { Parsetree.ft_type =
                       (Parsetree.Type_primitive Parsetree.Card32);
                       ft_allowed =
                       (Some (Parsetree.Allowed_enum
                                { Parsetree.id_module = None;
                                  id_name = "AutoRepeatMode" }))
                       }}
                    ]
                  }
                ]
              })
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "GetKeyboardControl"; opcode = 103;
       combine_adjacent = true; fields = [];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "global_auto_repeat";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "AutoRepeatMode" }))
                    }};
                 Parsetree.Field {name = "led_mask";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card32);
                     ft_allowed = None }};
                 Parsetree.Field {name = "key_click_percent";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None }};
                 Parsetree.Field {name = "bell_percent";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None }};
                 Parsetree.Field {name = "bell_pitch";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "bell_duration";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                   serialize = false};
                 Parsetree.Field_list {name = "auto_repeats";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None };
                   length = (Some (Parsetree.Expr_value 32L))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "Bell"; opcode = 104; combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "percent";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int8);
            ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "ChangePointerControl"; opcode = 105;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "acceleration_numerator";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "acceleration_denominator";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "threshold";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "do_acceleration";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
             ft_allowed = None }};
         Parsetree.Field {name = "do_threshold";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
             ft_allowed = None }}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "GetPointerControl"; opcode = 106;
       combine_adjacent = true; fields = [];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "acceleration_numerator";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "acceleration_denominator";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "threshold";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 18);
                   serialize = false}
                 ];
               doc = None });
       doc = None};
     Parsetree.Enum {name = "Blanking";
       items =
       [("NotPreferred", (Parsetree.Item_value 0L));
         ("Preferred", (Parsetree.Item_value 1L));
         ("Default", (Parsetree.Item_value 2L))];
       doc = None};
     Parsetree.Enum {name = "Exposures";
       items =
       [("NotAllowed", (Parsetree.Item_value 0L));
         ("Allowed", (Parsetree.Item_value 1L));
         ("Default", (Parsetree.Item_value 2L))];
       doc = None};
     Parsetree.Request {name = "SetScreenSaver"; opcode = 107;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "timeout";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "interval";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field {name = "prefer_blanking";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Blanking" }))
             }};
         Parsetree.Field {name = "allow_exposures";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Exposures" }))
             }}
         ];
       reply = None; doc = None};
     Parsetree.Request {name = "GetScreenSaver"; opcode = 108;
       combine_adjacent = true; fields = [];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                  serialize = false};
                 Parsetree.Field {name = "timeout";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "interval";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field {name = "prefer_blanking";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Byte);
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "Blanking" }))
                     }};
                 Parsetree.Field {name = "allow_exposures";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Byte);
                     ft_allowed =
                     (Some (Parsetree.Allowed_enum
                              { Parsetree.id_module = None;
                                id_name = "Exposures" }))
                     }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 18);
                   serialize = false}
                 ];
               doc = None });
       doc = None};
     Parsetree.Enum {name = "HostMode";
       items =
       [("Insert", (Parsetree.Item_value 0L));
         ("Delete", (Parsetree.Item_value 1L))];
       doc = None};
     Parsetree.Enum {name = "Family";
       items =
       [("Internet", (Parsetree.Item_value 0L));
         ("DECnet", (Parsetree.Item_value 1L));
         ("Chaos", (Parsetree.Item_value 2L));
         ("ServerInterpreted", (Parsetree.Item_value 5L));
         ("Internet6", (Parsetree.Item_value 6L))];
       doc = None};
     Parsetree.Request {name = "ChangeHosts"; opcode = 109;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "HostMode" }))
            }};
         Parsetree.Field {name = "family";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Family" }))
             }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false};
         Parsetree.Field {name = "address_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_list {name = "address";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "address_len"))}
         ];
       reply = None; doc = None};
     Parsetree.Struct {name = "HOST";
       fields =
       [Parsetree.Field {name = "family";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Family" }))
            }};
         Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false};
         Parsetree.Field {name = "address_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field_list {name = "address";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "address_len"))};
         Parsetree.Field_pad {pad = (Parsetree.Pad_align 4);
           serialize = false}
         ]};
     Parsetree.Request {name = "ListHosts"; opcode = 110;
       combine_adjacent = true; fields = [];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "mode";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "AccessControl" }))
                    }};
                 Parsetree.Field {name = "hosts_len";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card16);
                     ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                   serialize = false};
                 Parsetree.Field_list {name = "hosts";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "HOST" });
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "hosts_len"))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Enum {name = "AccessControl";
       items =
       [("Disable", (Parsetree.Item_value 0L));
         ("Enable", (Parsetree.Item_value 1L))];
       doc = None};
     Parsetree.Request {name = "SetAccessControl"; opcode = 111;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "AccessControl"
                       }))
            }}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "CloseDown";
       items =
       [("DestroyAll", (Parsetree.Item_value 0L));
         ("RetainPermanent", (Parsetree.Item_value 1L));
         ("RetainTemporary", (Parsetree.Item_value 2L))];
       doc = None};
     Parsetree.Request {name = "SetCloseDownMode"; opcode = 112;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "CloseDown" }))
            }}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "Kill";
       items = [("AllTemporary", (Parsetree.Item_value 0L))]; doc = None};
     Parsetree.Request {name = "KillClient"; opcode = 113;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "resource";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Parsetree.Allowed_enum
                      { Parsetree.id_module = None; id_name = "Kill" }))
             }}
         ];
       reply = None; doc = (Some Parsetree.Doc)};
     Parsetree.Request {name = "RotateProperties"; opcode = 114;
       combine_adjacent = true;
       fields =
       [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
         Parsetree.Field {name = "window";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "WINDOW" });
             ft_allowed = None }};
         Parsetree.Field {name = "atoms_len";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Parsetree.Field {name = "delta";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Parsetree.Field_list {name = "atoms";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "ATOM" });
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "atoms_len"))}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "ScreenSaver";
       items =
       [("Reset", (Parsetree.Item_value 0L));
         ("Active", (Parsetree.Item_value 1L))];
       doc = None};
     Parsetree.Request {name = "ForceScreenSaver"; opcode = 115;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "mode";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ScreenSaver" }))
            }}
         ];
       reply = None; doc = None};
     Parsetree.Enum {name = "MappingStatus";
       items =
       [("Success", (Parsetree.Item_value 0L));
         ("Busy", (Parsetree.Item_value 1L));
         ("Failure", (Parsetree.Item_value 2L))];
       doc = None};
     Parsetree.Request {name = "SetPointerMapping"; opcode = 116;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "map_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
         Parsetree.Field_list {name = "map";
           type_ =
           { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
             ft_allowed = None };
           length = (Some (Parsetree.Field_ref "map_len"))}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "status";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "MappingStatus" }))
                    }}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "GetPointerMapping"; opcode = 117;
       combine_adjacent = true; fields = [];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "map_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                   serialize = false};
                 Parsetree.Field_list {name = "map";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_primitive Parsetree.Card8);
                     ft_allowed = None };
                   length = (Some (Parsetree.Field_ref "map_len"))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Enum {name = "MapIndex";
       items =
       [("Shift", (Parsetree.Item_value 0L));
         ("Lock", (Parsetree.Item_value 1L));
         ("Control", (Parsetree.Item_value 2L));
         ("1", (Parsetree.Item_value 3L)); ("2", (Parsetree.Item_value 4L));
         ("3", (Parsetree.Item_value 5L)); ("4", (Parsetree.Item_value 6L));
         ("5", (Parsetree.Item_value 7L))];
       doc = None};
     Parsetree.Request {name = "SetModifierMapping"; opcode = 118;
       combine_adjacent = true;
       fields =
       [Parsetree.Field {name = "keycodes_per_modifier";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
         Parsetree.Field_list {name = "keycodes";
           type_ =
           { Parsetree.ft_type =
             (Parsetree.Type_ref
                { Parsetree.id_module = None; id_name = "KEYCODE" });
             ft_allowed = None };
           length =
           (Some (Parsetree.Binop (Parsetree.Mul,
                    (Parsetree.Field_ref "keycodes_per_modifier"),
                    (Parsetree.Expr_value 8L))))}
         ];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "status";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Byte);
                    ft_allowed =
                    (Some (Parsetree.Allowed_enum
                             { Parsetree.id_module = None;
                               id_name = "MappingStatus" }))
                    }}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "GetModifierMapping"; opcode = 119;
       combine_adjacent = true; fields = [];
       reply =
       (Some { Parsetree.fields =
               [Parsetree.Field {name = "keycodes_per_modifier";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None }};
                 Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                   serialize = false};
                 Parsetree.Field_list {name = "keycodes";
                   type_ =
                   { Parsetree.ft_type =
                     (Parsetree.Type_ref
                        { Parsetree.id_module = None; id_name = "KEYCODE" });
                     ft_allowed = None };
                   length =
                   (Some (Parsetree.Binop (Parsetree.Mul,
                            (Parsetree.Field_ref "keycodes_per_modifier"),
                            (Parsetree.Expr_value 8L))))}
                 ];
               doc = None });
       doc = None};
     Parsetree.Request {name = "NoOperation"; opcode = 127;
       combine_adjacent = true; fields = []; reply = None; doc = None}
     ])
Parsetree.Extension {name = "SELinux"; file_name = "xselinux";
  query_name = "SELinux"; multiword = false; version = (1, 0);
  declarations =
  [(Parsetree.Import "xproto");
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "client_major";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field {name = "client_minor";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "server_major";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "server_minor";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetDeviceCreateContext"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_len";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field_list {name = "context";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "context_len"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetDeviceCreateContext"; opcode = 2;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "context";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "context_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetDeviceContext"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "context_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "context";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "context_len"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetDeviceContext"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "device";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "context";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "context_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetWindowCreateContext"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_len";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field_list {name = "context";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "context_len"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetWindowCreateContext"; opcode = 6;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "context";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "context_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetWindowContext"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "context";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "context_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Struct {name = "ListItem";
      fields =
      [Parsetree.Field {name = "name";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ATOM" });
           ft_allowed = None }};
        Parsetree.Field {name = "object_context_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "data_context_len";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "object_context";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "object_context_len"))};
        Parsetree.Field_pad {pad = (Parsetree.Pad_align 4); serialize = false};
        Parsetree.Field_list {name = "data_context";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "data_context_len"))};
        Parsetree.Field_pad {pad = (Parsetree.Pad_align 4); serialize = false}
        ]};
    Parsetree.Request {name = "SetPropertyCreateContext"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_len";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field_list {name = "context";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "context_len"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetPropertyCreateContext"; opcode = 9;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "context";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "context_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetPropertyUseContext"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_len";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field_list {name = "context";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "context_len"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetPropertyUseContext"; opcode = 11;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "context";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "context_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetPropertyContext"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "context";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "context_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetPropertyDataContext"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "property";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "context";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "context_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ListProperties"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "properties_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "properties";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ListItem" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "properties_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetSelectionCreateContext"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_len";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field_list {name = "context";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "context_len"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetSelectionCreateContext"; opcode = 16;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "context";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "context_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetSelectionUseContext"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_len";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field_list {name = "context";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "context_len"))}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetSelectionUseContext"; opcode = 18;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "context";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "context_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetSelectionContext"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "selection";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ATOM" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "context";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "context_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetSelectionDataContext"; opcode = 20;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "selection";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ATOM" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "context";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "context_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ListSelections"; opcode = 21;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "selections_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "selections";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "ListItem" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "selections_len"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GetClientContext"; opcode = 22;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "resource";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "context_len";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "context";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Char);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "context_len"))}
                ];
              doc = None });
      doc = None}
    ]}
Parsetree.Extension {name = "Test"; file_name = "xtest";
  query_name = "XTEST"; multiword = false; version = (2, 2);
  declarations =
  [(Parsetree.Import "xproto");
    Parsetree.Request {name = "GetVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "major_version";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "minor_version";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "major_version";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
                Parsetree.Field {name = "minor_version";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Enum {name = "Cursor";
      items =
      [("None", (Parsetree.Item_value 0L));
        ("Current", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Request {name = "CompareCursor"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }};
        Parsetree.Field {name = "cursor";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CURSOR" });
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "same";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Bool);
                   ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "FakeInput"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "type";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
           ft_allowed = None }};
        Parsetree.Field {name = "detail";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "root";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "WINDOW" });
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 8); serialize = false};
        Parsetree.Field {name = "rootX";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "rootY";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 7); serialize = false};
        Parsetree.Field {name = "deviceid";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GrabControl"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "impervious";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
           ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None}
    ]}
Parsetree.Extension {name = "Xv"; file_name = "xv"; query_name = "XVideo";
  multiword = false; version = (2, 2);
  declarations =
  [(Parsetree.Import "xproto"); (Parsetree.Import "shm");
    (Parsetree.Xid "PORT"); (Parsetree.Xid "ENCODING");
    Parsetree.Enum {name = "Type";
      items =
      [("InputMask", (Parsetree.Item_bit 0));
        ("OutputMask", (Parsetree.Item_bit 1));
        ("VideoMask", (Parsetree.Item_bit 2));
        ("StillMask", (Parsetree.Item_bit 3));
        ("ImageMask", (Parsetree.Item_bit 4))];
      doc = None};
    Parsetree.Enum {name = "ImageFormatInfoType";
      items =
      [("RGB", (Parsetree.Item_value 0L)); ("YUV", (Parsetree.Item_value 1L))
        ];
      doc = None};
    Parsetree.Enum {name = "ImageFormatInfoFormat";
      items =
      [("Packed", (Parsetree.Item_value 0L));
        ("Planar", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Enum {name = "AttributeFlag";
      items =
      [("Gettable", (Parsetree.Item_bit 0));
        ("Settable", (Parsetree.Item_bit 1))];
      doc = None};
    Parsetree.Enum {name = "VideoNotifyReason";
      items =
      [("Started", (Parsetree.Item_value 0L));
        ("Stopped", (Parsetree.Item_value 1L));
        ("Busy", (Parsetree.Item_value 2L));
        ("Preempted", (Parsetree.Item_value 3L));
        ("HardError", (Parsetree.Item_value 4L))];
      doc = None};
    Parsetree.Enum {name = "ScanlineOrder";
      items =
      [("TopToBottom", (Parsetree.Item_value 0L));
        ("BottomToTop", (Parsetree.Item_value 1L))];
      doc = None};
    Parsetree.Enum {name = "GrabPortStatus";
      items =
      [("Success", (Parsetree.Item_value 0L));
        ("BadExtension", (Parsetree.Item_value 1L));
        ("AlreadyGrabbed", (Parsetree.Item_value 2L));
        ("InvalidTime", (Parsetree.Item_value 3L));
        ("BadReply", (Parsetree.Item_value 4L));
        ("BadAlloc", (Parsetree.Item_value 5L))];
      doc = None};
    Parsetree.Struct {name = "Rational";
      fields =
      [Parsetree.Field {name = "numerator";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
           ft_allowed = None }};
        Parsetree.Field {name = "denominator";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ]};
    Parsetree.Struct {name = "Format";
      fields =
      [Parsetree.Field {name = "visual";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "VISUALID" });
           ft_allowed = None }};
        Parsetree.Field {name = "depth";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ]};
    Parsetree.Struct {name = "AdaptorInfo";
      fields =
      [Parsetree.Field {name = "base_id";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "name_size";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "num_ports";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "num_formats";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_mask
                     { Parsetree.id_module = None; id_name = "Type" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field_list {name = "name";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "name_size"))};
        Parsetree.Field_pad {pad = (Parsetree.Pad_align 4); serialize = false};
        Parsetree.Field_list {name = "formats";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Format" });
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_formats"))}
        ]};
    Parsetree.Struct {name = "EncodingInfo";
      fields =
      [Parsetree.Field {name = "encoding";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "ENCODING" });
           ft_allowed = None }};
        Parsetree.Field {name = "name_size";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "rate";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "Rational" });
            ft_allowed = None }};
        Parsetree.Field_list {name = "name";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "name_size"))};
        Parsetree.Field_pad {pad = (Parsetree.Pad_align 4); serialize = false}
        ]};
    Parsetree.Struct {name = "Image";
      fields =
      [Parsetree.Field {name = "id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "data_size";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "num_planes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "pitches";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_planes"))};
        Parsetree.Field_list {name = "offsets";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "num_planes"))};
        Parsetree.Field_list {name = "data";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "data_size"))}
        ]};
    Parsetree.Struct {name = "AttributeInfo";
      fields =
      [Parsetree.Field {name = "flags";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed =
           (Some (Parsetree.Allowed_mask
                    { Parsetree.id_module = None; id_name = "AttributeFlag" }))
           }};
        Parsetree.Field {name = "min";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "max";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }};
        Parsetree.Field {name = "size";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "name";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Char);
            ft_allowed = None };
          length = (Some (Parsetree.Field_ref "size"))};
        Parsetree.Field_pad {pad = (Parsetree.Pad_align 4); serialize = false}
        ]};
    Parsetree.Struct {name = "ImageFormatInfo";
      fields =
      [Parsetree.Field {name = "id";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
           ft_allowed = None }};
        Parsetree.Field {name = "type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None;
                       id_name = "ImageFormatInfoType" }))
            }};
        Parsetree.Field {name = "byte_order";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ImageOrder" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field_list {name = "guid";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 16L))};
        Parsetree.Field {name = "bpp";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field {name = "num_planes";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 2); serialize = false};
        Parsetree.Field {name = "depth";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "red_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "green_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "blue_mask";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None;
                       id_name = "ImageFormatInfoFormat" }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false};
        Parsetree.Field {name = "y_sample_bits";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "u_sample_bits";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "v_sample_bits";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "vhorz_y_period";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "vhorz_u_period";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "vhorz_v_period";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "vvert_y_period";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "vvert_u_period";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "vvert_v_period";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field_list {name = "vcomp_order";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = (Some (Parsetree.Expr_value 32L))};
        Parsetree.Field {name = "vscanline_order";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "ScanlineOrder"
                       }))
            }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 11);
          serialize = false}
        ]};
    Parsetree.Error {name = "BadPort"; number = 0; fields = []};
    Parsetree.Error {name = "BadEncoding"; number = 1; fields = []};
    Parsetree.Error {name = "BadControl"; number = 2; fields = []};
    Parsetree.Event {name = "VideoNotify"; number = 0; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field {name = "reason";
         type_ =
         { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Parsetree.Allowed_enum
                    { Parsetree.id_module = None;
                      id_name = "VideoNotifyReason" }))
           }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "port";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PORT" });
            ft_allowed = None }}
        ];
      doc = None};
    Parsetree.Event {name = "PortNotify"; number = 1; is_generic = false;
      no_sequence_number = false;
      fields =
      [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1); serialize = false};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Parsetree.Field {name = "port";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PORT" });
            ft_allowed = None }};
        Parsetree.Field {name = "attribute";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "value";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ];
      doc = None};
    Parsetree.Request {name = "QueryExtension"; opcode = 0;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryAdaptors"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "window";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_adaptors";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false};
                Parsetree.Field_list {name = "info";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "AdaptorInfo"
                         });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_adaptors"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryEncodings"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_encodings";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                  serialize = false};
                Parsetree.Field_list {name = "info";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "EncodingInfo"
                         });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_encodings"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "GrabPort"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field {name = "result";
                 type_ =
                 { Parsetree.ft_type =
                   (Parsetree.Type_primitive Parsetree.Byte);
                   ft_allowed =
                   (Some (Parsetree.Allowed_enum
                            { Parsetree.id_module = None;
                              id_name = "GrabPortStatus" }))
                   }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "UngrabPort"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "time";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Parsetree.Allowed_enum
                     { Parsetree.id_module = None; id_name = "Time" }))
            }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PutVideo"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "gc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GCONTEXT" });
            ft_allowed = None }};
        Parsetree.Field {name = "vid_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "vid_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "vid_w";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vid_h";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_w";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_h";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "PutStill"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "gc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GCONTEXT" });
            ft_allowed = None }};
        Parsetree.Field {name = "vid_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "vid_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "vid_w";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vid_h";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_w";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_h";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetVideo"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "gc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GCONTEXT" });
            ft_allowed = None }};
        Parsetree.Field {name = "vid_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "vid_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "vid_w";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vid_h";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_w";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_h";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetStill"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "gc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GCONTEXT" });
            ft_allowed = None }};
        Parsetree.Field {name = "vid_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "vid_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "vid_w";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vid_h";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_w";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_h";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "StopVideo"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SelectVideoNotify"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "drawable";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Parsetree.Field {name = "onoff";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "SelectPortNotify"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "onoff";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "QueryBestSize"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "vid_w";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "vid_h";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_w";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_h";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "motion";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Bool);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "actual_width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "actual_height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "SetPortAttribute"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "attribute";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }};
        Parsetree.Field {name = "value";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int32);
            ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "GetPortAttribute"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "attribute";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "value";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Int32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryPortAttributes"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_attributes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "text_size";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                  serialize = false};
                Parsetree.Field_list {name = "attributes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None;
                         id_name = "AttributeInfo" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_attributes"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ListImageFormats"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_formats";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "format";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None;
                         id_name = "ImageFormatInfo" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_formats"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "QueryImageAttributes"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num_planes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "data_size";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "width";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "height";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "pitches";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_planes"))};
                Parsetree.Field_list {name = "offsets";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num_planes"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "PutImage"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "gc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GCONTEXT" });
            ft_allowed = None }};
        Parsetree.Field {name = "id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "src_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_w";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_h";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_w";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_h";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field_list {name = "data";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None };
          length = None}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "ShmPutImage"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "drawable";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Parsetree.Field {name = "gc";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "GCONTEXT" });
            ft_allowed = None }};
        Parsetree.Field {name = "shmseg";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SEG" });
            ft_allowed = None }};
        Parsetree.Field {name = "id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "offset";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "src_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_w";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "src_h";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_x";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_y";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Int16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_w";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "drw_h";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "send_event";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card8);
            ft_allowed = None }};
        Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 3); serialize = false}
        ];
      reply = None; doc = None}
    ]}
Parsetree.Extension {name = "XvMC"; file_name = "xvmc";
  query_name = "XVideo-MotionCompensation"; multiword = false;
  version = (1, 1);
  declarations =
  [(Parsetree.Import "xv"); (Parsetree.Xid "CONTEXT");
    (Parsetree.Xid "SURFACE"); (Parsetree.Xid "SUBPICTURE");
    Parsetree.Struct {name = "SurfaceInfo";
      fields =
      [Parsetree.Field {name = "id";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "SURFACE" });
           ft_allowed = None }};
        Parsetree.Field {name = "chroma_format";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "pad0";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "max_width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "max_height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "subpicture_max_width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "subpicture_max_height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "mc_type";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Parsetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true; fields = [];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "major";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field {name = "minor";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "ListSurfaceTypes"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port_id";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "surfaces";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None; id_name = "SurfaceInfo"
                         });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "CreateContext"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_id";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT" });
           ft_allowed = None }};
        Parsetree.Field {name = "port_id";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "PORT" });
            ft_allowed = None }};
        Parsetree.Field {name = "surface_id";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SURFACE" });
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "flags";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "width_actual";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "height_actual";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "flags_return";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "priv_data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "length"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "DestroyContext"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "context_id";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateSurface"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "surface_id";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "SURFACE" });
           ft_allowed = None }};
        Parsetree.Field {name = "context_id";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CONTEXT" });
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                  serialize = false};
                Parsetree.Field_list {name = "priv_data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "length"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "DestroySurface"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "surface_id";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "SURFACE" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "CreateSubpicture"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "subpicture_id";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "SUBPICTURE" });
           ft_allowed = None }};
        Parsetree.Field {name = "context";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "CONTEXT" });
            ft_allowed = None }};
        Parsetree.Field {name = "xvimage_id";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Parsetree.Field {name = "width";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Parsetree.Field {name = "height";
          type_ =
          { Parsetree.ft_type = (Parsetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "width_actual";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "height_actual";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "num_palette_entries";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field {name = "entry_bytes";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card16);
                    ft_allowed = None }};
                Parsetree.Field_list {name = "component_order";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card8);
                    ft_allowed = None };
                  length = (Some (Parsetree.Expr_value 4L))};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                  serialize = false};
                Parsetree.Field_list {name = "priv_data";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "length"))}
                ];
              doc = None });
      doc = None};
    Parsetree.Request {name = "DestroySubpicture"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "subpicture_id";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "SUBPICTURE" });
           ft_allowed = None }}
        ];
      reply = None; doc = None};
    Parsetree.Request {name = "ListSubpictureTypes"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Parsetree.Field {name = "port_id";
         type_ =
         { Parsetree.ft_type =
           (Parsetree.Type_ref
              { Parsetree.id_module = None; id_name = "PORT" });
           ft_allowed = None }};
        Parsetree.Field {name = "surface_id";
          type_ =
          { Parsetree.ft_type =
            (Parsetree.Type_ref
               { Parsetree.id_module = None; id_name = "SURFACE" });
            ft_allowed = None }}
        ];
      reply =
      (Some { Parsetree.fields =
              [Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                 serialize = false};
                Parsetree.Field {name = "num";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_primitive Parsetree.Card32);
                    ft_allowed = None }};
                Parsetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                  serialize = false};
                Parsetree.Field_list {name = "types";
                  type_ =
                  { Parsetree.ft_type =
                    (Parsetree.Type_ref
                       { Parsetree.id_module = None;
                         id_name = "ImageFormatInfo" });
                    ft_allowed = None };
                  length = (Some (Parsetree.Field_ref "num"))}
                ];
              doc = None });
      doc = None}
    ]}
